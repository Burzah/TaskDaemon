/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadbUnmodified;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.LibraryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Library extends TableImpl<LibraryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradb_unmodified.library</code>
     */
    public static final Library LIBRARY = new Library();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibraryRecord> getRecordType() {
        return LibraryRecord.class;
    }

    /**
     * The column <code>paradb_unmodified.library.id</code>.
     */
    public final TableField<LibraryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradb_unmodified.library.author</code>.
     */
    public final TableField<LibraryRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.title</code>.
     */
    public final TableField<LibraryRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.content</code>.
     */
    public final TableField<LibraryRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.ckey</code>.
     */
    public final TableField<LibraryRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.reports</code>.
     */
    public final TableField<LibraryRecord, String> REPORTS = createField(DSL.name("reports"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.summary</code>.
     */
    public final TableField<LibraryRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.rating</code>.
     */
    public final TableField<LibraryRecord, Double> RATING = createField(DSL.name("rating"), SQLDataType.DOUBLE.defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>paradb_unmodified.library.raters</code>.
     */
    public final TableField<LibraryRecord, String> RATERS = createField(DSL.name("raters"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.library.primary_category</code>.
     */
    public final TableField<LibraryRecord, Integer> PRIMARY_CATEGORY = createField(DSL.name("primary_category"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradb_unmodified.library.secondary_category</code>.
     */
    public final TableField<LibraryRecord, Integer> SECONDARY_CATEGORY = createField(DSL.name("secondary_category"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradb_unmodified.library.tertiary_category</code>.
     */
    public final TableField<LibraryRecord, Integer> TERTIARY_CATEGORY = createField(DSL.name("tertiary_category"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private Library(Name alias, Table<LibraryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Library(Name alias, Table<LibraryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradb_unmodified.library</code> table reference
     */
    public Library(String alias) {
        this(DSL.name(alias), LIBRARY);
    }

    /**
     * Create an aliased <code>paradb_unmodified.library</code> table reference
     */
    public Library(Name alias) {
        this(alias, LIBRARY);
    }

    /**
     * Create a <code>paradb_unmodified.library</code> table reference
     */
    public Library() {
        this(DSL.name("library"), null);
    }

    public <O extends Record> Library(Table<O> child, ForeignKey<O, LibraryRecord> key) {
        super(child, key, LIBRARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadbUnmodified.PARADB_UNMODIFIED;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LIBRARY_CKEY, Indexes.LIBRARY_FLAGGED);
    }

    @Override
    public Identity<LibraryRecord, Integer> getIdentity() {
        return (Identity<LibraryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LibraryRecord> getPrimaryKey() {
        return Keys.KEY_LIBRARY_PRIMARY;
    }

    @Override
    public Library as(String alias) {
        return new Library(DSL.name(alias), this);
    }

    @Override
    public Library as(Name alias) {
        return new Library(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Library rename(String name) {
        return new Library(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Library rename(Name name) {
        return new Library(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, Double, String, Integer, Integer, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
