/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.JsonDatumSavesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonDatumSaves extends TableImpl<JsonDatumSavesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.json_datum_saves</code>
     */
    public static final JsonDatumSaves JSON_DATUM_SAVES = new JsonDatumSaves();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonDatumSavesRecord> getRecordType() {
        return JsonDatumSavesRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.json_datum_saves.id</code>.
     */
    public final TableField<JsonDatumSavesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.json_datum_saves.ckey</code>.
     */
    public final TableField<JsonDatumSavesRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.json_datum_saves.slotname</code>.
     */
    public final TableField<JsonDatumSavesRecord, String> SLOTNAME = createField(DSL.name("slotname"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.json_datum_saves.slotjson</code>.
     */
    public final TableField<JsonDatumSavesRecord, String> SLOTJSON = createField(DSL.name("slotjson"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.json_datum_saves.created</code>.
     */
    public final TableField<JsonDatumSavesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.json_datum_saves.updated</code>.
     */
    public final TableField<JsonDatumSavesRecord, LocalDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private JsonDatumSaves(Name alias, Table<JsonDatumSavesRecord> aliased) {
        this(alias, aliased, null);
    }

    private JsonDatumSaves(Name alias, Table<JsonDatumSavesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.json_datum_saves</code> table
     * reference
     */
    public JsonDatumSaves(String alias) {
        this(DSL.name(alias), JSON_DATUM_SAVES);
    }

    /**
     * Create an aliased <code>paradise_gamedb.json_datum_saves</code> table
     * reference
     */
    public JsonDatumSaves(Name alias) {
        this(alias, JSON_DATUM_SAVES);
    }

    /**
     * Create a <code>paradise_gamedb.json_datum_saves</code> table reference
     */
    public JsonDatumSaves() {
        this(DSL.name("json_datum_saves"), null);
    }

    public <O extends Record> JsonDatumSaves(Table<O> child, ForeignKey<O, JsonDatumSavesRecord> key) {
        super(child, key, JSON_DATUM_SAVES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.JSON_DATUM_SAVES_CKEY);
    }

    @Override
    public Identity<JsonDatumSavesRecord, Integer> getIdentity() {
        return (Identity<JsonDatumSavesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JsonDatumSavesRecord> getPrimaryKey() {
        return Keys.KEY_JSON_DATUM_SAVES_PRIMARY;
    }

    @Override
    public List<UniqueKey<JsonDatumSavesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_JSON_DATUM_SAVES_CKEY_UNIQUE);
    }

    @Override
    public JsonDatumSaves as(String alias) {
        return new JsonDatumSaves(DSL.name(alias), this);
    }

    @Override
    public JsonDatumSaves as(Name alias) {
        return new JsonDatumSaves(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonDatumSaves rename(String name) {
        return new JsonDatumSaves(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonDatumSaves rename(Name name) {
        return new JsonDatumSaves(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
