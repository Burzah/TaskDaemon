/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.InstanceDataCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstanceDataCache extends TableImpl<InstanceDataCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_gamedb.instance_data_cache</code>
     */
    public static final InstanceDataCache INSTANCE_DATA_CACHE = new InstanceDataCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceDataCacheRecord> getRecordType() {
        return InstanceDataCacheRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.instance_data_cache.server_id</code>.
     */
    public final TableField<InstanceDataCacheRecord, String> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.instance_data_cache.key_name</code>.
     */
    public final TableField<InstanceDataCacheRecord, String> KEY_NAME = createField(DSL.name("key_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.instance_data_cache.key_value</code>.
     */
    public final TableField<InstanceDataCacheRecord, String> KEY_VALUE = createField(DSL.name("key_value"), SQLDataType.VARCHAR(12345).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.instance_data_cache.last_updated</code>.
     */
    public final TableField<InstanceDataCacheRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private InstanceDataCache(Name alias, Table<InstanceDataCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private InstanceDataCache(Name alias, Table<InstanceDataCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.instance_data_cache</code> table
     * reference
     */
    public InstanceDataCache(String alias) {
        this(DSL.name(alias), INSTANCE_DATA_CACHE);
    }

    /**
     * Create an aliased <code>paradise_gamedb.instance_data_cache</code> table
     * reference
     */
    public InstanceDataCache(Name alias) {
        this(alias, INSTANCE_DATA_CACHE);
    }

    /**
     * Create a <code>paradise_gamedb.instance_data_cache</code> table reference
     */
    public InstanceDataCache() {
        this(DSL.name("instance_data_cache"), null);
    }

    public <O extends Record> InstanceDataCache(Table<O> child, ForeignKey<O, InstanceDataCacheRecord> key) {
        super(child, key, INSTANCE_DATA_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public UniqueKey<InstanceDataCacheRecord> getPrimaryKey() {
        return Keys.KEY_INSTANCE_DATA_CACHE_PRIMARY;
    }

    @Override
    public InstanceDataCache as(String alias) {
        return new InstanceDataCache(DSL.name(alias), this);
    }

    @Override
    public InstanceDataCache as(Name alias) {
        return new InstanceDataCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceDataCache rename(String name) {
        return new InstanceDataCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceDataCache rename(Name name) {
        return new InstanceDataCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
