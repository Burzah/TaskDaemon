/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables.records;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.tables.Notes;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotesRecord extends UpdatableRecordImpl<NotesRecord> implements Record14<Integer, String, String, LocalDateTime, Integer, String, String, String, String, UInteger, UByte, Byte, String, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_gamedb.notes.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.ckey</code>.
     */
    public void setCkey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.ckey</code>.
     */
    public String getCkey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.notetext</code>.
     */
    public void setNotetext(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.notetext</code>.
     */
    public String getNotetext() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.round_id</code>.
     */
    public void setRoundId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.round_id</code>.
     */
    public Integer getRoundId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.adminckey</code>.
     */
    public void setAdminckey(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.adminckey</code>.
     */
    public String getAdminckey() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.last_editor</code>.
     */
    public void setLastEditor(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.last_editor</code>.
     */
    public String getLastEditor() {
        return (String) get(6);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.edits</code>.
     */
    public void setEdits(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.edits</code>.
     */
    public String getEdits() {
        return (String) get(7);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.server</code>.
     */
    public void setServer(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.server</code>.
     */
    public String getServer() {
        return (String) get(8);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.crew_playtime</code>.
     */
    public void setCrewPlaytime(UInteger value) {
        set(9, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.crew_playtime</code>.
     */
    public UInteger getCrewPlaytime() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.automated</code>.
     */
    public void setAutomated(UByte value) {
        set(10, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.automated</code>.
     */
    public UByte getAutomated() {
        return (UByte) get(10);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.deleted</code>.
     */
    public void setDeleted(Byte value) {
        set(11, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.deleted</code>.
     */
    public Byte getDeleted() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.deletedby</code>.
     */
    public void setDeletedby(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.deletedby</code>.
     */
    public String getDeletedby() {
        return (String) get(12);
    }

    /**
     * Setter for <code>paradise_gamedb.notes.public</code>.
     */
    public void setPublic(Byte value) {
        set(13, value);
    }

    /**
     * Getter for <code>paradise_gamedb.notes.public</code>.
     */
    public Byte getPublic() {
        return (Byte) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, LocalDateTime, Integer, String, String, String, String, UInteger, UByte, Byte, String, Byte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Integer, String, String, LocalDateTime, Integer, String, String, String, String, UInteger, UByte, Byte, String, Byte> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Notes.NOTES.ID;
    }

    @Override
    public Field<String> field2() {
        return Notes.NOTES.CKEY;
    }

    @Override
    public Field<String> field3() {
        return Notes.NOTES.NOTETEXT;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Notes.NOTES.TIMESTAMP;
    }

    @Override
    public Field<Integer> field5() {
        return Notes.NOTES.ROUND_ID;
    }

    @Override
    public Field<String> field6() {
        return Notes.NOTES.ADMINCKEY;
    }

    @Override
    public Field<String> field7() {
        return Notes.NOTES.LAST_EDITOR;
    }

    @Override
    public Field<String> field8() {
        return Notes.NOTES.EDITS;
    }

    @Override
    public Field<String> field9() {
        return Notes.NOTES.SERVER;
    }

    @Override
    public Field<UInteger> field10() {
        return Notes.NOTES.CREW_PLAYTIME;
    }

    @Override
    public Field<UByte> field11() {
        return Notes.NOTES.AUTOMATED;
    }

    @Override
    public Field<Byte> field12() {
        return Notes.NOTES.DELETED;
    }

    @Override
    public Field<String> field13() {
        return Notes.NOTES.DELETEDBY;
    }

    @Override
    public Field<Byte> field14() {
        return Notes.NOTES.PUBLIC;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCkey();
    }

    @Override
    public String component3() {
        return getNotetext();
    }

    @Override
    public LocalDateTime component4() {
        return getTimestamp();
    }

    @Override
    public Integer component5() {
        return getRoundId();
    }

    @Override
    public String component6() {
        return getAdminckey();
    }

    @Override
    public String component7() {
        return getLastEditor();
    }

    @Override
    public String component8() {
        return getEdits();
    }

    @Override
    public String component9() {
        return getServer();
    }

    @Override
    public UInteger component10() {
        return getCrewPlaytime();
    }

    @Override
    public UByte component11() {
        return getAutomated();
    }

    @Override
    public Byte component12() {
        return getDeleted();
    }

    @Override
    public String component13() {
        return getDeletedby();
    }

    @Override
    public Byte component14() {
        return getPublic();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCkey();
    }

    @Override
    public String value3() {
        return getNotetext();
    }

    @Override
    public LocalDateTime value4() {
        return getTimestamp();
    }

    @Override
    public Integer value5() {
        return getRoundId();
    }

    @Override
    public String value6() {
        return getAdminckey();
    }

    @Override
    public String value7() {
        return getLastEditor();
    }

    @Override
    public String value8() {
        return getEdits();
    }

    @Override
    public String value9() {
        return getServer();
    }

    @Override
    public UInteger value10() {
        return getCrewPlaytime();
    }

    @Override
    public UByte value11() {
        return getAutomated();
    }

    @Override
    public Byte value12() {
        return getDeleted();
    }

    @Override
    public String value13() {
        return getDeletedby();
    }

    @Override
    public Byte value14() {
        return getPublic();
    }

    @Override
    public NotesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public NotesRecord value2(String value) {
        setCkey(value);
        return this;
    }

    @Override
    public NotesRecord value3(String value) {
        setNotetext(value);
        return this;
    }

    @Override
    public NotesRecord value4(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public NotesRecord value5(Integer value) {
        setRoundId(value);
        return this;
    }

    @Override
    public NotesRecord value6(String value) {
        setAdminckey(value);
        return this;
    }

    @Override
    public NotesRecord value7(String value) {
        setLastEditor(value);
        return this;
    }

    @Override
    public NotesRecord value8(String value) {
        setEdits(value);
        return this;
    }

    @Override
    public NotesRecord value9(String value) {
        setServer(value);
        return this;
    }

    @Override
    public NotesRecord value10(UInteger value) {
        setCrewPlaytime(value);
        return this;
    }

    @Override
    public NotesRecord value11(UByte value) {
        setAutomated(value);
        return this;
    }

    @Override
    public NotesRecord value12(Byte value) {
        setDeleted(value);
        return this;
    }

    @Override
    public NotesRecord value13(String value) {
        setDeletedby(value);
        return this;
    }

    @Override
    public NotesRecord value14(Byte value) {
        setPublic(value);
        return this;
    }

    @Override
    public NotesRecord values(Integer value1, String value2, String value3, LocalDateTime value4, Integer value5, String value6, String value7, String value8, String value9, UInteger value10, UByte value11, Byte value12, String value13, Byte value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotesRecord
     */
    public NotesRecord() {
        super(Notes.NOTES);
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(Integer id, String ckey, String notetext, LocalDateTime timestamp, Integer roundId, String adminckey, String lastEditor, String edits, String server, UInteger crewPlaytime, UByte automated, Byte deleted, String deletedby, Byte public_) {
        super(Notes.NOTES);

        setId(id);
        setCkey(ckey);
        setNotetext(notetext);
        setTimestamp(timestamp);
        setRoundId(roundId);
        setAdminckey(adminckey);
        setLastEditor(lastEditor);
        setEdits(edits);
        setServer(server);
        setCrewPlaytime(crewPlaytime);
        setAutomated(automated);
        setDeleted(deleted);
        setDeletedby(deletedby);
        setPublic(public_);
    }
}
