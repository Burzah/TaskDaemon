/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables.records;


import me.aa07.paradise.taskdaemon.database.gamedb.tables.OauthTokens;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthTokensRecord extends UpdatableRecordImpl<OauthTokensRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_gamedb.oauth_tokens.ckey</code>.
     */
    public void setCkey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_gamedb.oauth_tokens.ckey</code>.
     */
    public String getCkey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_gamedb.oauth_tokens.token</code>.
     */
    public void setToken(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_gamedb.oauth_tokens.token</code>.
     */
    public String getToken() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return OauthTokens.OAUTH_TOKENS.CKEY;
    }

    @Override
    public Field<String> field2() {
        return OauthTokens.OAUTH_TOKENS.TOKEN;
    }

    @Override
    public String component1() {
        return getCkey();
    }

    @Override
    public String component2() {
        return getToken();
    }

    @Override
    public String value1() {
        return getCkey();
    }

    @Override
    public String value2() {
        return getToken();
    }

    @Override
    public OauthTokensRecord value1(String value) {
        setCkey(value);
        return this;
    }

    @Override
    public OauthTokensRecord value2(String value) {
        setToken(value);
        return this;
    }

    @Override
    public OauthTokensRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthTokensRecord
     */
    public OauthTokensRecord() {
        super(OauthTokens.OAUTH_TOKENS);
    }

    /**
     * Create a detached, initialised OauthTokensRecord
     */
    public OauthTokensRecord(String ckey, String token) {
        super(OauthTokens.OAUTH_TOKENS);

        setCkey(ckey);
        setToken(token);
    }
}
