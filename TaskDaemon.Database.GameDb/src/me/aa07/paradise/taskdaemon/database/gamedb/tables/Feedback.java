/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.FeedbackKeyType;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.FeedbackRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feedback extends TableImpl<FeedbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.feedback</code>
     */
    public static final Feedback FEEDBACK = new Feedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedbackRecord> getRecordType() {
        return FeedbackRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.feedback.id</code>.
     */
    public final TableField<FeedbackRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.datetime</code>.
     */
    public final TableField<FeedbackRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.round_id</code>.
     */
    public final TableField<FeedbackRecord, Integer> ROUND_ID = createField(DSL.name("round_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.key_name</code>.
     */
    public final TableField<FeedbackRecord, String> KEY_NAME = createField(DSL.name("key_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.key_type</code>.
     */
    public final TableField<FeedbackRecord, FeedbackKeyType> KEY_TYPE = createField(DSL.name("key_type"), SQLDataType.VARCHAR(12).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.FeedbackKeyType.class), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.version</code>.
     */
    public final TableField<FeedbackRecord, UByte> VERSION = createField(DSL.name("version"), SQLDataType.TINYINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.feedback.json</code>.
     */
    public final TableField<FeedbackRecord, String> JSON = createField(DSL.name("json"), SQLDataType.CLOB.nullable(false), this, "");

    private Feedback(Name alias, Table<FeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feedback(Name alias, Table<FeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.feedback</code> table reference
     */
    public Feedback(String alias) {
        this(DSL.name(alias), FEEDBACK);
    }

    /**
     * Create an aliased <code>paradise_gamedb.feedback</code> table reference
     */
    public Feedback(Name alias) {
        this(alias, FEEDBACK);
    }

    /**
     * Create a <code>paradise_gamedb.feedback</code> table reference
     */
    public Feedback() {
        this(DSL.name("feedback"), null);
    }

    public <O extends Record> Feedback(Table<O> child, ForeignKey<O, FeedbackRecord> key) {
        super(child, key, FEEDBACK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public Identity<FeedbackRecord, UInteger> getIdentity() {
        return (Identity<FeedbackRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<FeedbackRecord> getPrimaryKey() {
        return Keys.KEY_FEEDBACK_PRIMARY;
    }

    @Override
    public Feedback as(String alias) {
        return new Feedback(DSL.name(alias), this);
    }

    @Override
    public Feedback as(Name alias) {
        return new Feedback(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(String name) {
        return new Feedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(Name name) {
        return new Feedback(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, LocalDateTime, Integer, String, FeedbackKeyType, UByte, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
