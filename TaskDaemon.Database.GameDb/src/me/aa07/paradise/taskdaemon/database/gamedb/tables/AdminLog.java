/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.AdminLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminLog extends TableImpl<AdminLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.admin_log</code>
     */
    public static final AdminLog ADMIN_LOG = new AdminLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminLogRecord> getRecordType() {
        return AdminLogRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.admin_log.id</code>.
     */
    public final TableField<AdminLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.admin_log.datetime</code>.
     */
    public final TableField<AdminLogRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.admin_log.adminckey</code>.
     */
    public final TableField<AdminLogRecord, String> ADMINCKEY = createField(DSL.name("adminckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.admin_log.adminip</code>.
     */
    public final TableField<AdminLogRecord, String> ADMINIP = createField(DSL.name("adminip"), SQLDataType.VARCHAR(18).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.admin_log.log</code>.
     */
    public final TableField<AdminLogRecord, String> LOG = createField(DSL.name("log"), SQLDataType.CLOB.nullable(false), this, "");

    private AdminLog(Name alias, Table<AdminLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminLog(Name alias, Table<AdminLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.admin_log</code> table reference
     */
    public AdminLog(String alias) {
        this(DSL.name(alias), ADMIN_LOG);
    }

    /**
     * Create an aliased <code>paradise_gamedb.admin_log</code> table reference
     */
    public AdminLog(Name alias) {
        this(alias, ADMIN_LOG);
    }

    /**
     * Create a <code>paradise_gamedb.admin_log</code> table reference
     */
    public AdminLog() {
        this(DSL.name("admin_log"), null);
    }

    public <O extends Record> AdminLog(Table<O> child, ForeignKey<O, AdminLogRecord> key) {
        super(child, key, ADMIN_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ADMIN_LOG_ADMINCKEY);
    }

    @Override
    public Identity<AdminLogRecord, Integer> getIdentity() {
        return (Identity<AdminLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminLogRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_LOG_PRIMARY;
    }

    @Override
    public AdminLog as(String alias) {
        return new AdminLog(DSL.name(alias), this);
    }

    @Override
    public AdminLog as(Name alias) {
        return new AdminLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminLog rename(String name) {
        return new AdminLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminLog rename(Name name) {
        return new AdminLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDateTime, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
