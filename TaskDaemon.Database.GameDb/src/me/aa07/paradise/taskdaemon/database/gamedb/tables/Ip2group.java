/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.Ip2groupRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ip2group extends TableImpl<Ip2groupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.ip2group</code>
     */
    public static final Ip2group IP2GROUP = new Ip2group();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Ip2groupRecord> getRecordType() {
        return Ip2groupRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.ip2group.ip</code>.
     */
    public final TableField<Ip2groupRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(18).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.ip2group.date</code>.
     */
    public final TableField<Ip2groupRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.ip2group.groupstr</code>.
     */
    public final TableField<Ip2groupRecord, String> GROUPSTR = createField(DSL.name("groupstr"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    private Ip2group(Name alias, Table<Ip2groupRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ip2group(Name alias, Table<Ip2groupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.ip2group</code> table reference
     */
    public Ip2group(String alias) {
        this(DSL.name(alias), IP2GROUP);
    }

    /**
     * Create an aliased <code>paradise_gamedb.ip2group</code> table reference
     */
    public Ip2group(Name alias) {
        this(alias, IP2GROUP);
    }

    /**
     * Create a <code>paradise_gamedb.ip2group</code> table reference
     */
    public Ip2group() {
        this(DSL.name("ip2group"), null);
    }

    public <O extends Record> Ip2group(Table<O> child, ForeignKey<O, Ip2groupRecord> key) {
        super(child, key, IP2GROUP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IP2GROUP_GROUPSTR);
    }

    @Override
    public UniqueKey<Ip2groupRecord> getPrimaryKey() {
        return Keys.KEY_IP2GROUP_PRIMARY;
    }

    @Override
    public Ip2group as(String alias) {
        return new Ip2group(DSL.name(alias), this);
    }

    @Override
    public Ip2group as(Name alias) {
        return new Ip2group(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ip2group rename(String name) {
        return new Ip2group(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ip2group rename(Name name) {
        return new Ip2group(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
