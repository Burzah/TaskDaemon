/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables.records;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.tables.Privacy;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PrivacyRecord extends UpdatableRecordImpl<PrivacyRecord> implements Record3<String, LocalDateTime, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradb_unmodified.privacy.ckey</code>.
     */
    public void setCkey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradb_unmodified.privacy.ckey</code>.
     */
    public String getCkey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradb_unmodified.privacy.datetime</code>.
     */
    public void setDatetime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradb_unmodified.privacy.datetime</code>.
     */
    public LocalDateTime getDatetime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>paradb_unmodified.privacy.consent</code>.
     */
    public void setConsent(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradb_unmodified.privacy.consent</code>.
     */
    public Boolean getConsent() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, LocalDateTime, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, LocalDateTime, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Privacy.PRIVACY.CKEY;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Privacy.PRIVACY.DATETIME;
    }

    @Override
    public Field<Boolean> field3() {
        return Privacy.PRIVACY.CONSENT;
    }

    @Override
    public String component1() {
        return getCkey();
    }

    @Override
    public LocalDateTime component2() {
        return getDatetime();
    }

    @Override
    public Boolean component3() {
        return getConsent();
    }

    @Override
    public String value1() {
        return getCkey();
    }

    @Override
    public LocalDateTime value2() {
        return getDatetime();
    }

    @Override
    public Boolean value3() {
        return getConsent();
    }

    @Override
    public PrivacyRecord value1(String value) {
        setCkey(value);
        return this;
    }

    @Override
    public PrivacyRecord value2(LocalDateTime value) {
        setDatetime(value);
        return this;
    }

    @Override
    public PrivacyRecord value3(Boolean value) {
        setConsent(value);
        return this;
    }

    @Override
    public PrivacyRecord values(String value1, LocalDateTime value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PrivacyRecord
     */
    public PrivacyRecord() {
        super(Privacy.PRIVACY);
    }

    /**
     * Create a detached, initialised PrivacyRecord
     */
    public PrivacyRecord(String ckey, LocalDateTime datetime, Boolean consent) {
        super(Privacy.PRIVACY);

        setCkey(ckey);
        setDatetime(datetime);
        setConsent(consent);
    }
}
