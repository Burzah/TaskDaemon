/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables.records;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.enums.FeedbackKeyType;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.Feedback;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeedbackRecord extends UpdatableRecordImpl<FeedbackRecord> implements Record7<UInteger, LocalDateTime, Integer, String, FeedbackKeyType, UByte, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradb_unmodified.feedback.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.datetime</code>.
     */
    public void setDatetime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.datetime</code>.
     */
    public LocalDateTime getDatetime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.round_id</code>.
     */
    public void setRoundId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.round_id</code>.
     */
    public Integer getRoundId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.key_name</code>.
     */
    public void setKeyName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.key_name</code>.
     */
    public String getKeyName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.key_type</code>.
     */
    public void setKeyType(FeedbackKeyType value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.key_type</code>.
     */
    public FeedbackKeyType getKeyType() {
        return (FeedbackKeyType) get(4);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.version</code>.
     */
    public void setVersion(UByte value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.version</code>.
     */
    public UByte getVersion() {
        return (UByte) get(5);
    }

    /**
     * Setter for <code>paradb_unmodified.feedback.json</code>.
     */
    public void setJson(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradb_unmodified.feedback.json</code>.
     */
    public String getJson() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, LocalDateTime, Integer, String, FeedbackKeyType, UByte, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UInteger, LocalDateTime, Integer, String, FeedbackKeyType, UByte, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return Feedback.FEEDBACK.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Feedback.FEEDBACK.DATETIME;
    }

    @Override
    public Field<Integer> field3() {
        return Feedback.FEEDBACK.ROUND_ID;
    }

    @Override
    public Field<String> field4() {
        return Feedback.FEEDBACK.KEY_NAME;
    }

    @Override
    public Field<FeedbackKeyType> field5() {
        return Feedback.FEEDBACK.KEY_TYPE;
    }

    @Override
    public Field<UByte> field6() {
        return Feedback.FEEDBACK.VERSION;
    }

    @Override
    public Field<String> field7() {
        return Feedback.FEEDBACK.JSON;
    }

    @Override
    public UInteger component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getDatetime();
    }

    @Override
    public Integer component3() {
        return getRoundId();
    }

    @Override
    public String component4() {
        return getKeyName();
    }

    @Override
    public FeedbackKeyType component5() {
        return getKeyType();
    }

    @Override
    public UByte component6() {
        return getVersion();
    }

    @Override
    public String component7() {
        return getJson();
    }

    @Override
    public UInteger value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getDatetime();
    }

    @Override
    public Integer value3() {
        return getRoundId();
    }

    @Override
    public String value4() {
        return getKeyName();
    }

    @Override
    public FeedbackKeyType value5() {
        return getKeyType();
    }

    @Override
    public UByte value6() {
        return getVersion();
    }

    @Override
    public String value7() {
        return getJson();
    }

    @Override
    public FeedbackRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    @Override
    public FeedbackRecord value2(LocalDateTime value) {
        setDatetime(value);
        return this;
    }

    @Override
    public FeedbackRecord value3(Integer value) {
        setRoundId(value);
        return this;
    }

    @Override
    public FeedbackRecord value4(String value) {
        setKeyName(value);
        return this;
    }

    @Override
    public FeedbackRecord value5(FeedbackKeyType value) {
        setKeyType(value);
        return this;
    }

    @Override
    public FeedbackRecord value6(UByte value) {
        setVersion(value);
        return this;
    }

    @Override
    public FeedbackRecord value7(String value) {
        setJson(value);
        return this;
    }

    @Override
    public FeedbackRecord values(UInteger value1, LocalDateTime value2, Integer value3, String value4, FeedbackKeyType value5, UByte value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FeedbackRecord
     */
    public FeedbackRecord() {
        super(Feedback.FEEDBACK);
    }

    /**
     * Create a detached, initialised FeedbackRecord
     */
    public FeedbackRecord(UInteger id, LocalDateTime datetime, Integer roundId, String keyName, FeedbackKeyType keyType, UByte version, String json) {
        super(Feedback.FEEDBACK);

        setId(id);
        setDatetime(datetime);
        setRoundId(roundId);
        setKeyName(keyName);
        setKeyType(keyType);
        setVersion(version);
        setJson(json);
    }
}
