/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.ConnectionLogResult;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.ConnectionLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectionLog extends TableImpl<ConnectionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.connection_log</code>
     */
    public static final ConnectionLog CONNECTION_LOG = new ConnectionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectionLogRecord> getRecordType() {
        return ConnectionLogRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.connection_log.id</code>.
     */
    public final TableField<ConnectionLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.datetime</code>.
     */
    public final TableField<ConnectionLogRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.ckey</code>.
     */
    public final TableField<ConnectionLogRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.ip</code>.
     */
    public final TableField<ConnectionLogRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.computerid</code>.
     */
    public final TableField<ConnectionLogRecord, String> COMPUTERID = createField(DSL.name("computerid"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.server_id</code>.
     */
    public final TableField<ConnectionLogRecord, String> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.connection_log.result</code>.
     */
    public final TableField<ConnectionLogRecord, ConnectionLogResult> RESULT = createField(DSL.name("result"), SQLDataType.VARCHAR(17).nullable(false).defaultValue(DSL.inline("'ESTABLISHED'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.ConnectionLogResult.class), this, "");

    private ConnectionLog(Name alias, Table<ConnectionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConnectionLog(Name alias, Table<ConnectionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.connection_log</code> table
     * reference
     */
    public ConnectionLog(String alias) {
        this(DSL.name(alias), CONNECTION_LOG);
    }

    /**
     * Create an aliased <code>paradise_gamedb.connection_log</code> table
     * reference
     */
    public ConnectionLog(Name alias) {
        this(alias, CONNECTION_LOG);
    }

    /**
     * Create a <code>paradise_gamedb.connection_log</code> table reference
     */
    public ConnectionLog() {
        this(DSL.name("connection_log"), null);
    }

    public <O extends Record> ConnectionLog(Table<O> child, ForeignKey<O, ConnectionLogRecord> key) {
        super(child, key, CONNECTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONNECTION_LOG_CKEY, Indexes.CONNECTION_LOG_COMPUTERID, Indexes.CONNECTION_LOG_IP);
    }

    @Override
    public Identity<ConnectionLogRecord, Integer> getIdentity() {
        return (Identity<ConnectionLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConnectionLogRecord> getPrimaryKey() {
        return Keys.KEY_CONNECTION_LOG_PRIMARY;
    }

    @Override
    public ConnectionLog as(String alias) {
        return new ConnectionLog(DSL.name(alias), this);
    }

    @Override
    public ConnectionLog as(Name alias) {
        return new ConnectionLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectionLog rename(String name) {
        return new ConnectionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectionLog rename(Name name) {
        return new ConnectionLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, String, String, String, String, ConnectionLogResult> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
