/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.DonatorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Donators extends TableImpl<DonatorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.donators</code>
     */
    public static final Donators DONATORS = new Donators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DonatorsRecord> getRecordType() {
        return DonatorsRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.donators.patreon_name</code>.
     */
    public final TableField<DonatorsRecord, String> PATREON_NAME = createField(DSL.name("patreon_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.donators.tier</code>.
     */
    public final TableField<DonatorsRecord, Integer> TIER = createField(DSL.name("tier"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_gamedb.donators.ckey</code>. Manual Field
     */
    public final TableField<DonatorsRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Manual Field");

    /**
     * The column <code>paradise_gamedb.donators.start_date</code>.
     */
    public final TableField<DonatorsRecord, LocalDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.donators.end_date</code>.
     */
    public final TableField<DonatorsRecord, LocalDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.donators.active</code>.
     */
    public final TableField<DonatorsRecord, Byte> ACTIVE = createField(DSL.name("active"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");

    private Donators(Name alias, Table<DonatorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Donators(Name alias, Table<DonatorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.donators</code> table reference
     */
    public Donators(String alias) {
        this(DSL.name(alias), DONATORS);
    }

    /**
     * Create an aliased <code>paradise_gamedb.donators</code> table reference
     */
    public Donators(Name alias) {
        this(alias, DONATORS);
    }

    /**
     * Create a <code>paradise_gamedb.donators</code> table reference
     */
    public Donators() {
        this(DSL.name("donators"), null);
    }

    public <O extends Record> Donators(Table<O> child, ForeignKey<O, DonatorsRecord> key) {
        super(child, key, DONATORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DONATORS_CKEY);
    }

    @Override
    public UniqueKey<DonatorsRecord> getPrimaryKey() {
        return Keys.KEY_DONATORS_PRIMARY;
    }

    @Override
    public Donators as(String alias) {
        return new Donators(DSL.name(alias), this);
    }

    @Override
    public Donators as(Name alias) {
        return new Donators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Donators rename(String name) {
        return new Donators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Donators rename(Name name) {
        return new Donators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, String, LocalDateTime, LocalDateTime, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
