/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.ChangelogClType;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.ChangelogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Changelog extends TableImpl<ChangelogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.changelog</code>
     */
    public static final Changelog CHANGELOG = new Changelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangelogRecord> getRecordType() {
        return ChangelogRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.changelog.id</code>.
     */
    public final TableField<ChangelogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_gamedb.changelog.pr_number</code>.
     */
    public final TableField<ChangelogRecord, Integer> PR_NUMBER = createField(DSL.name("pr_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.changelog.date_merged</code>.
     */
    public final TableField<ChangelogRecord, LocalDateTime> DATE_MERGED = createField(DSL.name("date_merged"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.changelog.author</code>.
     */
    public final TableField<ChangelogRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.changelog.cl_type</code>.
     */
    public final TableField<ChangelogRecord, ChangelogClType> CL_TYPE = createField(DSL.name("cl_type"), SQLDataType.VARCHAR(10).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.ChangelogClType.class), this, "");

    /**
     * The column <code>paradise_gamedb.changelog.cl_entry</code>.
     */
    public final TableField<ChangelogRecord, String> CL_ENTRY = createField(DSL.name("cl_entry"), SQLDataType.CLOB.nullable(false), this, "");

    private Changelog(Name alias, Table<ChangelogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.changelog</code> table reference
     */
    public Changelog(String alias) {
        this(DSL.name(alias), CHANGELOG);
    }

    /**
     * Create an aliased <code>paradise_gamedb.changelog</code> table reference
     */
    public Changelog(Name alias) {
        this(alias, CHANGELOG);
    }

    /**
     * Create a <code>paradise_gamedb.changelog</code> table reference
     */
    public Changelog() {
        this(DSL.name("changelog"), null);
    }

    public <O extends Record> Changelog(Table<O> child, ForeignKey<O, ChangelogRecord> key) {
        super(child, key, CHANGELOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public Identity<ChangelogRecord, Integer> getIdentity() {
        return (Identity<ChangelogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChangelogRecord> getPrimaryKey() {
        return Keys.KEY_CHANGELOG_PRIMARY;
    }

    @Override
    public Changelog as(String alias) {
        return new Changelog(DSL.name(alias), this);
    }

    @Override
    public Changelog as(Name alias) {
        return new Changelog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(String name) {
        return new Changelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(Name name) {
        return new Changelog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, LocalDateTime, String, ChangelogClType, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
