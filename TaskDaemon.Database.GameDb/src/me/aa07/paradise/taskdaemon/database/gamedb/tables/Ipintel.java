/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.IpintelRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ipintel extends TableImpl<IpintelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.ipintel</code>
     */
    public static final Ipintel IPINTEL = new Ipintel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IpintelRecord> getRecordType() {
        return IpintelRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.ipintel.ip</code>.
     */
    public final TableField<IpintelRecord, UInteger> IP = createField(DSL.name("ip"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.ipintel.date</code>.
     */
    public final TableField<IpintelRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_gamedb.ipintel.intel</code>.
     */
    public final TableField<IpintelRecord, Double> INTEL = createField(DSL.name("intel"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    private Ipintel(Name alias, Table<IpintelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ipintel(Name alias, Table<IpintelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.ipintel</code> table reference
     */
    public Ipintel(String alias) {
        this(DSL.name(alias), IPINTEL);
    }

    /**
     * Create an aliased <code>paradise_gamedb.ipintel</code> table reference
     */
    public Ipintel(Name alias) {
        this(alias, IPINTEL);
    }

    /**
     * Create a <code>paradise_gamedb.ipintel</code> table reference
     */
    public Ipintel() {
        this(DSL.name("ipintel"), null);
    }

    public <O extends Record> Ipintel(Table<O> child, ForeignKey<O, IpintelRecord> key) {
        super(child, key, IPINTEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public UniqueKey<IpintelRecord> getPrimaryKey() {
        return Keys.KEY_IPINTEL_PRIMARY;
    }

    @Override
    public Ipintel as(String alias) {
        return new Ipintel(DSL.name(alias), this);
    }

    @Override
    public Ipintel as(Name alias) {
        return new Ipintel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ipintel rename(String name) {
        return new Ipintel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ipintel rename(Name name) {
        return new Ipintel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, LocalDateTime, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
