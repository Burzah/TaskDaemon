/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadbUnmodified;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.TicketsEndRoundState;
import me.aa07.paradise.taskdaemon.database.gamedb.enums.TicketsTicketType;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.TicketsRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradb_unmodified.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>paradb_unmodified.tickets.id</code>.
     */
    public final TableField<TicketsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_num</code>.
     */
    public final TableField<TicketsRecord, Integer> TICKET_NUM = createField(DSL.name("ticket_num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_type</code>.
     */
    public final TableField<TicketsRecord, TicketsTicketType> TICKET_TYPE = createField(DSL.name("ticket_type"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.TicketsTicketType.class), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.real_filetime</code>.
     */
    public final TableField<TicketsRecord, LocalDateTime> REAL_FILETIME = createField(DSL.name("real_filetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.relative_filetime</code>.
     */
    public final TableField<TicketsRecord, LocalTime> RELATIVE_FILETIME = createField(DSL.name("relative_filetime"), SQLDataType.LOCALTIME.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_creator</code>.
     */
    public final TableField<TicketsRecord, String> TICKET_CREATOR = createField(DSL.name("ticket_creator"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_topic</code>.
     */
    public final TableField<TicketsRecord, String> TICKET_TOPIC = createField(DSL.name("ticket_topic"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_taker</code>.
     */
    public final TableField<TicketsRecord, String> TICKET_TAKER = createField(DSL.name("ticket_taker"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.ticket_take_time</code>.
     */
    public final TableField<TicketsRecord, LocalDateTime> TICKET_TAKE_TIME = createField(DSL.name("ticket_take_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.all_responses</code>.
     */
    public final TableField<TicketsRecord, String> ALL_RESPONSES = createField(DSL.name("all_responses"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.awho</code>.
     */
    public final TableField<TicketsRecord, String> AWHO = createField(DSL.name("awho"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.tickets.end_round_state</code>.
     */
    public final TableField<TicketsRecord, TicketsEndRoundState> END_ROUND_STATE = createField(DSL.name("end_round_state"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(me.aa07.paradise.taskdaemon.database.gamedb.enums.TicketsEndRoundState.class), this, "");

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradb_unmodified.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>paradb_unmodified.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    /**
     * Create a <code>paradb_unmodified.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, TicketsRecord> key) {
        super(child, key, TICKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadbUnmodified.PARADB_UNMODIFIED;
    }

    @Override
    public Identity<TicketsRecord, Integer> getIdentity() {
        return (Identity<TicketsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.KEY_TICKETS_PRIMARY;
    }

    @Override
    public List<Check<TicketsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("all_responses"), "json_valid(`all_responses`)", true),
            Internal.createCheck(this, DSL.name("awho"), "json_valid(`awho`)", true)
        );
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, TicketsTicketType, LocalDateTime, LocalTime, String, String, String, LocalDateTime, String, String, TicketsEndRoundState> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
