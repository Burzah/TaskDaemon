/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadbUnmodified;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.PrivacyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Privacy extends TableImpl<PrivacyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradb_unmodified.privacy</code>
     */
    public static final Privacy PRIVACY = new Privacy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrivacyRecord> getRecordType() {
        return PrivacyRecord.class;
    }

    /**
     * The column <code>paradb_unmodified.privacy.ckey</code>.
     */
    public final TableField<PrivacyRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.privacy.datetime</code>.
     */
    public final TableField<PrivacyRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.privacy.consent</code>.
     */
    public final TableField<PrivacyRecord, Boolean> CONSENT = createField(DSL.name("consent"), SQLDataType.BIT.nullable(false), this, "");

    private Privacy(Name alias, Table<PrivacyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Privacy(Name alias, Table<PrivacyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradb_unmodified.privacy</code> table reference
     */
    public Privacy(String alias) {
        this(DSL.name(alias), PRIVACY);
    }

    /**
     * Create an aliased <code>paradb_unmodified.privacy</code> table reference
     */
    public Privacy(Name alias) {
        this(alias, PRIVACY);
    }

    /**
     * Create a <code>paradb_unmodified.privacy</code> table reference
     */
    public Privacy() {
        this(DSL.name("privacy"), null);
    }

    public <O extends Record> Privacy(Table<O> child, ForeignKey<O, PrivacyRecord> key) {
        super(child, key, PRIVACY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadbUnmodified.PARADB_UNMODIFIED;
    }

    @Override
    public UniqueKey<PrivacyRecord> getPrimaryKey() {
        return Keys.KEY_PRIVACY_PRIMARY;
    }

    @Override
    public Privacy as(String alias) {
        return new Privacy(DSL.name(alias), this);
    }

    @Override
    public Privacy as(Name alias) {
        return new Privacy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Privacy rename(String name) {
        return new Privacy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Privacy rename(Name name) {
        return new Privacy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, LocalDateTime, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
