/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadbUnmodified;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.VpnWhitelistRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VpnWhitelist extends TableImpl<VpnWhitelistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradb_unmodified.vpn_whitelist</code>
     */
    public static final VpnWhitelist VPN_WHITELIST = new VpnWhitelist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VpnWhitelistRecord> getRecordType() {
        return VpnWhitelistRecord.class;
    }

    /**
     * The column <code>paradb_unmodified.vpn_whitelist.ckey</code>.
     */
    public final TableField<VpnWhitelistRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.vpn_whitelist.reason</code>.
     */
    public final TableField<VpnWhitelistRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private VpnWhitelist(Name alias, Table<VpnWhitelistRecord> aliased) {
        this(alias, aliased, null);
    }

    private VpnWhitelist(Name alias, Table<VpnWhitelistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradb_unmodified.vpn_whitelist</code> table
     * reference
     */
    public VpnWhitelist(String alias) {
        this(DSL.name(alias), VPN_WHITELIST);
    }

    /**
     * Create an aliased <code>paradb_unmodified.vpn_whitelist</code> table
     * reference
     */
    public VpnWhitelist(Name alias) {
        this(alias, VPN_WHITELIST);
    }

    /**
     * Create a <code>paradb_unmodified.vpn_whitelist</code> table reference
     */
    public VpnWhitelist() {
        this(DSL.name("vpn_whitelist"), null);
    }

    public <O extends Record> VpnWhitelist(Table<O> child, ForeignKey<O, VpnWhitelistRecord> key) {
        super(child, key, VPN_WHITELIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadbUnmodified.PARADB_UNMODIFIED;
    }

    @Override
    public UniqueKey<VpnWhitelistRecord> getPrimaryKey() {
        return Keys.KEY_VPN_WHITELIST_PRIMARY;
    }

    @Override
    public VpnWhitelist as(String alias) {
        return new VpnWhitelist(DSL.name(alias), this);
    }

    @Override
    public VpnWhitelist as(Name alias) {
        return new VpnWhitelist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VpnWhitelist rename(String name) {
        return new VpnWhitelist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VpnWhitelist rename(Name name) {
        return new VpnWhitelist(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
