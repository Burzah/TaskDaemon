/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadbUnmodified;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.RoundRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Round extends TableImpl<RoundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradb_unmodified.round</code>
     */
    public static final Round ROUND = new Round();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundRecord> getRecordType() {
        return RoundRecord.class;
    }

    /**
     * The column <code>paradb_unmodified.round.id</code>.
     */
    public final TableField<RoundRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradb_unmodified.round.initialize_datetime</code>.
     */
    public final TableField<RoundRecord, LocalDateTime> INITIALIZE_DATETIME = createField(DSL.name("initialize_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.round.start_datetime</code>.
     */
    public final TableField<RoundRecord, LocalDateTime> START_DATETIME = createField(DSL.name("start_datetime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradb_unmodified.round.shutdown_datetime</code>.
     */
    public final TableField<RoundRecord, LocalDateTime> SHUTDOWN_DATETIME = createField(DSL.name("shutdown_datetime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradb_unmodified.round.end_datetime</code>.
     */
    public final TableField<RoundRecord, LocalDateTime> END_DATETIME = createField(DSL.name("end_datetime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradb_unmodified.round.server_ip</code>.
     */
    public final TableField<RoundRecord, UInteger> SERVER_IP = createField(DSL.name("server_ip"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.round.server_port</code>.
     */
    public final TableField<RoundRecord, UShort> SERVER_PORT = createField(DSL.name("server_port"), SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>paradb_unmodified.round.commit_hash</code>.
     */
    public final TableField<RoundRecord, String> COMMIT_HASH = createField(DSL.name("commit_hash"), SQLDataType.CHAR(40).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.game_mode</code>.
     */
    public final TableField<RoundRecord, String> GAME_MODE = createField(DSL.name("game_mode"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.game_mode_result</code>.
     */
    public final TableField<RoundRecord, String> GAME_MODE_RESULT = createField(DSL.name("game_mode_result"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.end_state</code>.
     */
    public final TableField<RoundRecord, String> END_STATE = createField(DSL.name("end_state"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.shuttle_name</code>.
     */
    public final TableField<RoundRecord, String> SHUTTLE_NAME = createField(DSL.name("shuttle_name"), SQLDataType.VARCHAR(64).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.map_name</code>.
     */
    public final TableField<RoundRecord, String> MAP_NAME = createField(DSL.name("map_name"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.station_name</code>.
     */
    public final TableField<RoundRecord, String> STATION_NAME = createField(DSL.name("station_name"), SQLDataType.VARCHAR(80).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradb_unmodified.round.server_id</code>.
     */
    public final TableField<RoundRecord, String> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private Round(Name alias, Table<RoundRecord> aliased) {
        this(alias, aliased, null);
    }

    private Round(Name alias, Table<RoundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradb_unmodified.round</code> table reference
     */
    public Round(String alias) {
        this(DSL.name(alias), ROUND);
    }

    /**
     * Create an aliased <code>paradb_unmodified.round</code> table reference
     */
    public Round(Name alias) {
        this(alias, ROUND);
    }

    /**
     * Create a <code>paradb_unmodified.round</code> table reference
     */
    public Round() {
        this(DSL.name("round"), null);
    }

    public <O extends Record> Round(Table<O> child, ForeignKey<O, RoundRecord> key) {
        super(child, key, ROUND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadbUnmodified.PARADB_UNMODIFIED;
    }

    @Override
    public Identity<RoundRecord, Integer> getIdentity() {
        return (Identity<RoundRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoundRecord> getPrimaryKey() {
        return Keys.KEY_ROUND_PRIMARY;
    }

    @Override
    public Round as(String alias) {
        return new Round(DSL.name(alias), this);
    }

    @Override
    public Round as(Name alias) {
        return new Round(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(String name) {
        return new Round(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(Name name) {
        return new Round(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, UInteger, UShort, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
