/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.gamedb.Indexes;
import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.OauthTokensRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthTokens extends TableImpl<OauthTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.oauth_tokens</code>
     */
    public static final OauthTokens OAUTH_TOKENS = new OauthTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthTokensRecord> getRecordType() {
        return OauthTokensRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.oauth_tokens.ckey</code>.
     */
    public final TableField<OauthTokensRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.oauth_tokens.token</code>.
     */
    public final TableField<OauthTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private OauthTokens(Name alias, Table<OauthTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthTokens(Name alias, Table<OauthTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.oauth_tokens</code> table
     * reference
     */
    public OauthTokens(String alias) {
        this(DSL.name(alias), OAUTH_TOKENS);
    }

    /**
     * Create an aliased <code>paradise_gamedb.oauth_tokens</code> table
     * reference
     */
    public OauthTokens(Name alias) {
        this(alias, OAUTH_TOKENS);
    }

    /**
     * Create a <code>paradise_gamedb.oauth_tokens</code> table reference
     */
    public OauthTokens() {
        this(DSL.name("oauth_tokens"), null);
    }

    public <O extends Record> OauthTokens(Table<O> child, ForeignKey<O, OauthTokensRecord> key) {
        super(child, key, OAUTH_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.OAUTH_TOKENS_CKEY);
    }

    @Override
    public UniqueKey<OauthTokensRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_TOKENS_PRIMARY;
    }

    @Override
    public OauthTokens as(String alias) {
        return new OauthTokens(DSL.name(alias), this);
    }

    @Override
    public OauthTokens as(Name alias) {
        return new OauthTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthTokens rename(String name) {
        return new OauthTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthTokens rename(Name name) {
        return new OauthTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
