/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.gamedb.tables;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.database.gamedb.Keys;
import me.aa07.paradise.taskdaemon.database.gamedb.ParadiseGamedb;
import me.aa07.paradise.taskdaemon.database.gamedb.tables.records.MemoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Memo extends TableImpl<MemoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_gamedb.memo</code>
     */
    public static final Memo MEMO = new Memo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemoRecord> getRecordType() {
        return MemoRecord.class;
    }

    /**
     * The column <code>paradise_gamedb.memo.ckey</code>.
     */
    public final TableField<MemoRecord, String> CKEY = createField(DSL.name("ckey"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.memo.memotext</code>.
     */
    public final TableField<MemoRecord, String> MEMOTEXT = createField(DSL.name("memotext"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.memo.timestamp</code>.
     */
    public final TableField<MemoRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>paradise_gamedb.memo.last_editor</code>.
     */
    public final TableField<MemoRecord, String> LAST_EDITOR = createField(DSL.name("last_editor"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_gamedb.memo.edits</code>.
     */
    public final TableField<MemoRecord, String> EDITS = createField(DSL.name("edits"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private Memo(Name alias, Table<MemoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Memo(Name alias, Table<MemoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_gamedb.memo</code> table reference
     */
    public Memo(String alias) {
        this(DSL.name(alias), MEMO);
    }

    /**
     * Create an aliased <code>paradise_gamedb.memo</code> table reference
     */
    public Memo(Name alias) {
        this(alias, MEMO);
    }

    /**
     * Create a <code>paradise_gamedb.memo</code> table reference
     */
    public Memo() {
        this(DSL.name("memo"), null);
    }

    public <O extends Record> Memo(Table<O> child, ForeignKey<O, MemoRecord> key) {
        super(child, key, MEMO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseGamedb.PARADISE_GAMEDB;
    }

    @Override
    public UniqueKey<MemoRecord> getPrimaryKey() {
        return Keys.KEY_MEMO_PRIMARY;
    }

    @Override
    public Memo as(String alias) {
        return new Memo(DSL.name(alias), this);
    }

    @Override
    public Memo as(Name alias) {
        return new Memo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Memo rename(String name) {
        return new Memo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Memo rename(Name name) {
        return new Memo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
