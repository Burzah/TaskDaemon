/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreAchievementsRules;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAchievementsRulesRecord extends UpdatableRecordImpl<CoreAchievementsRulesRecord> implements Record9<ULong, String, String, UInteger, Integer, ULong, Integer, ULong, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_achievements_rules.id</code>. ID
     * Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_achievements_rules.id</code>. ID
     * Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_achievements_rules.action</code>.
     * The action that this rule applies to
     */
    public void setAction(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_achievements_rules.action</code>.
     * The action that this rule applies to
     */
    public String getAction() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_achievements_rules.filters</code>.
     * JSON object of filters
     */
    public void setFilters(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_achievements_rules.filters</code>.
     * JSON object of filters
     */
    public String getFilters() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_achievements_rules.milestone</code>. If
     * applicable, the particular milestone this is for
     */
    public void setMilestone(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_achievements_rules.milestone</code>. If
     * applicable, the particular milestone this is for
     */
    public UInteger getMilestone() {
        return (UInteger) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_achievements_rules.points_subject</code>. The
     * points to award to the main person (can be negative)
     */
    public void setPointsSubject(Integer value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_achievements_rules.points_subject</code>. The
     * points to award to the main person (can be negative)
     */
    public Integer getPointsSubject() {
        return (Integer) get(4);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_achievements_rules.badge_subject</code>. The
     * badge ID to award to the main person
     */
    public void setBadgeSubject(ULong value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_achievements_rules.badge_subject</code>. The
     * badge ID to award to the main person
     */
    public ULong getBadgeSubject() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_achievements_rules.points_other</code>. The
     * points to award to any other relevant people (can be negative)
     */
    public void setPointsOther(Integer value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_achievements_rules.points_other</code>. The
     * points to award to any other relevant people (can be negative)
     */
    public Integer getPointsOther() {
        return (Integer) get(6);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_achievements_rules.badge_other</code>. The
     * badge ID to award to any other relevant people
     */
    public void setBadgeOther(ULong value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_achievements_rules.badge_other</code>. The
     * badge ID to award to any other relevant people
     */
    public ULong getBadgeOther() {
        return (ULong) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_achievements_rules.enabled</code>.
     * Rule enabled?
     */
    public void setEnabled(UByte value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_achievements_rules.enabled</code>.
     * Rule enabled?
     */
    public UByte getEnabled() {
        return (UByte) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, String, UInteger, Integer, ULong, Integer, ULong, UByte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<ULong, String, String, UInteger, Integer, ULong, Integer, ULong, UByte> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.ACTION;
    }

    @Override
    public Field<String> field3() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.FILTERS;
    }

    @Override
    public Field<UInteger> field4() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.MILESTONE;
    }

    @Override
    public Field<Integer> field5() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.POINTS_SUBJECT;
    }

    @Override
    public Field<ULong> field6() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.BADGE_SUBJECT;
    }

    @Override
    public Field<Integer> field7() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.POINTS_OTHER;
    }

    @Override
    public Field<ULong> field8() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.BADGE_OTHER;
    }

    @Override
    public Field<UByte> field9() {
        return CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES.ENABLED;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAction();
    }

    @Override
    public String component3() {
        return getFilters();
    }

    @Override
    public UInteger component4() {
        return getMilestone();
    }

    @Override
    public Integer component5() {
        return getPointsSubject();
    }

    @Override
    public ULong component6() {
        return getBadgeSubject();
    }

    @Override
    public Integer component7() {
        return getPointsOther();
    }

    @Override
    public ULong component8() {
        return getBadgeOther();
    }

    @Override
    public UByte component9() {
        return getEnabled();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAction();
    }

    @Override
    public String value3() {
        return getFilters();
    }

    @Override
    public UInteger value4() {
        return getMilestone();
    }

    @Override
    public Integer value5() {
        return getPointsSubject();
    }

    @Override
    public ULong value6() {
        return getBadgeSubject();
    }

    @Override
    public Integer value7() {
        return getPointsOther();
    }

    @Override
    public ULong value8() {
        return getBadgeOther();
    }

    @Override
    public UByte value9() {
        return getEnabled();
    }

    @Override
    public CoreAchievementsRulesRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value2(String value) {
        setAction(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value3(String value) {
        setFilters(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value4(UInteger value) {
        setMilestone(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value5(Integer value) {
        setPointsSubject(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value6(ULong value) {
        setBadgeSubject(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value7(Integer value) {
        setPointsOther(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value8(ULong value) {
        setBadgeOther(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord value9(UByte value) {
        setEnabled(value);
        return this;
    }

    @Override
    public CoreAchievementsRulesRecord values(ULong value1, String value2, String value3, UInteger value4, Integer value5, ULong value6, Integer value7, ULong value8, UByte value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreAchievementsRulesRecord
     */
    public CoreAchievementsRulesRecord() {
        super(CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES);
    }

    /**
     * Create a detached, initialised CoreAchievementsRulesRecord
     */
    public CoreAchievementsRulesRecord(ULong id, String action, String filters, UInteger milestone, Integer pointsSubject, ULong badgeSubject, Integer pointsOther, ULong badgeOther, UByte enabled) {
        super(CoreAchievementsRules.CORE_ACHIEVEMENTS_RULES);

        setId(id);
        setAction(action);
        setFilters(filters);
        setMilestone(milestone);
        setPointsSubject(pointsSubject);
        setBadgeSubject(badgeSubject);
        setPointsOther(pointsOther);
        setBadgeOther(badgeOther);
        setEnabled(enabled);
    }
}
