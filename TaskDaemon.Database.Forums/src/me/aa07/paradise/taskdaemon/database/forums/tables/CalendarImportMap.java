/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CalendarImportMapRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalendarImportMap extends TableImpl<CalendarImportMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.calendar_import_map</code>
     */
    public static final CalendarImportMap CALENDAR_IMPORT_MAP = new CalendarImportMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalendarImportMapRecord> getRecordType() {
        return CalendarImportMapRecord.class;
    }

    /**
     * The column <code>paradise_forums.calendar_import_map.import_id</code>.
     */
    public final TableField<CalendarImportMapRecord, Integer> IMPORT_ID = createField(DSL.name("import_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>paradise_forums.calendar_import_map.import_feed_id</code>.
     */
    public final TableField<CalendarImportMapRecord, Integer> IMPORT_FEED_ID = createField(DSL.name("import_feed_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.calendar_import_map.import_event_id</code>.
     */
    public final TableField<CalendarImportMapRecord, Integer> IMPORT_EVENT_ID = createField(DSL.name("import_event_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.calendar_import_map.import_guid</code>.
     */
    public final TableField<CalendarImportMapRecord, String> IMPORT_GUID = createField(DSL.name("import_guid"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("'0'", SQLDataType.VARCHAR)), this, "");

    private CalendarImportMap(Name alias, Table<CalendarImportMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalendarImportMap(Name alias, Table<CalendarImportMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.calendar_import_map</code> table
     * reference
     */
    public CalendarImportMap(String alias) {
        this(DSL.name(alias), CALENDAR_IMPORT_MAP);
    }

    /**
     * Create an aliased <code>paradise_forums.calendar_import_map</code> table
     * reference
     */
    public CalendarImportMap(Name alias) {
        this(alias, CALENDAR_IMPORT_MAP);
    }

    /**
     * Create a <code>paradise_forums.calendar_import_map</code> table reference
     */
    public CalendarImportMap() {
        this(DSL.name("calendar_import_map"), null);
    }

    public <O extends Record> CalendarImportMap(Table<O> child, ForeignKey<O, CalendarImportMapRecord> key) {
        super(child, key, CALENDAR_IMPORT_MAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CALENDAR_IMPORT_MAP_IMPORT_EVENT_ID, Indexes.CALENDAR_IMPORT_MAP_IMPORT_FEED_ID, Indexes.CALENDAR_IMPORT_MAP_IMPORT_GUID);
    }

    @Override
    public Identity<CalendarImportMapRecord, Integer> getIdentity() {
        return (Identity<CalendarImportMapRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CalendarImportMapRecord> getPrimaryKey() {
        return Keys.KEY_CALENDAR_IMPORT_MAP_PRIMARY;
    }

    @Override
    public CalendarImportMap as(String alias) {
        return new CalendarImportMap(DSL.name(alias), this);
    }

    @Override
    public CalendarImportMap as(Name alias) {
        return new CalendarImportMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalendarImportMap rename(String name) {
        return new CalendarImportMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalendarImportMap rename(Name name) {
        return new CalendarImportMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
