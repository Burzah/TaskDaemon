/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreLoginLinksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginLinks extends TableImpl<CoreLoginLinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_login_links</code>
     */
    public static final CoreLoginLinks CORE_LOGIN_LINKS = new CoreLoginLinks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLoginLinksRecord> getRecordType() {
        return CoreLoginLinksRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_login_links.token_login_method</code>. The ID
     * number of the login method
     */
    public final TableField<CoreLoginLinksRecord, ULong> TOKEN_LOGIN_METHOD = createField(DSL.name("token_login_method"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The ID number of the login method");

    /**
     * The column <code>paradise_forums.core_login_links.token_member</code>.
     * The member ID
     */
    public final TableField<CoreLoginLinksRecord, ULong> TOKEN_MEMBER = createField(DSL.name("token_member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The member ID");

    /**
     * The column
     * <code>paradise_forums.core_login_links.token_identifier</code>. The
     * server's identifier for the user
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_IDENTIFIER = createField(DSL.name("token_identifier"), SQLDataType.VARCHAR(255).nullable(false), this, "The server's identifier for the user");

    /**
     * The column <code>paradise_forums.core_login_links.token_linked</code>.
     * Boolean value indicating if the account has been successfully linked
     */
    public final TableField<CoreLoginLinksRecord, UByte> TOKEN_LINKED = createField(DSL.name("token_linked"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if the account has been successfully linked");

    /**
     * The column <code>paradise_forums.core_login_links.token_expires</code>.
     * Unix timestamp of when the access token expires
     */
    public final TableField<CoreLoginLinksRecord, UInteger> TOKEN_EXPIRES = createField(DSL.name("token_expires"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when the access token expires");

    /**
     * The column
     * <code>paradise_forums.core_login_links.token_refresh_token</code>.
     * Refresh token, if provided
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_REFRESH_TOKEN = createField(DSL.name("token_refresh_token"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Refresh token, if provided");

    /**
     * The column <code>paradise_forums.core_login_links.token_secret</code>.
     * Token secret for OAuth 1.0 implementations
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_SECRET = createField(DSL.name("token_secret"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Token secret for OAuth 1.0 implementations");

    /**
     * The column
     * <code>paradise_forums.core_login_links.token_access_token</code>. Access
     * token
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_ACCESS_TOKEN = createField(DSL.name("token_access_token"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Access token");

    /**
     * The column <code>paradise_forums.core_login_links.token_scope</code>.
     * JSON-encoded array of scopes issued
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_SCOPE = createField(DSL.name("token_scope"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of scopes issued");

    /**
     * The column <code>paradise_forums.core_login_links.token_id_token</code>.
     * ID token for Open ID Connect implementations
     */
    public final TableField<CoreLoginLinksRecord, String> TOKEN_ID_TOKEN = createField(DSL.name("token_id_token"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "ID token for Open ID Connect implementations");

    private CoreLoginLinks(Name alias, Table<CoreLoginLinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLoginLinks(Name alias, Table<CoreLoginLinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_links</code> table
     * reference
     */
    public CoreLoginLinks(String alias) {
        this(DSL.name(alias), CORE_LOGIN_LINKS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_links</code> table
     * reference
     */
    public CoreLoginLinks(Name alias) {
        this(alias, CORE_LOGIN_LINKS);
    }

    /**
     * Create a <code>paradise_forums.core_login_links</code> table reference
     */
    public CoreLoginLinks() {
        this(DSL.name("core_login_links"), null);
    }

    public <O extends Record> CoreLoginLinks(Table<O> child, ForeignKey<O, CoreLoginLinksRecord> key) {
        super(child, key, CORE_LOGIN_LINKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_LOGIN_LINKS_TOKEN_MEMBER);
    }

    @Override
    public UniqueKey<CoreLoginLinksRecord> getPrimaryKey() {
        return Keys.KEY_CORE_LOGIN_LINKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreLoginLinksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_LOGIN_LINKS_TOKEN_IDENTIFIER);
    }

    @Override
    public CoreLoginLinks as(String alias) {
        return new CoreLoginLinks(DSL.name(alias), this);
    }

    @Override
    public CoreLoginLinks as(Name alias) {
        return new CoreLoginLinks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginLinks rename(String name) {
        return new CoreLoginLinks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginLinks rename(Name name) {
        return new CoreLoginLinks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, String, UByte, UInteger, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
