/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreLoginHandlersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginHandlers extends TableImpl<CoreLoginHandlersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_login_handlers</code>
     */
    public static final CoreLoginHandlers CORE_LOGIN_HANDLERS = new CoreLoginHandlers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLoginHandlersRecord> getRecordType() {
        return CoreLoginHandlersRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_login_handlers.login_key</code>.
     * Key
     */
    public final TableField<CoreLoginHandlersRecord, String> LOGIN_KEY = createField(DSL.name("login_key"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Key");

    /**
     * The column
     * <code>paradise_forums.core_login_handlers.login_enabled</code>. Enabled?
     */
    public final TableField<CoreLoginHandlersRecord, UByte> LOGIN_ENABLED = createField(DSL.name("login_enabled"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Enabled?");

    /**
     * The column
     * <code>paradise_forums.core_login_handlers.login_settings</code>.
     * Handler-specific settings
     */
    public final TableField<CoreLoginHandlersRecord, String> LOGIN_SETTINGS = createField(DSL.name("login_settings"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Handler-specific settings");

    /**
     * The column <code>paradise_forums.core_login_handlers.login_order</code>.
     * Order to execute
     */
    public final TableField<CoreLoginHandlersRecord, UShort> LOGIN_ORDER = createField(DSL.name("login_order"), SQLDataType.SMALLINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.SMALLINTUNSIGNED)), this, "Order to execute");

    /**
     * The column <code>paradise_forums.core_login_handlers.login_acp</code>.
     * Enabled for Admin CP?
     */
    public final TableField<CoreLoginHandlersRecord, UByte> LOGIN_ACP = createField(DSL.name("login_acp"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Enabled for Admin CP?");

    private CoreLoginHandlers(Name alias, Table<CoreLoginHandlersRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLoginHandlers(Name alias, Table<CoreLoginHandlersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_handlers</code> table
     * reference
     */
    public CoreLoginHandlers(String alias) {
        this(DSL.name(alias), CORE_LOGIN_HANDLERS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_handlers</code> table
     * reference
     */
    public CoreLoginHandlers(Name alias) {
        this(alias, CORE_LOGIN_HANDLERS);
    }

    /**
     * Create a <code>paradise_forums.core_login_handlers</code> table reference
     */
    public CoreLoginHandlers() {
        this(DSL.name("core_login_handlers"), null);
    }

    public <O extends Record> CoreLoginHandlers(Table<O> child, ForeignKey<O, CoreLoginHandlersRecord> key) {
        super(child, key, CORE_LOGIN_HANDLERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_LOGIN_HANDLERS_LOGIN_ENABLED);
    }

    @Override
    public UniqueKey<CoreLoginHandlersRecord> getPrimaryKey() {
        return Keys.KEY_CORE_LOGIN_HANDLERS_PRIMARY;
    }

    @Override
    public CoreLoginHandlers as(String alias) {
        return new CoreLoginHandlers(DSL.name(alias), this);
    }

    @Override
    public CoreLoginHandlers as(Name alias) {
        return new CoreLoginHandlers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginHandlers rename(String name) {
        return new CoreLoginHandlers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginHandlers rename(Name name) {
        return new CoreLoginHandlers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, UByte, String, UShort, UByte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
