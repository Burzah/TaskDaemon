/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAttachmentsMapRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAttachmentsMap extends TableImpl<CoreAttachmentsMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_attachments_map</code>
     */
    public static final CoreAttachmentsMap CORE_ATTACHMENTS_MAP = new CoreAttachmentsMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAttachmentsMapRecord> getRecordType() {
        return CoreAttachmentsMapRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_attachments_map.attachment_id</code>. The
     * attachment ID
     */
    public final TableField<CoreAttachmentsMapRecord, UInteger> ATTACHMENT_ID = createField(DSL.name("attachment_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The attachment ID");

    /**
     * The column
     * <code>paradise_forums.core_attachments_map.location_key</code>. The
     * editor location the content claiming this attachment has come from
     */
    public final TableField<CoreAttachmentsMapRecord, String> LOCATION_KEY = createField(DSL.name("location_key"), SQLDataType.VARCHAR(255).nullable(false), this, "The editor location the content claiming this attachment has come from");

    /**
     * The column <code>paradise_forums.core_attachments_map.id1</code>. Primary
     * ID number for content claiming attachment
     */
    public final TableField<CoreAttachmentsMapRecord, ULong> ID1 = createField(DSL.name("id1"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "Primary ID number for content claiming attachment");

    /**
     * The column <code>paradise_forums.core_attachments_map.id2</code>.
     * Secondary ID number for content claiming attachment
     */
    public final TableField<CoreAttachmentsMapRecord, ULong> ID2 = createField(DSL.name("id2"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "Secondary ID number for content claiming attachment");

    /**
     * The column <code>paradise_forums.core_attachments_map.temp</code>.
     * Temporary key for content claiming attachment
     */
    public final TableField<CoreAttachmentsMapRecord, String> TEMP = createField(DSL.name("temp"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Temporary key for content claiming attachment");

    /**
     * The column <code>paradise_forums.core_attachments_map.id3</code>.
     * Arbitrary data for content claiming attachment
     */
    public final TableField<CoreAttachmentsMapRecord, String> ID3 = createField(DSL.name("id3"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Arbitrary data for content claiming attachment");

    /**
     * The column <code>paradise_forums.core_attachments_map.lang</code>. If
     * this is claimed by a translatable field, the language ID
     */
    public final TableField<CoreAttachmentsMapRecord, ULong> LANG = createField(DSL.name("lang"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "If this is claimed by a translatable field, the language ID");

    private CoreAttachmentsMap(Name alias, Table<CoreAttachmentsMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAttachmentsMap(Name alias, Table<CoreAttachmentsMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_attachments_map</code> table
     * reference
     */
    public CoreAttachmentsMap(String alias) {
        this(DSL.name(alias), CORE_ATTACHMENTS_MAP);
    }

    /**
     * Create an aliased <code>paradise_forums.core_attachments_map</code> table
     * reference
     */
    public CoreAttachmentsMap(Name alias) {
        this(alias, CORE_ATTACHMENTS_MAP);
    }

    /**
     * Create a <code>paradise_forums.core_attachments_map</code> table
     * reference
     */
    public CoreAttachmentsMap() {
        this(DSL.name("core_attachments_map"), null);
    }

    public <O extends Record> CoreAttachmentsMap(Table<O> child, ForeignKey<O, CoreAttachmentsMapRecord> key) {
        super(child, key, CORE_ATTACHMENTS_MAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ATTACHMENTS_MAP_ATTACHMENT_ID, Indexes.CORE_ATTACHMENTS_MAP_MAP_LOOKUP, Indexes.CORE_ATTACHMENTS_MAP_TEMP_KEY);
    }

    @Override
    public CoreAttachmentsMap as(String alias) {
        return new CoreAttachmentsMap(DSL.name(alias), this);
    }

    @Override
    public CoreAttachmentsMap as(Name alias) {
        return new CoreAttachmentsMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAttachmentsMap rename(String name) {
        return new CoreAttachmentsMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAttachmentsMap rename(Name name) {
        return new CoreAttachmentsMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UInteger, String, ULong, ULong, String, String, ULong> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
