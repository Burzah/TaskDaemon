/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreFileLogsLogAction;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreFileLogsLogType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreFileLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFileLogs extends TableImpl<CoreFileLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_file_logs</code>
     */
    public static final CoreFileLogs CORE_FILE_LOGS = new CoreFileLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreFileLogsRecord> getRecordType() {
        return CoreFileLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_file_logs.log_id</code>.
     */
    public final TableField<CoreFileLogsRecord, Long> LOG_ID = createField(DSL.name("log_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_type</code>.
     */
    public final TableField<CoreFileLogsRecord, CoreFileLogsLogType> LOG_TYPE = createField(DSL.name("log_type"), SQLDataType.VARCHAR(8).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreFileLogsLogType.class), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_action</code>.
     */
    public final TableField<CoreFileLogsRecord, CoreFileLogsLogAction> LOG_ACTION = createField(DSL.name("log_action"), SQLDataType.VARCHAR(8).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreFileLogsLogAction.class), this, "");

    /**
     * The column
     * <code>paradise_forums.core_file_logs.log_configuration_id</code>.
     */
    public final TableField<CoreFileLogsRecord, Integer> LOG_CONFIGURATION_ID = createField(DSL.name("log_configuration_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_method</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_METHOD = createField(DSL.name("log_method"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_filename</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_FILENAME = createField(DSL.name("log_filename"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_msg</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_MSG = createField(DSL.name("log_msg"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_date</code>.
     */
    public final TableField<CoreFileLogsRecord, Integer> LOG_DATE = createField(DSL.name("log_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_data</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_DATA = createField(DSL.name("log_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_container</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_CONTAINER = createField(DSL.name("log_container"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_file_logs.log_url</code>.
     */
    public final TableField<CoreFileLogsRecord, String> LOG_URL = createField(DSL.name("log_url"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private CoreFileLogs(Name alias, Table<CoreFileLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreFileLogs(Name alias, Table<CoreFileLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_file_logs</code> table
     * reference
     */
    public CoreFileLogs(String alias) {
        this(DSL.name(alias), CORE_FILE_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_file_logs</code> table
     * reference
     */
    public CoreFileLogs(Name alias) {
        this(alias, CORE_FILE_LOGS);
    }

    /**
     * Create a <code>paradise_forums.core_file_logs</code> table reference
     */
    public CoreFileLogs() {
        this(DSL.name("core_file_logs"), null);
    }

    public <O extends Record> CoreFileLogs(Table<O> child, ForeignKey<O, CoreFileLogsRecord> key) {
        super(child, key, CORE_FILE_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_FILE_LOGS_LOG_ACTION, Indexes.CORE_FILE_LOGS_LOG_DATE, Indexes.CORE_FILE_LOGS_LOG_METHOD, Indexes.CORE_FILE_LOGS_LOG_TYPE);
    }

    @Override
    public Identity<CoreFileLogsRecord, Long> getIdentity() {
        return (Identity<CoreFileLogsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreFileLogsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_FILE_LOGS_PRIMARY;
    }

    @Override
    public CoreFileLogs as(String alias) {
        return new CoreFileLogs(DSL.name(alias), this);
    }

    @Override
    public CoreFileLogs as(Name alias) {
        return new CoreFileLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileLogs rename(String name) {
        return new CoreFileLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileLogs rename(Name name) {
        return new CoreFileLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, CoreFileLogsLogType, CoreFileLogsLogAction, Integer, String, String, String, Integer, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
