/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAdminPermissionRowsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAdminPermissionRows extends TableImpl<CoreAdminPermissionRowsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_admin_permission_rows</code>
     */
    public static final CoreAdminPermissionRows CORE_ADMIN_PERMISSION_ROWS = new CoreAdminPermissionRows();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAdminPermissionRowsRecord> getRecordType() {
        return CoreAdminPermissionRowsRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_admin_permission_rows.row_id</code>.
     */
    public final TableField<CoreAdminPermissionRowsRecord, Long> ROW_ID = createField(DSL.name("row_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_admin_permission_rows.row_id_type</code>.
     */
    public final TableField<CoreAdminPermissionRowsRecord, String> ROW_ID_TYPE = createField(DSL.name("row_id_type"), SQLDataType.VARCHAR(13).nullable(false).defaultValue(DSL.inline("'member'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_admin_permission_rows.row_perm_cache</code>.
     */
    public final TableField<CoreAdminPermissionRowsRecord, String> ROW_PERM_CACHE = createField(DSL.name("row_perm_cache"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_admin_permission_rows.row_updated</code>.
     */
    public final TableField<CoreAdminPermissionRowsRecord, Integer> ROW_UPDATED = createField(DSL.name("row_updated"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private CoreAdminPermissionRows(Name alias, Table<CoreAdminPermissionRowsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAdminPermissionRows(Name alias, Table<CoreAdminPermissionRowsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_admin_permission_rows</code>
     * table reference
     */
    public CoreAdminPermissionRows(String alias) {
        this(DSL.name(alias), CORE_ADMIN_PERMISSION_ROWS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_admin_permission_rows</code>
     * table reference
     */
    public CoreAdminPermissionRows(Name alias) {
        this(alias, CORE_ADMIN_PERMISSION_ROWS);
    }

    /**
     * Create a <code>paradise_forums.core_admin_permission_rows</code> table
     * reference
     */
    public CoreAdminPermissionRows() {
        this(DSL.name("core_admin_permission_rows"), null);
    }

    public <O extends Record> CoreAdminPermissionRows(Table<O> child, ForeignKey<O, CoreAdminPermissionRowsRecord> key) {
        super(child, key, CORE_ADMIN_PERMISSION_ROWS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ADMIN_PERMISSION_ROWS_ROW_ID_TYPE);
    }

    @Override
    public UniqueKey<CoreAdminPermissionRowsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ADMIN_PERMISSION_ROWS_PRIMARY;
    }

    @Override
    public CoreAdminPermissionRows as(String alias) {
        return new CoreAdminPermissionRows(DSL.name(alias), this);
    }

    @Override
    public CoreAdminPermissionRows as(Name alias) {
        return new CoreAdminPermissionRows(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAdminPermissionRows rename(String name) {
        return new CoreAdminPermissionRows(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAdminPermissionRows rename(Name name) {
        return new CoreAdminPermissionRows(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
