/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAdvertisementsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAdvertisements extends TableImpl<CoreAdvertisementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_advertisements</code>
     */
    public static final CoreAdvertisements CORE_ADVERTISEMENTS = new CoreAdvertisements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAdvertisementsRecord> getRecordType() {
        return CoreAdvertisementsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_advertisements.ad_id</code>.
     */
    public final TableField<CoreAdvertisementsRecord, Long> AD_ID = createField(DSL.name("ad_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_location</code>.
     * Stores the location for the advertisement to display
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_LOCATION = createField(DSL.name("ad_location"), SQLDataType.CLOB.nullable(false), this, "Stores the location for the advertisement to display");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_html</code>.
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_HTML = createField(DSL.name("ad_html"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_images</code>.
     * Stores a JSON array of images to use for this ad (small, medium and
     * large)
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_IMAGES = createField(DSL.name("ad_images"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Stores a JSON array of images to use for this ad (small, medium and large)");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_link</code>. Link
     * used by image advertisements
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_LINK = createField(DSL.name("ad_link"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Link used by image advertisements");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_impressions</code>. The
     * number of impressions for this ad, only tracked with image ads
     */
    public final TableField<CoreAdvertisementsRecord, ULong> AD_IMPRESSIONS = createField(DSL.name("ad_impressions"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The number of impressions for this ad, only tracked with image ads");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_clicks</code>.
     * The number of clicks for this ad, only tracked with image ads
     */
    public final TableField<CoreAdvertisementsRecord, Integer> AD_CLICKS = createField(DSL.name("ad_clicks"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "The number of clicks for this ad, only tracked with image ads");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_exempt</code>.
     * JSON array of group IDs exempt from this ad
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_EXEMPT = createField(DSL.name("ad_exempt"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON array of group IDs exempt from this ad");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_active</code>.
     */
    public final TableField<CoreAdvertisementsRecord, Byte> AD_ACTIVE = createField(DSL.name("ad_active"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_html_https</code>. Optional
     * HTTPS version of ad
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_HTML_HTTPS = createField(DSL.name("ad_html_https"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Optional HTTPS version of ad");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_start</code>.
     * Starting timestamp for this ad
     */
    public final TableField<CoreAdvertisementsRecord, Integer> AD_START = createField(DSL.name("ad_start"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Starting timestamp for this ad");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_end</code>.
     * Ending timestamp for this ad
     */
    public final TableField<CoreAdvertisementsRecord, Integer> AD_END = createField(DSL.name("ad_end"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Ending timestamp for this ad");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_maximum_value</code>.
     * Maximum number of clicks or impressions allowed (for image ads only)
     */
    public final TableField<CoreAdvertisementsRecord, Integer> AD_MAXIMUM_VALUE = createField(DSL.name("ad_maximum_value"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Maximum number of clicks or impressions allowed (for image ads only)");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_maximum_unit</code>. Type of
     * maximum value (for image ads only)
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_MAXIMUM_UNIT = createField(DSL.name("ad_maximum_unit"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Type of maximum value (for image ads only)");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_additional_settings</code>.
     * JSON array of additional settings
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_ADDITIONAL_SETTINGS = createField(DSL.name("ad_additional_settings"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON array of additional settings");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_html_https_set</code>. This
     * column flags if https was "set", even if ad_html_https is empty
     */
    public final TableField<CoreAdvertisementsRecord, Byte> AD_HTML_HTTPS_SET = createField(DSL.name("ad_html_https_set"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "This column flags if https was \"set\", even if ad_html_https is empty");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_member</code>. If
     * created by Nexus, the customer ID
     */
    public final TableField<CoreAdvertisementsRecord, ULong> AD_MEMBER = createField(DSL.name("ad_member"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "If created by Nexus, the customer ID");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_new_window</code>. Open
     * advertisement in a new window
     */
    public final TableField<CoreAdvertisementsRecord, Byte> AD_NEW_WINDOW = createField(DSL.name("ad_new_window"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Open advertisement in a new window");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_type</code>. 1 =
     * HTML, 2 = images, 3 = email
     */
    public final TableField<CoreAdvertisementsRecord, Byte> AD_TYPE = createField(DSL.name("ad_type"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "1 = HTML, 2 = images, 3 = email");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_email_views</code>. Tracks
     * the number of times an email containing the ad has been opened/viewed
     */
    public final TableField<CoreAdvertisementsRecord, Integer> AD_EMAIL_VIEWS = createField(DSL.name("ad_email_views"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "Tracks the number of times an email containing the ad has been opened/viewed");

    /**
     * The column <code>paradise_forums.core_advertisements.ad_image_alt</code>.
     * Alt text for web-based image ads, or for plaintext emails
     */
    public final TableField<CoreAdvertisementsRecord, String> AD_IMAGE_ALT = createField(DSL.name("ad_image_alt"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Alt text for web-based image ads, or for plaintext emails");

    /**
     * The column
     * <code>paradise_forums.core_advertisements.ad_nocontent_page_output</code>.
     */
    public final TableField<CoreAdvertisementsRecord, Byte> AD_NOCONTENT_PAGE_OUTPUT = createField(DSL.name("ad_nocontent_page_output"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private CoreAdvertisements(Name alias, Table<CoreAdvertisementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAdvertisements(Name alias, Table<CoreAdvertisementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_advertisements</code> table
     * reference
     */
    public CoreAdvertisements(String alias) {
        this(DSL.name(alias), CORE_ADVERTISEMENTS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_advertisements</code> table
     * reference
     */
    public CoreAdvertisements(Name alias) {
        this(alias, CORE_ADVERTISEMENTS);
    }

    /**
     * Create a <code>paradise_forums.core_advertisements</code> table reference
     */
    public CoreAdvertisements() {
        this(DSL.name("core_advertisements"), null);
    }

    public <O extends Record> CoreAdvertisements(Table<O> child, ForeignKey<O, CoreAdvertisementsRecord> key) {
        super(child, key, CORE_ADVERTISEMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ADVERTISEMENTS_AD_SHOW, Indexes.CORE_ADVERTISEMENTS_AD_TYPE, Indexes.CORE_ADVERTISEMENTS_MEMBER);
    }

    @Override
    public Identity<CoreAdvertisementsRecord, Long> getIdentity() {
        return (Identity<CoreAdvertisementsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreAdvertisementsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ADVERTISEMENTS_PRIMARY;
    }

    @Override
    public CoreAdvertisements as(String alias) {
        return new CoreAdvertisements(DSL.name(alias), this);
    }

    @Override
    public CoreAdvertisements as(Name alias) {
        return new CoreAdvertisements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAdvertisements rename(String name) {
        return new CoreAdvertisements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAdvertisements rename(Name name) {
        return new CoreAdvertisements(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, String, String, String, String, ULong, Integer, String, Byte, String, Integer, Integer, Integer, String, String, Byte, ULong, Byte, Byte, Integer, String, Byte> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
