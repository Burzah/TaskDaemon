/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreMessageTopicUserMap;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreMessageTopicUserMapRecord extends UpdatableRecordImpl<CoreMessageTopicUserMapRecord> implements Record13<Integer, Integer, Integer, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_id</code>.
     */
    public void setMapId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_id</code>.
     */
    public Integer getMapId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_id</code>.
     */
    public void setMapUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_id</code>.
     */
    public Integer getMapUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_topic_id</code>.
     */
    public void setMapTopicId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_topic_id</code>.
     */
    public Integer getMapTopicId() {
        return (Integer) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_folder_id</code>.
     */
    public void setMapFolderId(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_folder_id</code>.
     */
    public String getMapFolderId() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_read_time</code>.
     */
    public void setMapReadTime(Integer value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_read_time</code>.
     */
    public Integer getMapReadTime() {
        return (Integer) get(4);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_active</code>.
     */
    public void setMapUserActive(Integer value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_active</code>.
     */
    public Integer getMapUserActive() {
        return (Integer) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_banned</code>.
     */
    public void setMapUserBanned(Integer value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_user_banned</code>.
     */
    public Integer getMapUserBanned() {
        return (Integer) get(6);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_has_unread</code>.
     */
    public void setMapHasUnread(Integer value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_has_unread</code>.
     */
    public Integer getMapHasUnread() {
        return (Integer) get(7);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_is_system</code>.
     */
    public void setMapIsSystem(Integer value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_is_system</code>.
     */
    public Integer getMapIsSystem() {
        return (Integer) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_is_starter</code>.
     */
    public void setMapIsStarter(Integer value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_is_starter</code>.
     */
    public Integer getMapIsStarter() {
        return (Integer) get(9);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_left_time</code>.
     */
    public void setMapLeftTime(Integer value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_left_time</code>.
     */
    public Integer getMapLeftTime() {
        return (Integer) get(10);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_ignore_notification</code>.
     */
    public void setMapIgnoreNotification(Integer value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_ignore_notification</code>.
     */
    public Integer getMapIgnoreNotification() {
        return (Integer) get(11);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_message_topic_user_map.map_last_topic_reply</code>.
     */
    public void setMapLastTopicReply(Integer value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_message_topic_user_map.map_last_topic_reply</code>.
     */
    public Integer getMapLastTopicReply() {
        return (Integer) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Integer, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, Integer, Integer, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_ID;
    }

    @Override
    public Field<Integer> field2() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_USER_ID;
    }

    @Override
    public Field<Integer> field3() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_TOPIC_ID;
    }

    @Override
    public Field<String> field4() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_FOLDER_ID;
    }

    @Override
    public Field<Integer> field5() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_READ_TIME;
    }

    @Override
    public Field<Integer> field6() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_USER_ACTIVE;
    }

    @Override
    public Field<Integer> field7() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_USER_BANNED;
    }

    @Override
    public Field<Integer> field8() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_HAS_UNREAD;
    }

    @Override
    public Field<Integer> field9() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_IS_SYSTEM;
    }

    @Override
    public Field<Integer> field10() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_IS_STARTER;
    }

    @Override
    public Field<Integer> field11() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_LEFT_TIME;
    }

    @Override
    public Field<Integer> field12() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_IGNORE_NOTIFICATION;
    }

    @Override
    public Field<Integer> field13() {
        return CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP.MAP_LAST_TOPIC_REPLY;
    }

    @Override
    public Integer component1() {
        return getMapId();
    }

    @Override
    public Integer component2() {
        return getMapUserId();
    }

    @Override
    public Integer component3() {
        return getMapTopicId();
    }

    @Override
    public String component4() {
        return getMapFolderId();
    }

    @Override
    public Integer component5() {
        return getMapReadTime();
    }

    @Override
    public Integer component6() {
        return getMapUserActive();
    }

    @Override
    public Integer component7() {
        return getMapUserBanned();
    }

    @Override
    public Integer component8() {
        return getMapHasUnread();
    }

    @Override
    public Integer component9() {
        return getMapIsSystem();
    }

    @Override
    public Integer component10() {
        return getMapIsStarter();
    }

    @Override
    public Integer component11() {
        return getMapLeftTime();
    }

    @Override
    public Integer component12() {
        return getMapIgnoreNotification();
    }

    @Override
    public Integer component13() {
        return getMapLastTopicReply();
    }

    @Override
    public Integer value1() {
        return getMapId();
    }

    @Override
    public Integer value2() {
        return getMapUserId();
    }

    @Override
    public Integer value3() {
        return getMapTopicId();
    }

    @Override
    public String value4() {
        return getMapFolderId();
    }

    @Override
    public Integer value5() {
        return getMapReadTime();
    }

    @Override
    public Integer value6() {
        return getMapUserActive();
    }

    @Override
    public Integer value7() {
        return getMapUserBanned();
    }

    @Override
    public Integer value8() {
        return getMapHasUnread();
    }

    @Override
    public Integer value9() {
        return getMapIsSystem();
    }

    @Override
    public Integer value10() {
        return getMapIsStarter();
    }

    @Override
    public Integer value11() {
        return getMapLeftTime();
    }

    @Override
    public Integer value12() {
        return getMapIgnoreNotification();
    }

    @Override
    public Integer value13() {
        return getMapLastTopicReply();
    }

    @Override
    public CoreMessageTopicUserMapRecord value1(Integer value) {
        setMapId(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value2(Integer value) {
        setMapUserId(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value3(Integer value) {
        setMapTopicId(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value4(String value) {
        setMapFolderId(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value5(Integer value) {
        setMapReadTime(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value6(Integer value) {
        setMapUserActive(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value7(Integer value) {
        setMapUserBanned(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value8(Integer value) {
        setMapHasUnread(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value9(Integer value) {
        setMapIsSystem(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value10(Integer value) {
        setMapIsStarter(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value11(Integer value) {
        setMapLeftTime(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value12(Integer value) {
        setMapIgnoreNotification(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord value13(Integer value) {
        setMapLastTopicReply(value);
        return this;
    }

    @Override
    public CoreMessageTopicUserMapRecord values(Integer value1, Integer value2, Integer value3, String value4, Integer value5, Integer value6, Integer value7, Integer value8, Integer value9, Integer value10, Integer value11, Integer value12, Integer value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreMessageTopicUserMapRecord
     */
    public CoreMessageTopicUserMapRecord() {
        super(CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP);
    }

    /**
     * Create a detached, initialised CoreMessageTopicUserMapRecord
     */
    public CoreMessageTopicUserMapRecord(Integer mapId, Integer mapUserId, Integer mapTopicId, String mapFolderId, Integer mapReadTime, Integer mapUserActive, Integer mapUserBanned, Integer mapHasUnread, Integer mapIsSystem, Integer mapIsStarter, Integer mapLeftTime, Integer mapIgnoreNotification, Integer mapLastTopicReply) {
        super(CoreMessageTopicUserMap.CORE_MESSAGE_TOPIC_USER_MAP);

        setMapId(mapId);
        setMapUserId(mapUserId);
        setMapTopicId(mapTopicId);
        setMapFolderId(mapFolderId);
        setMapReadTime(mapReadTime);
        setMapUserActive(mapUserActive);
        setMapUserBanned(mapUserBanned);
        setMapHasUnread(mapHasUnread);
        setMapIsSystem(mapIsSystem);
        setMapIsStarter(mapIsStarter);
        setMapLeftTime(mapLeftTime);
        setMapIgnoreNotification(mapIgnoreNotification);
        setMapLastTopicReply(mapLastTopicReply);
    }
}
