/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreFilesTempRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFilesTemp extends TableImpl<CoreFilesTempRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_files_temp</code>
     */
    public static final CoreFilesTemp CORE_FILES_TEMP = new CoreFilesTemp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreFilesTempRecord> getRecordType() {
        return CoreFilesTempRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_files_temp.id</code>. ID Number
     */
    public final TableField<CoreFilesTempRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_files_temp.upload_key</code>. Key
     * for upload process
     */
    public final TableField<CoreFilesTempRecord, String> UPLOAD_KEY = createField(DSL.name("upload_key"), SQLDataType.CHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "Key for upload process");

    /**
     * The column <code>paradise_forums.core_files_temp.filename</code>.
     * Filename
     */
    public final TableField<CoreFilesTempRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Filename");

    /**
     * The column <code>paradise_forums.core_files_temp.mime</code>.
     */
    public final TableField<CoreFilesTempRecord, String> MIME = createField(DSL.name("mime"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_files_temp.contents</code>. Path to
     * file on disk
     */
    public final TableField<CoreFilesTempRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Path to file on disk");

    /**
     * The column <code>paradise_forums.core_files_temp.time</code>. Unix
     * timestamp of upload date
     */
    public final TableField<CoreFilesTempRecord, UInteger> TIME = createField(DSL.name("time"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of upload date");

    /**
     * The column
     * <code>paradise_forums.core_files_temp.storage_extension</code>.
     */
    public final TableField<CoreFilesTempRecord, String> STORAGE_EXTENSION = createField(DSL.name("storage_extension"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_files_temp.exif</code>.
     */
    public final TableField<CoreFilesTempRecord, String> EXIF = createField(DSL.name("exif"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_files_temp.labels</code>.
     */
    public final TableField<CoreFilesTempRecord, String> LABELS = createField(DSL.name("labels"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_files_temp.requires_moderation</code>. Boolean
     * value indicating if image scanner wants to hold this for moderation
     */
    public final TableField<CoreFilesTempRecord, UByte> REQUIRES_MODERATION = createField(DSL.name("requires_moderation"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if image scanner wants to hold this for moderation");

    private CoreFilesTemp(Name alias, Table<CoreFilesTempRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreFilesTemp(Name alias, Table<CoreFilesTempRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_files_temp</code> table
     * reference
     */
    public CoreFilesTemp(String alias) {
        this(DSL.name(alias), CORE_FILES_TEMP);
    }

    /**
     * Create an aliased <code>paradise_forums.core_files_temp</code> table
     * reference
     */
    public CoreFilesTemp(Name alias) {
        this(alias, CORE_FILES_TEMP);
    }

    /**
     * Create a <code>paradise_forums.core_files_temp</code> table reference
     */
    public CoreFilesTemp() {
        this(DSL.name("core_files_temp"), null);
    }

    public <O extends Record> CoreFilesTemp(Table<O> child, ForeignKey<O, CoreFilesTempRecord> key) {
        super(child, key, CORE_FILES_TEMP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_FILES_TEMP_TIME, Indexes.CORE_FILES_TEMP_UPLOAD_KEY);
    }

    @Override
    public Identity<CoreFilesTempRecord, ULong> getIdentity() {
        return (Identity<CoreFilesTempRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreFilesTempRecord> getPrimaryKey() {
        return Keys.KEY_CORE_FILES_TEMP_PRIMARY;
    }

    @Override
    public CoreFilesTemp as(String alias) {
        return new CoreFilesTemp(DSL.name(alias), this);
    }

    @Override
    public CoreFilesTemp as(Name alias) {
        return new CoreFilesTemp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFilesTemp rename(String name) {
        return new CoreFilesTemp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFilesTemp rename(Name name) {
        return new CoreFilesTemp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, String, UInteger, String, String, String, UByte> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
