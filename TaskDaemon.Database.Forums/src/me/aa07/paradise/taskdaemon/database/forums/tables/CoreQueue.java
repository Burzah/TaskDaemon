/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreQueueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreQueue extends TableImpl<CoreQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_queue</code>
     */
    public static final CoreQueue CORE_QUEUE = new CoreQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreQueueRecord> getRecordType() {
        return CoreQueueRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_queue.id</code>. ID Number
     */
    public final TableField<CoreQueueRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_queue.data</code>.
     */
    public final TableField<CoreQueueRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_queue.offset</code>.
     */
    public final TableField<CoreQueueRecord, Long> OFFSET = createField(DSL.name("offset"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>paradise_forums.core_queue.date</code>.
     */
    public final TableField<CoreQueueRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_queue.app</code>.
     */
    public final TableField<CoreQueueRecord, String> APP = createField(DSL.name("app"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_queue.key</code>.
     */
    public final TableField<CoreQueueRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_queue.priority</code>. Order to
     * run. Values 1 to 5 are allowed, 1 being highest priority.
     */
    public final TableField<CoreQueueRecord, UByte> PRIORITY = createField(DSL.name("priority"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("5", SQLDataType.TINYINTUNSIGNED)), this, "Order to run. Values 1 to 5 are allowed, 1 being highest priority.");

    private CoreQueue(Name alias, Table<CoreQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreQueue(Name alias, Table<CoreQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_queue</code> table reference
     */
    public CoreQueue(String alias) {
        this(DSL.name(alias), CORE_QUEUE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_queue</code> table reference
     */
    public CoreQueue(Name alias) {
        this(alias, CORE_QUEUE);
    }

    /**
     * Create a <code>paradise_forums.core_queue</code> table reference
     */
    public CoreQueue() {
        this(DSL.name("core_queue"), null);
    }

    public <O extends Record> CoreQueue(Table<O> child, ForeignKey<O, CoreQueueRecord> key) {
        super(child, key, CORE_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_QUEUE_QUEUE_KEY, Indexes.CORE_QUEUE_TASK_LOOKUP);
    }

    @Override
    public Identity<CoreQueueRecord, ULong> getIdentity() {
        return (Identity<CoreQueueRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreQueueRecord> getPrimaryKey() {
        return Keys.KEY_CORE_QUEUE_PRIMARY;
    }

    @Override
    public CoreQueue as(String alias) {
        return new CoreQueue(DSL.name(alias), this);
    }

    @Override
    public CoreQueue as(Name alias) {
        return new CoreQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreQueue rename(String name) {
        return new CoreQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreQueue rename(Name name) {
        return new CoreQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, Long, Integer, String, String, UByte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
