/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreApiKeysRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiKeys extends TableImpl<CoreApiKeysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_api_keys</code>
     */
    public static final CoreApiKeys CORE_API_KEYS = new CoreApiKeys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreApiKeysRecord> getRecordType() {
        return CoreApiKeysRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_api_keys.api_id</code>. API Key
     */
    public final TableField<CoreApiKeysRecord, String> API_ID = createField(DSL.name("api_id"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.CHAR)), this, "API Key");

    /**
     * The column <code>paradise_forums.core_api_keys.api_permissions</code>.
     * JSON encoded details of which endpoints the key can access
     */
    public final TableField<CoreApiKeysRecord, String> API_PERMISSIONS = createField(DSL.name("api_permissions"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON encoded details of which endpoints the key can access");

    /**
     * The column <code>paradise_forums.core_api_keys.api_allowed_ips</code>.
     * Comma-delimited allowed IPs
     */
    public final TableField<CoreApiKeysRecord, String> API_ALLOWED_IPS = createField(DSL.name("api_allowed_ips"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Comma-delimited allowed IPs");

    private CoreApiKeys(Name alias, Table<CoreApiKeysRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreApiKeys(Name alias, Table<CoreApiKeysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_keys</code> table
     * reference
     */
    public CoreApiKeys(String alias) {
        this(DSL.name(alias), CORE_API_KEYS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_keys</code> table
     * reference
     */
    public CoreApiKeys(Name alias) {
        this(alias, CORE_API_KEYS);
    }

    /**
     * Create a <code>paradise_forums.core_api_keys</code> table reference
     */
    public CoreApiKeys() {
        this(DSL.name("core_api_keys"), null);
    }

    public <O extends Record> CoreApiKeys(Table<O> child, ForeignKey<O, CoreApiKeysRecord> key) {
        super(child, key, CORE_API_KEYS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreApiKeysRecord> getPrimaryKey() {
        return Keys.KEY_CORE_API_KEYS_PRIMARY;
    }

    @Override
    public CoreApiKeys as(String alias) {
        return new CoreApiKeys(DSL.name(alias), this);
    }

    @Override
    public CoreApiKeys as(Name alias) {
        return new CoreApiKeys(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiKeys rename(String name) {
        return new CoreApiKeys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiKeys rename(Name name) {
        return new CoreApiKeys(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
