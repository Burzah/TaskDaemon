/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreRcAuthorNotificationTextRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreRcAuthorNotificationText extends TableImpl<CoreRcAuthorNotificationTextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_rc_author_notification_text</code>
     */
    public static final CoreRcAuthorNotificationText CORE_RC_AUTHOR_NOTIFICATION_TEXT = new CoreRcAuthorNotificationText();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreRcAuthorNotificationTextRecord> getRecordType() {
        return CoreRcAuthorNotificationTextRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_rc_author_notification_text.id</code>. ID
     * Number
     */
    public final TableField<CoreRcAuthorNotificationTextRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column
     * <code>paradise_forums.core_rc_author_notification_text.title</code>.
     */
    public final TableField<CoreRcAuthorNotificationTextRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_rc_author_notification_text.text</code>.
     */
    public final TableField<CoreRcAuthorNotificationTextRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    private CoreRcAuthorNotificationText(Name alias, Table<CoreRcAuthorNotificationTextRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreRcAuthorNotificationText(Name alias, Table<CoreRcAuthorNotificationTextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_rc_author_notification_text</code> table
     * reference
     */
    public CoreRcAuthorNotificationText(String alias) {
        this(DSL.name(alias), CORE_RC_AUTHOR_NOTIFICATION_TEXT);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_rc_author_notification_text</code> table
     * reference
     */
    public CoreRcAuthorNotificationText(Name alias) {
        this(alias, CORE_RC_AUTHOR_NOTIFICATION_TEXT);
    }

    /**
     * Create a <code>paradise_forums.core_rc_author_notification_text</code>
     * table reference
     */
    public CoreRcAuthorNotificationText() {
        this(DSL.name("core_rc_author_notification_text"), null);
    }

    public <O extends Record> CoreRcAuthorNotificationText(Table<O> child, ForeignKey<O, CoreRcAuthorNotificationTextRecord> key) {
        super(child, key, CORE_RC_AUTHOR_NOTIFICATION_TEXT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreRcAuthorNotificationTextRecord, ULong> getIdentity() {
        return (Identity<CoreRcAuthorNotificationTextRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreRcAuthorNotificationTextRecord> getPrimaryKey() {
        return Keys.KEY_CORE_RC_AUTHOR_NOTIFICATION_TEXT_PRIMARY;
    }

    @Override
    public CoreRcAuthorNotificationText as(String alias) {
        return new CoreRcAuthorNotificationText(DSL.name(alias), this);
    }

    @Override
    public CoreRcAuthorNotificationText as(Name alias) {
        return new CoreRcAuthorNotificationText(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreRcAuthorNotificationText rename(String name) {
        return new CoreRcAuthorNotificationText(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreRcAuthorNotificationText rename(Name name) {
        return new CoreRcAuthorNotificationText(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
