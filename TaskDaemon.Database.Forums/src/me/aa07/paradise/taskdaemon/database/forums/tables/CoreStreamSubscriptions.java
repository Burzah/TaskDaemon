/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamSubscriptionsFrequency;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreStreamSubscriptionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreStreamSubscriptions extends TableImpl<CoreStreamSubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_stream_subscriptions</code>
     */
    public static final CoreStreamSubscriptions CORE_STREAM_SUBSCRIPTIONS = new CoreStreamSubscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreStreamSubscriptionsRecord> getRecordType() {
        return CoreStreamSubscriptionsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_stream_subscriptions.id</code>. ID
     * Number
     */
    public final TableField<CoreStreamSubscriptionsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column
     * <code>paradise_forums.core_stream_subscriptions.member_id</code>.
     */
    public final TableField<CoreStreamSubscriptionsRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_stream_subscriptions.stream_id</code>.
     */
    public final TableField<CoreStreamSubscriptionsRecord, Long> STREAM_ID = createField(DSL.name("stream_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_stream_subscriptions.frequency</code>.
     */
    public final TableField<CoreStreamSubscriptionsRecord, CoreStreamSubscriptionsFrequency> FREQUENCY = createField(DSL.name("frequency"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("'weekly'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamSubscriptionsFrequency.class), this, "");

    /**
     * The column <code>paradise_forums.core_stream_subscriptions.sent</code>.
     */
    public final TableField<CoreStreamSubscriptionsRecord, Integer> SENT = createField(DSL.name("sent"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_stream_subscriptions.added</code>.
     */
    public final TableField<CoreStreamSubscriptionsRecord, Integer> ADDED = createField(DSL.name("added"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private CoreStreamSubscriptions(Name alias, Table<CoreStreamSubscriptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreStreamSubscriptions(Name alias, Table<CoreStreamSubscriptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_stream_subscriptions</code>
     * table reference
     */
    public CoreStreamSubscriptions(String alias) {
        this(DSL.name(alias), CORE_STREAM_SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_stream_subscriptions</code>
     * table reference
     */
    public CoreStreamSubscriptions(Name alias) {
        this(alias, CORE_STREAM_SUBSCRIPTIONS);
    }

    /**
     * Create a <code>paradise_forums.core_stream_subscriptions</code> table
     * reference
     */
    public CoreStreamSubscriptions() {
        this(DSL.name("core_stream_subscriptions"), null);
    }

    public <O extends Record> CoreStreamSubscriptions(Table<O> child, ForeignKey<O, CoreStreamSubscriptionsRecord> key) {
        super(child, key, CORE_STREAM_SUBSCRIPTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreStreamSubscriptionsRecord, ULong> getIdentity() {
        return (Identity<CoreStreamSubscriptionsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreStreamSubscriptionsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_STREAM_SUBSCRIPTIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreStreamSubscriptionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_STREAM_SUBSCRIPTIONS_MEMBER_STREAM);
    }

    @Override
    public CoreStreamSubscriptions as(String alias) {
        return new CoreStreamSubscriptions(DSL.name(alias), this);
    }

    @Override
    public CoreStreamSubscriptions as(Name alias) {
        return new CoreStreamSubscriptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStreamSubscriptions rename(String name) {
        return new CoreStreamSubscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStreamSubscriptions rename(Name name) {
        return new CoreStreamSubscriptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, Long, Long, CoreStreamSubscriptionsFrequency, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
