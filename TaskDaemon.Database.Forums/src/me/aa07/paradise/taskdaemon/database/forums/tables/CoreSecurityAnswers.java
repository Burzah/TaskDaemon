/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreSecurityAnswersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSecurityAnswers extends TableImpl<CoreSecurityAnswersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_security_answers</code>
     */
    public static final CoreSecurityAnswers CORE_SECURITY_ANSWERS = new CoreSecurityAnswers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreSecurityAnswersRecord> getRecordType() {
        return CoreSecurityAnswersRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_security_answers.answer_question_id</code>.
     * The ID number of the question this is an answer for
     */
    public final TableField<CoreSecurityAnswersRecord, ULong> ANSWER_QUESTION_ID = createField(DSL.name("answer_question_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The ID number of the question this is an answer for");

    /**
     * The column
     * <code>paradise_forums.core_security_answers.answer_member_id</code>. The
     * member ID this answer is for
     */
    public final TableField<CoreSecurityAnswersRecord, ULong> ANSWER_MEMBER_ID = createField(DSL.name("answer_member_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The member ID this answer is for");

    /**
     * The column
     * <code>paradise_forums.core_security_answers.answer_answer</code>. The
     * answer, stored as an \IPS\Text\Encrypt tag
     */
    public final TableField<CoreSecurityAnswersRecord, String> ANSWER_ANSWER = createField(DSL.name("answer_answer"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The answer, stored as an \\IPS\\Text\\Encrypt tag");

    /**
     * The column
     * <code>paradise_forums.core_security_answers.answer_is_chosen</code>. When
     * the authentication form is chosen, one answer is remembered with this
     * flag so that refreshing produces the same question
     */
    public final TableField<CoreSecurityAnswersRecord, UByte> ANSWER_IS_CHOSEN = createField(DSL.name("answer_is_chosen"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "When the authentication form is chosen, one answer is remembered with this flag so that refreshing produces the same question");

    private CoreSecurityAnswers(Name alias, Table<CoreSecurityAnswersRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreSecurityAnswers(Name alias, Table<CoreSecurityAnswersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_security_answers</code>
     * table reference
     */
    public CoreSecurityAnswers(String alias) {
        this(DSL.name(alias), CORE_SECURITY_ANSWERS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_security_answers</code>
     * table reference
     */
    public CoreSecurityAnswers(Name alias) {
        this(alias, CORE_SECURITY_ANSWERS);
    }

    /**
     * Create a <code>paradise_forums.core_security_answers</code> table
     * reference
     */
    public CoreSecurityAnswers() {
        this(DSL.name("core_security_answers"), null);
    }

    public <O extends Record> CoreSecurityAnswers(Table<O> child, ForeignKey<O, CoreSecurityAnswersRecord> key) {
        super(child, key, CORE_SECURITY_ANSWERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_SECURITY_ANSWERS_MEMBER);
    }

    @Override
    public List<UniqueKey<CoreSecurityAnswersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_SECURITY_ANSWERS_QUESTION_AND_MEMBER);
    }

    @Override
    public CoreSecurityAnswers as(String alias) {
        return new CoreSecurityAnswers(DSL.name(alias), this);
    }

    @Override
    public CoreSecurityAnswers as(Name alias) {
        return new CoreSecurityAnswers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSecurityAnswers rename(String name) {
        return new CoreSecurityAnswers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSecurityAnswers rename(Name name) {
        return new CoreSecurityAnswers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, ULong, String, UByte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
