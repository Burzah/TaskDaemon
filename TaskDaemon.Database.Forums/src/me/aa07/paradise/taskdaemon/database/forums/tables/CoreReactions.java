/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreReactionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreReactions extends TableImpl<CoreReactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_reactions</code>
     */
    public static final CoreReactions CORE_REACTIONS = new CoreReactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreReactionsRecord> getRecordType() {
        return CoreReactionsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_reactions.reaction_id</code>. ID
     * Number
     */
    public final TableField<CoreReactionsRecord, ULong> REACTION_ID = createField(DSL.name("reaction_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_reactions.reaction_value</code>.
     */
    public final TableField<CoreReactionsRecord, Byte> REACTION_VALUE = createField(DSL.name("reaction_value"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_reactions.reaction_icon</code>.
     */
    public final TableField<CoreReactionsRecord, String> REACTION_ICON = createField(DSL.name("reaction_icon"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_reactions.reaction_position</code>.
     */
    public final TableField<CoreReactionsRecord, Integer> REACTION_POSITION = createField(DSL.name("reaction_position"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_reactions.reaction_enabled</code>.
     */
    public final TableField<CoreReactionsRecord, Byte> REACTION_ENABLED = createField(DSL.name("reaction_enabled"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    private CoreReactions(Name alias, Table<CoreReactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreReactions(Name alias, Table<CoreReactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_reactions</code> table
     * reference
     */
    public CoreReactions(String alias) {
        this(DSL.name(alias), CORE_REACTIONS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_reactions</code> table
     * reference
     */
    public CoreReactions(Name alias) {
        this(alias, CORE_REACTIONS);
    }

    /**
     * Create a <code>paradise_forums.core_reactions</code> table reference
     */
    public CoreReactions() {
        this(DSL.name("core_reactions"), null);
    }

    public <O extends Record> CoreReactions(Table<O> child, ForeignKey<O, CoreReactionsRecord> key) {
        super(child, key, CORE_REACTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreReactionsRecord, ULong> getIdentity() {
        return (Identity<CoreReactionsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreReactionsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_REACTIONS_PRIMARY;
    }

    @Override
    public CoreReactions as(String alias) {
        return new CoreReactions(DSL.name(alias), this);
    }

    @Override
    public CoreReactions as(Name alias) {
        return new CoreReactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreReactions rename(String name) {
        return new CoreReactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreReactions rename(Name name) {
        return new CoreReactions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, Byte, String, Integer, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
