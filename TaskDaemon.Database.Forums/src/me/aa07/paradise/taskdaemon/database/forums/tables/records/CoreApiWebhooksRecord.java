/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreApiWebhooks;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiWebhooksRecord extends UpdatableRecordImpl<CoreApiWebhooksRecord> implements Record7<ULong, String, String, String, Byte, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.api_key</code>. The
     * API key which owns this webhook
     */
    public void setApiKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.api_key</code>. The
     * API key which owns this webhook
     */
    public String getApiKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.events</code>.
     * Comma-delimited list of events to fire for
     */
    public void setEvents(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.events</code>.
     * Comma-delimited list of events to fire for
     */
    public String getEvents() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.url</code>. The URL to
     * send webhook to
     */
    public void setUrl(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.url</code>. The URL to
     * send webhook to
     */
    public String getUrl() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.enabled</code>.
     */
    public void setEnabled(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.enabled</code>.
     */
    public Byte getEnabled() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.filters</code>.
     * JSON-encoded array of filters for each event
     */
    public void setFilters(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.filters</code>.
     * JSON-encoded array of filters for each event
     */
    public String getFilters() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_api_webhooks.content_type</code>.
     */
    public void setContentType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_webhooks.content_type</code>.
     */
    public String getContentType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, String, String, Byte, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<ULong, String, String, String, Byte, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.API_KEY;
    }

    @Override
    public Field<String> field3() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.EVENTS;
    }

    @Override
    public Field<String> field4() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.URL;
    }

    @Override
    public Field<Byte> field5() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.ENABLED;
    }

    @Override
    public Field<String> field6() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.FILTERS;
    }

    @Override
    public Field<String> field7() {
        return CoreApiWebhooks.CORE_API_WEBHOOKS.CONTENT_TYPE;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getApiKey();
    }

    @Override
    public String component3() {
        return getEvents();
    }

    @Override
    public String component4() {
        return getUrl();
    }

    @Override
    public Byte component5() {
        return getEnabled();
    }

    @Override
    public String component6() {
        return getFilters();
    }

    @Override
    public String component7() {
        return getContentType();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getApiKey();
    }

    @Override
    public String value3() {
        return getEvents();
    }

    @Override
    public String value4() {
        return getUrl();
    }

    @Override
    public Byte value5() {
        return getEnabled();
    }

    @Override
    public String value6() {
        return getFilters();
    }

    @Override
    public String value7() {
        return getContentType();
    }

    @Override
    public CoreApiWebhooksRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value2(String value) {
        setApiKey(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value3(String value) {
        setEvents(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value4(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value5(Byte value) {
        setEnabled(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value6(String value) {
        setFilters(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord value7(String value) {
        setContentType(value);
        return this;
    }

    @Override
    public CoreApiWebhooksRecord values(ULong value1, String value2, String value3, String value4, Byte value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreApiWebhooksRecord
     */
    public CoreApiWebhooksRecord() {
        super(CoreApiWebhooks.CORE_API_WEBHOOKS);
    }

    /**
     * Create a detached, initialised CoreApiWebhooksRecord
     */
    public CoreApiWebhooksRecord(ULong id, String apiKey, String events, String url, Byte enabled, String filters, String contentType) {
        super(CoreApiWebhooks.CORE_API_WEBHOOKS);

        setId(id);
        setApiKey(apiKey);
        setEvents(events);
        setUrl(url);
        setEnabled(enabled);
        setFilters(filters);
        setContentType(contentType);
    }
}
