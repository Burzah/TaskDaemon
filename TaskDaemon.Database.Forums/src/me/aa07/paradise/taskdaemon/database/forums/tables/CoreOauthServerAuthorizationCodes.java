/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreOauthServerAuthorizationCodesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthServerAuthorizationCodes extends TableImpl<CoreOauthServerAuthorizationCodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_oauth_server_authorization_codes</code>
     */
    public static final CoreOauthServerAuthorizationCodes CORE_OAUTH_SERVER_AUTHORIZATION_CODES = new CoreOauthServerAuthorizationCodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreOauthServerAuthorizationCodesRecord> getRecordType() {
        return CoreOauthServerAuthorizationCodesRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.client_id</code>.
     * The client ID
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.CHAR(32).nullable(false), this, "The client ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.member_id</code>.
     * The member ID
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, ULong> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The member ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.expires</code>.
     * Unix timestamp of expiration
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, UInteger> EXPIRES = createField(DSL.name("expires"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of expiration");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.code</code>.
     * The authorization code
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("''", SQLDataType.CHAR)), this, "The authorization code");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.scope</code>.
     * JSON-encoded array of scopes or NULL if no scope was requested
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of scopes or NULL if no scope was requested");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.redirect_uri</code>.
     * The redirect_uri provided in the request
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> REDIRECT_URI = createField(DSL.name("redirect_uri"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The redirect_uri provided in the request");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.used</code>.
     * Boolean value indicating if code has been used
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, UByte> USED = createField(DSL.name("used"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if code has been used");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.code_challenge</code>.
     * The PKCE code challenge, if one was provided by the client
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> CODE_CHALLENGE = createField(DSL.name("code_challenge"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The PKCE code challenge, if one was provided by the client");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.code_challenge_method</code>.
     * The PKCE code challenge method, if applicable
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> CODE_CHALLENGE_METHOD = createField(DSL.name("code_challenge_method"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("'plain'", SQLDataType.VARCHAR)), this, "The PKCE code challenge method, if applicable");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.user_agent</code>.
     * The user agent that the user performed authentication on, if known
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The user agent that the user performed authentication on, if known");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_authorization_codes.device_key</code>.
     * The device key of the device used to obtain this authorization code, if
     * known
     */
    public final TableField<CoreOauthServerAuthorizationCodesRecord, String> DEVICE_KEY = createField(DSL.name("device_key"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The device key of the device used to obtain this authorization code, if known");

    private CoreOauthServerAuthorizationCodes(Name alias, Table<CoreOauthServerAuthorizationCodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreOauthServerAuthorizationCodes(Name alias, Table<CoreOauthServerAuthorizationCodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_server_authorization_codes</code> table
     * reference
     */
    public CoreOauthServerAuthorizationCodes(String alias) {
        this(DSL.name(alias), CORE_OAUTH_SERVER_AUTHORIZATION_CODES);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_server_authorization_codes</code> table
     * reference
     */
    public CoreOauthServerAuthorizationCodes(Name alias) {
        this(alias, CORE_OAUTH_SERVER_AUTHORIZATION_CODES);
    }

    /**
     * Create a
     * <code>paradise_forums.core_oauth_server_authorization_codes</code> table
     * reference
     */
    public CoreOauthServerAuthorizationCodes() {
        this(DSL.name("core_oauth_server_authorization_codes"), null);
    }

    public <O extends Record> CoreOauthServerAuthorizationCodes(Table<O> child, ForeignKey<O, CoreOauthServerAuthorizationCodesRecord> key) {
        super(child, key, CORE_OAUTH_SERVER_AUTHORIZATION_CODES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<UniqueKey<CoreOauthServerAuthorizationCodesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_OAUTH_SERVER_AUTHORIZATION_CODES_AUTHORIZATION_CODE);
    }

    @Override
    public CoreOauthServerAuthorizationCodes as(String alias) {
        return new CoreOauthServerAuthorizationCodes(DSL.name(alias), this);
    }

    @Override
    public CoreOauthServerAuthorizationCodes as(Name alias) {
        return new CoreOauthServerAuthorizationCodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthServerAuthorizationCodes rename(String name) {
        return new CoreOauthServerAuthorizationCodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthServerAuthorizationCodes rename(Name name) {
        return new CoreOauthServerAuthorizationCodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, ULong, UInteger, String, String, String, UByte, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
