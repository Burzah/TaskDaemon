/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreNotificationsPwaKeysRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreNotificationsPwaKeys extends TableImpl<CoreNotificationsPwaKeysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_notifications_pwa_keys</code>
     */
    public static final CoreNotificationsPwaKeys CORE_NOTIFICATIONS_PWA_KEYS = new CoreNotificationsPwaKeys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreNotificationsPwaKeysRecord> getRecordType() {
        return CoreNotificationsPwaKeysRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_notifications_pwa_keys.id</code>.
     * ID Number
     */
    public final TableField<CoreNotificationsPwaKeysRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column
     * <code>paradise_forums.core_notifications_pwa_keys.member</code>. Member
     * ID. This is not a unique reference, since PWA notifications are per
     * device, not per user.
     */
    public final TableField<CoreNotificationsPwaKeysRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "Member ID. This is not a unique reference, since PWA notifications are per device, not per user.");

    /**
     * The column
     * <code>paradise_forums.core_notifications_pwa_keys.p256dh</code>.
     */
    public final TableField<CoreNotificationsPwaKeysRecord, String> P256DH = createField(DSL.name("p256dh"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_notifications_pwa_keys.auth</code>.
     */
    public final TableField<CoreNotificationsPwaKeysRecord, String> AUTH = createField(DSL.name("auth"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_notifications_pwa_keys.endpoint</code>.
     * Endpoint URL. Use TEXT as endpoints may exceed the limits of VARCHAR.
     */
    public final TableField<CoreNotificationsPwaKeysRecord, String> ENDPOINT = createField(DSL.name("endpoint"), SQLDataType.CLOB.nullable(false), this, "Endpoint URL. Use TEXT as endpoints may exceed the limits of VARCHAR.");

    /**
     * The column
     * <code>paradise_forums.core_notifications_pwa_keys.encoding</code>. The
     * content encoding preferred by this browser
     */
    public final TableField<CoreNotificationsPwaKeysRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("'aesgcm'", SQLDataType.VARCHAR)), this, "The content encoding preferred by this browser");

    /**
     * The column
     * <code>paradise_forums.core_notifications_pwa_keys.device</code>.
     */
    public final TableField<CoreNotificationsPwaKeysRecord, String> DEVICE = createField(DSL.name("device"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    private CoreNotificationsPwaKeys(Name alias, Table<CoreNotificationsPwaKeysRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreNotificationsPwaKeys(Name alias, Table<CoreNotificationsPwaKeysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_notifications_pwa_keys</code> table reference
     */
    public CoreNotificationsPwaKeys(String alias) {
        this(DSL.name(alias), CORE_NOTIFICATIONS_PWA_KEYS);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_notifications_pwa_keys</code> table reference
     */
    public CoreNotificationsPwaKeys(Name alias) {
        this(alias, CORE_NOTIFICATIONS_PWA_KEYS);
    }

    /**
     * Create a <code>paradise_forums.core_notifications_pwa_keys</code> table
     * reference
     */
    public CoreNotificationsPwaKeys() {
        this(DSL.name("core_notifications_pwa_keys"), null);
    }

    public <O extends Record> CoreNotificationsPwaKeys(Table<O> child, ForeignKey<O, CoreNotificationsPwaKeysRecord> key) {
        super(child, key, CORE_NOTIFICATIONS_PWA_KEYS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_NOTIFICATIONS_PWA_KEYS_MEMBER);
    }

    @Override
    public Identity<CoreNotificationsPwaKeysRecord, ULong> getIdentity() {
        return (Identity<CoreNotificationsPwaKeysRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreNotificationsPwaKeysRecord> getPrimaryKey() {
        return Keys.KEY_CORE_NOTIFICATIONS_PWA_KEYS_PRIMARY;
    }

    @Override
    public CoreNotificationsPwaKeys as(String alias) {
        return new CoreNotificationsPwaKeys(DSL.name(alias), this);
    }

    @Override
    public CoreNotificationsPwaKeys as(Name alias) {
        return new CoreNotificationsPwaKeys(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreNotificationsPwaKeys rename(String name) {
        return new CoreNotificationsPwaKeys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreNotificationsPwaKeys rename(Name name) {
        return new CoreNotificationsPwaKeys(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
