/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CorePluginsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePlugins extends TableImpl<CorePluginsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_plugins</code>
     */
    public static final CorePlugins CORE_PLUGINS = new CorePlugins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePluginsRecord> getRecordType() {
        return CorePluginsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_plugins.plugin_id</code>. ID Number
     */
    public final TableField<CorePluginsRecord, ULong> PLUGIN_ID = createField(DSL.name("plugin_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_name</code>. Name
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_NAME = createField(DSL.name("plugin_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Name");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_update_check</code>.
     * URL to check for updates
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_UPDATE_CHECK = createField(DSL.name("plugin_update_check"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "URL to check for updates");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_author</code>.
     * Author name
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_AUTHOR = createField(DSL.name("plugin_author"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Author name");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_website</code>.
     * Author website URL
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_WEBSITE = createField(DSL.name("plugin_website"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Author website URL");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_location</code>.
     * Folder name for IN_DEV mode
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_LOCATION = createField(DSL.name("plugin_location"), SQLDataType.VARCHAR(80).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Folder name for IN_DEV mode");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_version_long</code>.
     * Currently installed version (system)
     */
    public final TableField<CorePluginsRecord, UInteger> PLUGIN_VERSION_LONG = createField(DSL.name("plugin_version_long"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("10000", SQLDataType.INTEGERUNSIGNED)), this, "Currently installed version (system)");

    /**
     * The column
     * <code>paradise_forums.core_plugins.plugin_version_human</code>. Currently
     * installed version (human-readable)
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_VERSION_HUMAN = createField(DSL.name("plugin_version_human"), SQLDataType.VARCHAR(14).nullable(false).defaultValue(DSL.inline("'1.0.0'", SQLDataType.VARCHAR)), this, "Currently installed version (human-readable)");

    /**
     * The column
     * <code>paradise_forums.core_plugins.plugin_update_check_last</code>. Unix
     * timestamp that the plugin was last checked for updates
     */
    public final TableField<CorePluginsRecord, Integer> PLUGIN_UPDATE_CHECK_LAST = createField(DSL.name("plugin_update_check_last"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Unix timestamp that the plugin was last checked for updates");

    /**
     * The column
     * <code>paradise_forums.core_plugins.plugin_update_check_data</code>. JSON
     * data returned in last update check
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_UPDATE_CHECK_DATA = createField(DSL.name("plugin_update_check_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON data returned in last update check");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_enabled</code>.
     * Plugin is enabled?
     */
    public final TableField<CorePluginsRecord, Byte> PLUGIN_ENABLED = createField(DSL.name("plugin_enabled"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Plugin is enabled?");

    /**
     * The column <code>paradise_forums.core_plugins.plugin_order</code>. The
     * order plugins are executed
     */
    public final TableField<CorePluginsRecord, ULong> PLUGIN_ORDER = createField(DSL.name("plugin_order"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The order plugins are executed");

    /**
     * The column
     * <code>paradise_forums.core_plugins.plugin_diagnostic_url</code>. The URL
     * to send diagnostic reports to.
     */
    public final TableField<CorePluginsRecord, String> PLUGIN_DIAGNOSTIC_URL = createField(DSL.name("plugin_diagnostic_url"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The URL to send diagnostic reports to.");

    /**
     * The column
     * <code>paradise_forums.core_plugins.plugin_requires_manual_intervention</code>.
     * If this is 1, do not enable plugin. it likely contains code that will
     * cause fatal errors in php8, which needs to be addressed by the author
     */
    public final TableField<CorePluginsRecord, UByte> PLUGIN_REQUIRES_MANUAL_INTERVENTION = createField(DSL.name("plugin_requires_manual_intervention"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "If this is 1, do not enable plugin. it likely contains code that will cause fatal errors in php8, which needs to be addressed by the author");

    private CorePlugins(Name alias, Table<CorePluginsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePlugins(Name alias, Table<CorePluginsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_plugins</code> table
     * reference
     */
    public CorePlugins(String alias) {
        this(DSL.name(alias), CORE_PLUGINS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_plugins</code> table
     * reference
     */
    public CorePlugins(Name alias) {
        this(alias, CORE_PLUGINS);
    }

    /**
     * Create a <code>paradise_forums.core_plugins</code> table reference
     */
    public CorePlugins() {
        this(DSL.name("core_plugins"), null);
    }

    public <O extends Record> CorePlugins(Table<O> child, ForeignKey<O, CorePluginsRecord> key) {
        super(child, key, CORE_PLUGINS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CorePluginsRecord, ULong> getIdentity() {
        return (Identity<CorePluginsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorePluginsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_PLUGINS_PRIMARY;
    }

    @Override
    public CorePlugins as(String alias) {
        return new CorePlugins(DSL.name(alias), this);
    }

    @Override
    public CorePlugins as(Name alias) {
        return new CorePlugins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePlugins rename(String name) {
        return new CorePlugins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePlugins rename(Name name) {
        return new CorePlugins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<ULong, String, String, String, String, String, UInteger, String, Integer, String, Byte, ULong, String, UByte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
