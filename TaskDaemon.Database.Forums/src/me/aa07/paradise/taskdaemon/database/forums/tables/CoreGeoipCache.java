/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreGeoipCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Caches GeoIP data to prevent multiple remote calls
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreGeoipCache extends TableImpl<CoreGeoipCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_geoip_cache</code>
     */
    public static final CoreGeoipCache CORE_GEOIP_CACHE = new CoreGeoipCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreGeoipCacheRecord> getRecordType() {
        return CoreGeoipCacheRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_geoip_cache.ip_address</code>. The
     * IP address
     */
    public final TableField<CoreGeoipCacheRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(46).nullable(false), this, "The IP address");

    /**
     * The column <code>paradise_forums.core_geoip_cache.data</code>. The
     * JSON-encoded data returned by the service
     */
    public final TableField<CoreGeoipCacheRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The JSON-encoded data returned by the service");

    /**
     * The column <code>paradise_forums.core_geoip_cache.date</code>. Unix
     * timestamp of when the data was retrieved 
     */
    public final TableField<CoreGeoipCacheRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER.nullable(false), this, "Unix timestamp of when the data was retrieved ");

    private CoreGeoipCache(Name alias, Table<CoreGeoipCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreGeoipCache(Name alias, Table<CoreGeoipCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Caches GeoIP data to prevent multiple remote calls"), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_geoip_cache</code> table
     * reference
     */
    public CoreGeoipCache(String alias) {
        this(DSL.name(alias), CORE_GEOIP_CACHE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_geoip_cache</code> table
     * reference
     */
    public CoreGeoipCache(Name alias) {
        this(alias, CORE_GEOIP_CACHE);
    }

    /**
     * Create a <code>paradise_forums.core_geoip_cache</code> table reference
     */
    public CoreGeoipCache() {
        this(DSL.name("core_geoip_cache"), null);
    }

    public <O extends Record> CoreGeoipCache(Table<O> child, ForeignKey<O, CoreGeoipCacheRecord> key) {
        super(child, key, CORE_GEOIP_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_GEOIP_CACHE_DATE);
    }

    @Override
    public UniqueKey<CoreGeoipCacheRecord> getPrimaryKey() {
        return Keys.KEY_CORE_GEOIP_CACHE_PRIMARY;
    }

    @Override
    public CoreGeoipCache as(String alias) {
        return new CoreGeoipCache(DSL.name(alias), this);
    }

    @Override
    public CoreGeoipCache as(Name alias) {
        return new CoreGeoipCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreGeoipCache rename(String name) {
        return new CoreGeoipCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreGeoipCache rename(Name name) {
        return new CoreGeoipCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
