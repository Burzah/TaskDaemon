/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreValidatingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreValidating extends TableImpl<CoreValidatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_validating</code>
     */
    public static final CoreValidating CORE_VALIDATING = new CoreValidating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreValidatingRecord> getRecordType() {
        return CoreValidatingRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_validating.vid</code>.
     */
    public final TableField<CoreValidatingRecord, String> VID = createField(DSL.name("vid"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.member_id</code>.
     */
    public final TableField<CoreValidatingRecord, ULong> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.entry_date</code>.
     */
    public final TableField<CoreValidatingRecord, Integer> ENTRY_DATE = createField(DSL.name("entry_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.coppa_user</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> COPPA_USER = createField(DSL.name("coppa_user"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.lost_pass</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> LOST_PASS = createField(DSL.name("lost_pass"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.new_reg</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> NEW_REG = createField(DSL.name("new_reg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.email_chg</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> EMAIL_CHG = createField(DSL.name("email_chg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.ip_address</code>.
     */
    public final TableField<CoreValidatingRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(46).nullable(false).defaultValue(DSL.inline("'0'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.user_verified</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> USER_VERIFIED = createField(DSL.name("user_verified"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.prev_email</code>.
     */
    public final TableField<CoreValidatingRecord, String> PREV_EMAIL = createField(DSL.name("prev_email"), SQLDataType.VARCHAR(150).nullable(false).defaultValue(DSL.inline("'0'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.spam_flag</code>.
     */
    public final TableField<CoreValidatingRecord, Byte> SPAM_FLAG = createField(DSL.name("spam_flag"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.email_sent</code>.
     * Timestamp of when the confirmation email was last sent
     */
    public final TableField<CoreValidatingRecord, Integer> EMAIL_SENT = createField(DSL.name("email_sent"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "Timestamp of when the confirmation email was last sent");

    /**
     * The column <code>paradise_forums.core_validating.forgot_security</code>.
     */
    public final TableField<CoreValidatingRecord, UByte> FORGOT_SECURITY = createField(DSL.name("forgot_security"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_validating.do_not_delete</code>. A
     * flag to specify that the account should not be deleted in the normal
     * cleanup of unvalidated accounts. Used for accounts created in Commerce
     * checkout.
     */
    public final TableField<CoreValidatingRecord, UByte> DO_NOT_DELETE = createField(DSL.name("do_not_delete"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "A flag to specify that the account should not be deleted in the normal cleanup of unvalidated accounts. Used for accounts created in Commerce checkout.");

    /**
     * The column <code>paradise_forums.core_validating.reg_cancelled</code>.
     * Flag to see if the user likes soup. Kidding, timestamp of when they have
     * cancelled their reg.
     */
    public final TableField<CoreValidatingRecord, UInteger> REG_CANCELLED = createField(DSL.name("reg_cancelled"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Flag to see if the user likes soup. Kidding, timestamp of when they have cancelled their reg.");

    /**
     * The column <code>paradise_forums.core_validating.ref</code>. URL to
     * redirect the user to after validation is complete
     */
    public final TableField<CoreValidatingRecord, String> REF = createField(DSL.name("ref"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "URL to redirect the user to after validation is complete");

    /**
     * The column <code>paradise_forums.core_validating.security_key</code>.
     */
    public final TableField<CoreValidatingRecord, String> SECURITY_KEY = createField(DSL.name("security_key"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private CoreValidating(Name alias, Table<CoreValidatingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreValidating(Name alias, Table<CoreValidatingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_validating</code> table
     * reference
     */
    public CoreValidating(String alias) {
        this(DSL.name(alias), CORE_VALIDATING);
    }

    /**
     * Create an aliased <code>paradise_forums.core_validating</code> table
     * reference
     */
    public CoreValidating(Name alias) {
        this(alias, CORE_VALIDATING);
    }

    /**
     * Create a <code>paradise_forums.core_validating</code> table reference
     */
    public CoreValidating() {
        this(DSL.name("core_validating"), null);
    }

    public <O extends Record> CoreValidating(Table<O> child, ForeignKey<O, CoreValidatingRecord> key) {
        super(child, key, CORE_VALIDATING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_VALIDATING_COPPA_USER, Indexes.CORE_VALIDATING_IP_ADDRESS, Indexes.CORE_VALIDATING_LOST_PASS, Indexes.CORE_VALIDATING_MEMBER_ID, Indexes.CORE_VALIDATING_NEW_REG, Indexes.CORE_VALIDATING_SPAM_FLAG, Indexes.CORE_VALIDATING_USER_VERIFIED);
    }

    @Override
    public UniqueKey<CoreValidatingRecord> getPrimaryKey() {
        return Keys.KEY_CORE_VALIDATING_PRIMARY;
    }

    @Override
    public CoreValidating as(String alias) {
        return new CoreValidating(DSL.name(alias), this);
    }

    @Override
    public CoreValidating as(Name alias) {
        return new CoreValidating(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreValidating rename(String name) {
        return new CoreValidating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreValidating rename(Name name) {
        return new CoreValidating(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, ULong, Integer, Byte, Byte, Byte, Byte, String, Byte, String, Byte, Integer, UByte, UByte, UInteger, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
