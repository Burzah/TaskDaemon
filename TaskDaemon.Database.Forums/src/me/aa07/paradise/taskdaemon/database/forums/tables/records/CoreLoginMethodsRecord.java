/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreLoginMethods;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginMethodsRecord extends UpdatableRecordImpl<CoreLoginMethodsRecord> implements Record8<ULong, String, UInteger, UByte, String, UByte, UByte, UInteger> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_login_methods.login_id</code>. ID
     * Number
     */
    public void setLoginId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_methods.login_id</code>. ID
     * Number
     */
    public ULong getLoginId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_login_methods.login_classname</code>.
     * Handler's class name
     */
    public void setLoginClassname(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_login_methods.login_classname</code>.
     * Handler's class name
     */
    public String getLoginClassname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_login_methods.login_order</code>.
     * The order to process in 
     */
    public void setLoginOrder(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_methods.login_order</code>.
     * The order to process in 
     */
    public UInteger getLoginOrder() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_login_methods.login_acp</code>.
     * Boolean value indicating if method can be used for ACP logins
     */
    public void setLoginAcp(UByte value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_methods.login_acp</code>.
     * Boolean value indicating if method can be used for ACP logins
     */
    public UByte getLoginAcp() {
        return (UByte) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_login_methods.login_settings</code>.
     * JSON-encoded handler-specific setting values
     */
    public void setLoginSettings(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_login_methods.login_settings</code>.
     * JSON-encoded handler-specific setting values
     */
    public String getLoginSettings() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_login_methods.login_enabled</code>.
     * Boolean value indicating if method is enabled
     */
    public void setLoginEnabled(UByte value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_methods.login_enabled</code>.
     * Boolean value indicating if method is enabled
     */
    public UByte getLoginEnabled() {
        return (UByte) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_login_methods.login_register</code>. Boolean
     * value indicating if users can register using this method
     */
    public void setLoginRegister(UByte value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_login_methods.login_register</code>. Boolean
     * value indicating if users can register using this method
     */
    public UByte getLoginRegister() {
        return (UByte) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_login_methods.login_front</code>.
     * Boolean value indicating if method can be used for frontend logins
     */
    public void setLoginFront(UInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_methods.login_front</code>.
     * Boolean value indicating if method can be used for frontend logins
     */
    public UInteger getLoginFront() {
        return (UInteger) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, UInteger, UByte, String, UByte, UByte, UInteger> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<ULong, String, UInteger, UByte, String, UByte, UByte, UInteger> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_CLASSNAME;
    }

    @Override
    public Field<UInteger> field3() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_ORDER;
    }

    @Override
    public Field<UByte> field4() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_ACP;
    }

    @Override
    public Field<String> field5() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_SETTINGS;
    }

    @Override
    public Field<UByte> field6() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_ENABLED;
    }

    @Override
    public Field<UByte> field7() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_REGISTER;
    }

    @Override
    public Field<UInteger> field8() {
        return CoreLoginMethods.CORE_LOGIN_METHODS.LOGIN_FRONT;
    }

    @Override
    public ULong component1() {
        return getLoginId();
    }

    @Override
    public String component2() {
        return getLoginClassname();
    }

    @Override
    public UInteger component3() {
        return getLoginOrder();
    }

    @Override
    public UByte component4() {
        return getLoginAcp();
    }

    @Override
    public String component5() {
        return getLoginSettings();
    }

    @Override
    public UByte component6() {
        return getLoginEnabled();
    }

    @Override
    public UByte component7() {
        return getLoginRegister();
    }

    @Override
    public UInteger component8() {
        return getLoginFront();
    }

    @Override
    public ULong value1() {
        return getLoginId();
    }

    @Override
    public String value2() {
        return getLoginClassname();
    }

    @Override
    public UInteger value3() {
        return getLoginOrder();
    }

    @Override
    public UByte value4() {
        return getLoginAcp();
    }

    @Override
    public String value5() {
        return getLoginSettings();
    }

    @Override
    public UByte value6() {
        return getLoginEnabled();
    }

    @Override
    public UByte value7() {
        return getLoginRegister();
    }

    @Override
    public UInteger value8() {
        return getLoginFront();
    }

    @Override
    public CoreLoginMethodsRecord value1(ULong value) {
        setLoginId(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value2(String value) {
        setLoginClassname(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value3(UInteger value) {
        setLoginOrder(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value4(UByte value) {
        setLoginAcp(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value5(String value) {
        setLoginSettings(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value6(UByte value) {
        setLoginEnabled(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value7(UByte value) {
        setLoginRegister(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord value8(UInteger value) {
        setLoginFront(value);
        return this;
    }

    @Override
    public CoreLoginMethodsRecord values(ULong value1, String value2, UInteger value3, UByte value4, String value5, UByte value6, UByte value7, UInteger value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreLoginMethodsRecord
     */
    public CoreLoginMethodsRecord() {
        super(CoreLoginMethods.CORE_LOGIN_METHODS);
    }

    /**
     * Create a detached, initialised CoreLoginMethodsRecord
     */
    public CoreLoginMethodsRecord(ULong loginId, String loginClassname, UInteger loginOrder, UByte loginAcp, String loginSettings, UByte loginEnabled, UByte loginRegister, UInteger loginFront) {
        super(CoreLoginMethods.CORE_LOGIN_METHODS);

        setLoginId(loginId);
        setLoginClassname(loginClassname);
        setLoginOrder(loginOrder);
        setLoginAcp(loginAcp);
        setLoginSettings(loginSettings);
        setLoginEnabled(loginEnabled);
        setLoginRegister(loginRegister);
        setLoginFront(loginFront);
    }
}
