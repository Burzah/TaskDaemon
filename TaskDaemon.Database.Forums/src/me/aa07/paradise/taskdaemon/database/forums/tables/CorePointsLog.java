/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CorePointsLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePointsLog extends TableImpl<CorePointsLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_points_log</code>
     */
    public static final CorePointsLog CORE_POINTS_LOG = new CorePointsLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePointsLogRecord> getRecordType() {
        return CorePointsLogRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_points_log.id</code>. ID Number
     */
    public final TableField<CorePointsLogRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_points_log.member</code>. The
     * member whose points were changed
     */
    public final TableField<CorePointsLogRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The member whose points were changed");

    /**
     * The column <code>paradise_forums.core_points_log.points</code>. The
     * number of points added/removed
     */
    public final TableField<CorePointsLogRecord, Integer> POINTS = createField(DSL.name("points"), SQLDataType.INTEGER.nullable(false), this, "The number of points added/removed");

    /**
     * The column <code>paradise_forums.core_points_log.datetime</code>. A unix
     * timestamp of when this occurred
     */
    public final TableField<CorePointsLogRecord, UInteger> DATETIME = createField(DSL.name("datetime"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "A unix timestamp of when this occurred");

    /**
     * The column <code>paradise_forums.core_points_log.balance</code>. The
     * member's new points balance after this change
     */
    public final TableField<CorePointsLogRecord, UInteger> BALANCE = createField(DSL.name("balance"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The member's new points balance after this change");

    /**
     * The column <code>paradise_forums.core_points_log.rules</code>. A
     * comma-delimited list of rules which were applied
     */
    public final TableField<CorePointsLogRecord, String> RULES = createField(DSL.name("rules"), SQLDataType.CLOB.nullable(false), this, "A comma-delimited list of rules which were applied");

    /**
     * The column <code>paradise_forums.core_points_log.action_log</code>. The
     * ID number of the log in core_achievements_log which indicates the action
     * that was performed
     */
    public final TableField<CorePointsLogRecord, ULong> ACTION_LOG = createField(DSL.name("action_log"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The ID number of the log in core_achievements_log which indicates the action that was performed");

    /**
     * The column <code>paradise_forums.core_points_log.actor</code>. If the
     * member receiving the points was the subject or other in the action
     */
    public final TableField<CorePointsLogRecord, String> ACTOR = createField(DSL.name("actor"), SQLDataType.VARCHAR(13).nullable(false), this, "If the member receiving the points was the subject or other in the action");

    /**
     * The column <code>paradise_forums.core_points_log.new_rank</code>. If
     * earnings these points changed the rank, the new rank ID
     */
    public final TableField<CorePointsLogRecord, ULong> NEW_RANK = createField(DSL.name("new_rank"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "If earnings these points changed the rank, the new rank ID");

    /**
     * The column <code>paradise_forums.core_points_log.recognize</code>.
     * core_member_recognize pkey
     */
    public final TableField<CorePointsLogRecord, UInteger> RECOGNIZE = createField(DSL.name("recognize"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "core_member_recognize pkey");

    /**
     * The column <code>paradise_forums.core_points_log.time_to_new_rank</code>.
     * Time in seconds member took to receive this rank
     */
    public final TableField<CorePointsLogRecord, UInteger> TIME_TO_NEW_RANK = createField(DSL.name("time_to_new_rank"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Time in seconds member took to receive this rank");

    private CorePointsLog(Name alias, Table<CorePointsLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePointsLog(Name alias, Table<CorePointsLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_points_log</code> table
     * reference
     */
    public CorePointsLog(String alias) {
        this(DSL.name(alias), CORE_POINTS_LOG);
    }

    /**
     * Create an aliased <code>paradise_forums.core_points_log</code> table
     * reference
     */
    public CorePointsLog(Name alias) {
        this(alias, CORE_POINTS_LOG);
    }

    /**
     * Create a <code>paradise_forums.core_points_log</code> table reference
     */
    public CorePointsLog() {
        this(DSL.name("core_points_log"), null);
    }

    public <O extends Record> CorePointsLog(Table<O> child, ForeignKey<O, CorePointsLogRecord> key) {
        super(child, key, CORE_POINTS_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_POINTS_LOG_DATETIME, Indexes.CORE_POINTS_LOG_LIST, Indexes.CORE_POINTS_LOG_LIST_NEW_RANKS);
    }

    @Override
    public Identity<CorePointsLogRecord, ULong> getIdentity() {
        return (Identity<CorePointsLogRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorePointsLogRecord> getPrimaryKey() {
        return Keys.KEY_CORE_POINTS_LOG_PRIMARY;
    }

    @Override
    public CorePointsLog as(String alias) {
        return new CorePointsLog(DSL.name(alias), this);
    }

    @Override
    public CorePointsLog as(Name alias) {
        return new CorePointsLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePointsLog rename(String name) {
        return new CorePointsLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePointsLog rename(Name name) {
        return new CorePointsLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, Integer, UInteger, UInteger, String, ULong, String, ULong, UInteger, UInteger> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
