/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreGeoipCache;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Caches GeoIP data to prevent multiple remote calls
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreGeoipCacheRecord extends UpdatableRecordImpl<CoreGeoipCacheRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_geoip_cache.ip_address</code>. The
     * IP address
     */
    public void setIpAddress(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_geoip_cache.ip_address</code>. The
     * IP address
     */
    public String getIpAddress() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_geoip_cache.data</code>. The
     * JSON-encoded data returned by the service
     */
    public void setData(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_geoip_cache.data</code>. The
     * JSON-encoded data returned by the service
     */
    public String getData() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_geoip_cache.date</code>. Unix
     * timestamp of when the data was retrieved 
     */
    public void setDate(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_geoip_cache.date</code>. Unix
     * timestamp of when the data was retrieved 
     */
    public Integer getDate() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreGeoipCache.CORE_GEOIP_CACHE.IP_ADDRESS;
    }

    @Override
    public Field<String> field2() {
        return CoreGeoipCache.CORE_GEOIP_CACHE.DATA;
    }

    @Override
    public Field<Integer> field3() {
        return CoreGeoipCache.CORE_GEOIP_CACHE.DATE;
    }

    @Override
    public String component1() {
        return getIpAddress();
    }

    @Override
    public String component2() {
        return getData();
    }

    @Override
    public Integer component3() {
        return getDate();
    }

    @Override
    public String value1() {
        return getIpAddress();
    }

    @Override
    public String value2() {
        return getData();
    }

    @Override
    public Integer value3() {
        return getDate();
    }

    @Override
    public CoreGeoipCacheRecord value1(String value) {
        setIpAddress(value);
        return this;
    }

    @Override
    public CoreGeoipCacheRecord value2(String value) {
        setData(value);
        return this;
    }

    @Override
    public CoreGeoipCacheRecord value3(Integer value) {
        setDate(value);
        return this;
    }

    @Override
    public CoreGeoipCacheRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreGeoipCacheRecord
     */
    public CoreGeoipCacheRecord() {
        super(CoreGeoipCache.CORE_GEOIP_CACHE);
    }

    /**
     * Create a detached, initialised CoreGeoipCacheRecord
     */
    public CoreGeoipCacheRecord(String ipAddress, String data, Integer date) {
        super(CoreGeoipCache.CORE_GEOIP_CACHE);

        setIpAddress(ipAddress);
        setData(data);
        setDate(date);
    }
}
