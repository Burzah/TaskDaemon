/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreApprovalQueue;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApprovalQueueRecord extends UpdatableRecordImpl<CoreApprovalQueueRecord> implements Record5<ULong, String, byte[], String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_approval_queue.approval_id</code>.
     * ID Number
     */
    public void setApprovalId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_approval_queue.approval_id</code>.
     * ID Number
     */
    public ULong getApprovalId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_approval_queue.approval_held_reason</code>.
     */
    public void setApprovalHeldReason(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_approval_queue.approval_held_reason</code>.
     */
    public String getApprovalHeldReason() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_approval_queue.approval_held_data</code>.
     */
    public void setApprovalHeldData(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_approval_queue.approval_held_data</code>.
     */
    public byte[] getApprovalHeldData() {
        return (byte[]) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_approval_queue.approval_content_class</code>.
     */
    public void setApprovalContentClass(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_approval_queue.approval_content_class</code>.
     */
    public String getApprovalContentClass() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_approval_queue.approval_content_id</code>.
     */
    public void setApprovalContentId(Long value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_approval_queue.approval_content_id</code>.
     */
    public Long getApprovalContentId() {
        return (Long) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, byte[], String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<ULong, String, byte[], String, Long> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreApprovalQueue.CORE_APPROVAL_QUEUE.APPROVAL_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreApprovalQueue.CORE_APPROVAL_QUEUE.APPROVAL_HELD_REASON;
    }

    @Override
    public Field<byte[]> field3() {
        return CoreApprovalQueue.CORE_APPROVAL_QUEUE.APPROVAL_HELD_DATA;
    }

    @Override
    public Field<String> field4() {
        return CoreApprovalQueue.CORE_APPROVAL_QUEUE.APPROVAL_CONTENT_CLASS;
    }

    @Override
    public Field<Long> field5() {
        return CoreApprovalQueue.CORE_APPROVAL_QUEUE.APPROVAL_CONTENT_ID;
    }

    @Override
    public ULong component1() {
        return getApprovalId();
    }

    @Override
    public String component2() {
        return getApprovalHeldReason();
    }

    @Override
    public byte[] component3() {
        return getApprovalHeldData();
    }

    @Override
    public String component4() {
        return getApprovalContentClass();
    }

    @Override
    public Long component5() {
        return getApprovalContentId();
    }

    @Override
    public ULong value1() {
        return getApprovalId();
    }

    @Override
    public String value2() {
        return getApprovalHeldReason();
    }

    @Override
    public byte[] value3() {
        return getApprovalHeldData();
    }

    @Override
    public String value4() {
        return getApprovalContentClass();
    }

    @Override
    public Long value5() {
        return getApprovalContentId();
    }

    @Override
    public CoreApprovalQueueRecord value1(ULong value) {
        setApprovalId(value);
        return this;
    }

    @Override
    public CoreApprovalQueueRecord value2(String value) {
        setApprovalHeldReason(value);
        return this;
    }

    @Override
    public CoreApprovalQueueRecord value3(byte[] value) {
        setApprovalHeldData(value);
        return this;
    }

    @Override
    public CoreApprovalQueueRecord value4(String value) {
        setApprovalContentClass(value);
        return this;
    }

    @Override
    public CoreApprovalQueueRecord value5(Long value) {
        setApprovalContentId(value);
        return this;
    }

    @Override
    public CoreApprovalQueueRecord values(ULong value1, String value2, byte[] value3, String value4, Long value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreApprovalQueueRecord
     */
    public CoreApprovalQueueRecord() {
        super(CoreApprovalQueue.CORE_APPROVAL_QUEUE);
    }

    /**
     * Create a detached, initialised CoreApprovalQueueRecord
     */
    public CoreApprovalQueueRecord(ULong approvalId, String approvalHeldReason, byte[] approvalHeldData, String approvalContentClass, Long approvalContentId) {
        super(CoreApprovalQueue.CORE_APPROVAL_QUEUE);

        setApprovalId(approvalId);
        setApprovalHeldReason(approvalHeldReason);
        setApprovalHeldData(approvalHeldData);
        setApprovalContentClass(approvalContentClass);
        setApprovalContentId(approvalContentId);
    }
}
