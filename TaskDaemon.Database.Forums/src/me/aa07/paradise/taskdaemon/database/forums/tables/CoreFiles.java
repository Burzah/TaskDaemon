/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreFilesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFiles extends TableImpl<CoreFilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_files</code>
     */
    public static final CoreFiles CORE_FILES = new CoreFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreFilesRecord> getRecordType() {
        return CoreFilesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_files.id</code>. ID Number
     */
    public final TableField<CoreFilesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_files.filename</code>. Filename
     */
    public final TableField<CoreFilesRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Filename");

    /**
     * The column <code>paradise_forums.core_files.salt</code>.
     */
    public final TableField<CoreFilesRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.CHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_files.contents</code>. Raw file
     * contents
     */
    public final TableField<CoreFilesRecord, byte[]> CONTENTS = createField(DSL.name("contents"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "Raw file contents");

    /**
     * The column <code>paradise_forums.core_files.container</code>.
     */
    public final TableField<CoreFilesRecord, String> CONTAINER = createField(DSL.name("container"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private CoreFiles(Name alias, Table<CoreFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreFiles(Name alias, Table<CoreFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_files</code> table reference
     */
    public CoreFiles(String alias) {
        this(DSL.name(alias), CORE_FILES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_files</code> table reference
     */
    public CoreFiles(Name alias) {
        this(alias, CORE_FILES);
    }

    /**
     * Create a <code>paradise_forums.core_files</code> table reference
     */
    public CoreFiles() {
        this(DSL.name("core_files"), null);
    }

    public <O extends Record> CoreFiles(Table<O> child, ForeignKey<O, CoreFilesRecord> key) {
        super(child, key, CORE_FILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_FILES_FILE);
    }

    @Override
    public Identity<CoreFilesRecord, ULong> getIdentity() {
        return (Identity<CoreFilesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreFilesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_FILES_PRIMARY;
    }

    @Override
    public CoreFiles as(String alias) {
        return new CoreFiles(DSL.name(alias), this);
    }

    @Override
    public CoreFiles as(Name alias) {
        return new CoreFiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFiles rename(String name) {
        return new CoreFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFiles rename(Name name) {
        return new CoreFiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, String, byte[], String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
