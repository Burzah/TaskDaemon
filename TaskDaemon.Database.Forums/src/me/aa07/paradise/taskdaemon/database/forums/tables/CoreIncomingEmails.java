/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreIncomingEmailsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This table is used to store the incoming email routing rules
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreIncomingEmails extends TableImpl<CoreIncomingEmailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_incoming_emails</code>
     */
    public static final CoreIncomingEmails CORE_INCOMING_EMAILS = new CoreIncomingEmails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreIncomingEmailsRecord> getRecordType() {
        return CoreIncomingEmailsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_incoming_emails.rule_id</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, Integer> RULE_ID = createField(DSL.name("rule_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>paradise_forums.core_incoming_emails.rule_criteria_field</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, String> RULE_CRITERIA_FIELD = createField(DSL.name("rule_criteria_field"), SQLDataType.VARCHAR(4).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_incoming_emails.rule_criteria_type</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, String> RULE_CRITERIA_TYPE = createField(DSL.name("rule_criteria_type"), SQLDataType.VARCHAR(4).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_incoming_emails.rule_criteria_value</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, String> RULE_CRITERIA_VALUE = createField(DSL.name("rule_criteria_value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_incoming_emails.rule_app</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, String> RULE_APP = createField(DSL.name("rule_app"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_incoming_emails.rule_added_by</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, ULong> RULE_ADDED_BY = createField(DSL.name("rule_added_by"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_incoming_emails.rule_added_date</code>.
     */
    public final TableField<CoreIncomingEmailsRecord, Integer> RULE_ADDED_DATE = createField(DSL.name("rule_added_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private CoreIncomingEmails(Name alias, Table<CoreIncomingEmailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreIncomingEmails(Name alias, Table<CoreIncomingEmailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table is used to store the incoming email routing rules"), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_incoming_emails</code> table
     * reference
     */
    public CoreIncomingEmails(String alias) {
        this(DSL.name(alias), CORE_INCOMING_EMAILS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_incoming_emails</code> table
     * reference
     */
    public CoreIncomingEmails(Name alias) {
        this(alias, CORE_INCOMING_EMAILS);
    }

    /**
     * Create a <code>paradise_forums.core_incoming_emails</code> table
     * reference
     */
    public CoreIncomingEmails() {
        this(DSL.name("core_incoming_emails"), null);
    }

    public <O extends Record> CoreIncomingEmails(Table<O> child, ForeignKey<O, CoreIncomingEmailsRecord> key) {
        super(child, key, CORE_INCOMING_EMAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_INCOMING_EMAILS_MEMBER);
    }

    @Override
    public Identity<CoreIncomingEmailsRecord, Integer> getIdentity() {
        return (Identity<CoreIncomingEmailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreIncomingEmailsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_INCOMING_EMAILS_PRIMARY;
    }

    @Override
    public CoreIncomingEmails as(String alias) {
        return new CoreIncomingEmails(DSL.name(alias), this);
    }

    @Override
    public CoreIncomingEmails as(Name alias) {
        return new CoreIncomingEmails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreIncomingEmails rename(String name) {
        return new CoreIncomingEmails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreIncomingEmails rename(Name name) {
        return new CoreIncomingEmails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, ULong, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
