/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreMemberHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreMemberHistory extends TableImpl<CoreMemberHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_member_history</code>
     */
    public static final CoreMemberHistory CORE_MEMBER_HISTORY = new CoreMemberHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreMemberHistoryRecord> getRecordType() {
        return CoreMemberHistoryRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_member_history.log_id</code>. ID
     * Number
     */
    public final TableField<CoreMemberHistoryRecord, ULong> LOG_ID = createField(DSL.name("log_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_member_history.log_app</code>.
     * Application
     */
    public final TableField<CoreMemberHistoryRecord, String> LOG_APP = createField(DSL.name("log_app"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Application");

    /**
     * The column <code>paradise_forums.core_member_history.log_member</code>.
     * Member ID
     */
    public final TableField<CoreMemberHistoryRecord, ULong> LOG_MEMBER = createField(DSL.name("log_member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "Member ID");

    /**
     * The column <code>paradise_forums.core_member_history.log_by</code>.
     * Action performed by
     */
    public final TableField<CoreMemberHistoryRecord, ULong> LOG_BY = createField(DSL.name("log_by"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "Action performed by");

    /**
     * The column <code>paradise_forums.core_member_history.log_type</code>. Log
     * Type
     */
    public final TableField<CoreMemberHistoryRecord, String> LOG_TYPE = createField(DSL.name("log_type"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Log Type");

    /**
     * The column <code>paradise_forums.core_member_history.log_data</code>.
     */
    public final TableField<CoreMemberHistoryRecord, String> LOG_DATA = createField(DSL.name("log_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_member_history.log_date</code>.
     */
    public final TableField<CoreMemberHistoryRecord, BigDecimal> LOG_DATE = createField(DSL.name("log_date"), SQLDataType.DECIMAL(12, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_member_history.log_ip_address</code>.
     */
    public final TableField<CoreMemberHistoryRecord, String> LOG_IP_ADDRESS = createField(DSL.name("log_ip_address"), SQLDataType.VARCHAR(46).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private CoreMemberHistory(Name alias, Table<CoreMemberHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreMemberHistory(Name alias, Table<CoreMemberHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_member_history</code> table
     * reference
     */
    public CoreMemberHistory(String alias) {
        this(DSL.name(alias), CORE_MEMBER_HISTORY);
    }

    /**
     * Create an aliased <code>paradise_forums.core_member_history</code> table
     * reference
     */
    public CoreMemberHistory(Name alias) {
        this(alias, CORE_MEMBER_HISTORY);
    }

    /**
     * Create a <code>paradise_forums.core_member_history</code> table reference
     */
    public CoreMemberHistory() {
        this(DSL.name("core_member_history"), null);
    }

    public <O extends Record> CoreMemberHistory(Table<O> child, ForeignKey<O, CoreMemberHistoryRecord> key) {
        super(child, key, CORE_MEMBER_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_MEMBER_HISTORY_APPLICATION, Indexes.CORE_MEMBER_HISTORY_LOG_BY, Indexes.CORE_MEMBER_HISTORY_LOG_DATA, Indexes.CORE_MEMBER_HISTORY_LOG_DATE, Indexes.CORE_MEMBER_HISTORY_LOG_IP_ADDRESS, Indexes.CORE_MEMBER_HISTORY_LOG_MEMBER);
    }

    @Override
    public Identity<CoreMemberHistoryRecord, ULong> getIdentity() {
        return (Identity<CoreMemberHistoryRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreMemberHistoryRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MEMBER_HISTORY_PRIMARY;
    }

    @Override
    public CoreMemberHistory as(String alias) {
        return new CoreMemberHistory(DSL.name(alias), this);
    }

    @Override
    public CoreMemberHistory as(Name alias) {
        return new CoreMemberHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMemberHistory rename(String name) {
        return new CoreMemberHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMemberHistory rename(Name name) {
        return new CoreMemberHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, ULong, ULong, String, String, BigDecimal, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
