/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreSysLangWordsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSysLangWords extends TableImpl<CoreSysLangWordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_sys_lang_words</code>
     */
    public static final CoreSysLangWords CORE_SYS_LANG_WORDS = new CoreSysLangWords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreSysLangWordsRecord> getRecordType() {
        return CoreSysLangWordsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_id</code>. UID
     */
    public final TableField<CoreSysLangWordsRecord, UInteger> WORD_ID = createField(DSL.name("word_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "UID");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.lang_id</code>. The
     * ID number for the language
     */
    public final TableField<CoreSysLangWordsRecord, UInteger> LANG_ID = createField(DSL.name("lang_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The ID number for the language");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_app</code>. The
     * application key, if word belongs to an application
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_APP = createField(DSL.name("word_app"), SQLDataType.VARCHAR(80).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The application key, if word belongs to an application");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_plugin</code>.
     * The plugin ID, if word belongs to a plugin
     */
    public final TableField<CoreSysLangWordsRecord, Long> WORD_PLUGIN = createField(DSL.name("word_plugin"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "The plugin ID, if word belongs to a plugin");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_theme</code>.
     * The theme ID, if the language string belongs to a theme.
     */
    public final TableField<CoreSysLangWordsRecord, Integer> WORD_THEME = createField(DSL.name("word_theme"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "The theme ID, if the language string belongs to a theme.");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_key</code>. The
     * key
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_KEY = createField(DSL.name("word_key"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The key");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_default</code>.
     * The default value
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_DEFAULT = createField(DSL.name("word_default"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The default value");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_custom</code>.
     * The current value
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_CUSTOM = createField(DSL.name("word_custom"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The current value");

    /**
     * The column
     * <code>paradise_forums.core_sys_lang_words.word_default_version</code>.
     * The application/plugin version the word was last changed in
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_DEFAULT_VERSION = createField(DSL.name("word_default_version"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The application/plugin version the word was last changed in");

    /**
     * The column
     * <code>paradise_forums.core_sys_lang_words.word_custom_version</code>. The
     * application/plugin version installed when this word was customised
     */
    public final TableField<CoreSysLangWordsRecord, String> WORD_CUSTOM_VERSION = createField(DSL.name("word_custom_version"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The application/plugin version installed when this word was customised");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_js</code>.
     * Binary if this word should be available to JavaScript
     */
    public final TableField<CoreSysLangWordsRecord, UByte> WORD_JS = createField(DSL.name("word_js"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Binary if this word should be available to JavaScript");

    /**
     * The column <code>paradise_forums.core_sys_lang_words.word_export</code>.
     * Binary if this word should be exported (i.e. is not a forum/etc name)
     */
    public final TableField<CoreSysLangWordsRecord, UByte> WORD_EXPORT = createField(DSL.name("word_export"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Binary if this word should be exported (i.e. is not a forum/etc name)");

    /**
     * The column
     * <code>paradise_forums.core_sys_lang_words.word_is_custom</code>. Word is
     * custom to the site?
     */
    public final TableField<CoreSysLangWordsRecord, Boolean> WORD_IS_CUSTOM = createField(DSL.name("word_is_custom"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "Word is custom to the site?");

    private CoreSysLangWords(Name alias, Table<CoreSysLangWordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreSysLangWords(Name alias, Table<CoreSysLangWordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_sys_lang_words</code> table
     * reference
     */
    public CoreSysLangWords(String alias) {
        this(DSL.name(alias), CORE_SYS_LANG_WORDS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_sys_lang_words</code> table
     * reference
     */
    public CoreSysLangWords(Name alias) {
        this(alias, CORE_SYS_LANG_WORDS);
    }

    /**
     * Create a <code>paradise_forums.core_sys_lang_words</code> table reference
     */
    public CoreSysLangWords() {
        this(DSL.name("core_sys_lang_words"), null);
    }

    public <O extends Record> CoreSysLangWords(Table<O> child, ForeignKey<O, CoreSysLangWordsRecord> key) {
        super(child, key, CORE_SYS_LANG_WORDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_SYS_LANG_WORDS_WORD_FIND, Indexes.CORE_SYS_LANG_WORDS_WORD_IS_CUSTOM, Indexes.CORE_SYS_LANG_WORDS_WORD_JS);
    }

    @Override
    public Identity<CoreSysLangWordsRecord, UInteger> getIdentity() {
        return (Identity<CoreSysLangWordsRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreSysLangWordsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_SYS_LANG_WORDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreSysLangWordsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_SYS_LANG_WORDS_WORD_KEY);
    }

    @Override
    public CoreSysLangWords as(String alias) {
        return new CoreSysLangWords(DSL.name(alias), this);
    }

    @Override
    public CoreSysLangWords as(Name alias) {
        return new CoreSysLangWords(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSysLangWords rename(String name) {
        return new CoreSysLangWords(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSysLangWords rename(Name name) {
        return new CoreSysLangWords(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UInteger, UInteger, String, Long, Integer, String, String, String, String, String, UByte, UByte, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
