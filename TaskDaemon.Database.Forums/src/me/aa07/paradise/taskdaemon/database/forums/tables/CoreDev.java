/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreDevRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * IN_DEV only. Store when the database schema was last synced.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreDev extends TableImpl<CoreDevRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_dev</code>
     */
    public static final CoreDev CORE_DEV = new CoreDev();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreDevRecord> getRecordType() {
        return CoreDevRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_dev.app_key</code>. Application key
     */
    public final TableField<CoreDevRecord, String> APP_KEY = createField(DSL.name("app_key"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Application key");

    /**
     * The column <code>paradise_forums.core_dev.working_version</code>. The
     * version ID being worked on, which can be the string 'working'
     */
    public final TableField<CoreDevRecord, String> WORKING_VERSION = createField(DSL.name("working_version"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("'10000'", SQLDataType.VARCHAR)), this, "The version ID being worked on, which can be the string 'working'");

    /**
     * The column <code>paradise_forums.core_dev.last_sync</code>. Timestamp of
     * last sync
     */
    public final TableField<CoreDevRecord, UInteger> LAST_SYNC = createField(DSL.name("last_sync"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Timestamp of last sync");

    /**
     * The column <code>paradise_forums.core_dev.ran</code>. JSON array of
     * queries ran
     */
    public final TableField<CoreDevRecord, String> RAN = createField(DSL.name("ran"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON array of queries ran");

    private CoreDev(Name alias, Table<CoreDevRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreDev(Name alias, Table<CoreDevRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("IN_DEV only. Store when the database schema was last synced."), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_dev</code> table reference
     */
    public CoreDev(String alias) {
        this(DSL.name(alias), CORE_DEV);
    }

    /**
     * Create an aliased <code>paradise_forums.core_dev</code> table reference
     */
    public CoreDev(Name alias) {
        this(alias, CORE_DEV);
    }

    /**
     * Create a <code>paradise_forums.core_dev</code> table reference
     */
    public CoreDev() {
        this(DSL.name("core_dev"), null);
    }

    public <O extends Record> CoreDev(Table<O> child, ForeignKey<O, CoreDevRecord> key) {
        super(child, key, CORE_DEV);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreDevRecord> getPrimaryKey() {
        return Keys.KEY_CORE_DEV_PRIMARY;
    }

    @Override
    public CoreDev as(String alias) {
        return new CoreDev(DSL.name(alias), this);
    }

    @Override
    public CoreDev as(Name alias) {
        return new CoreDev(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDev rename(String name) {
        return new CoreDev(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreDev rename(Name name) {
        return new CoreDev(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, UInteger, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
