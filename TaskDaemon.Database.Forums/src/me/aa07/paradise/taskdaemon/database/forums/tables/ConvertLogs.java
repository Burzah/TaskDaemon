/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.ConvertLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConvertLogs extends TableImpl<ConvertLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.convert_logs</code>
     */
    public static final ConvertLogs CONVERT_LOGS = new ConvertLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConvertLogsRecord> getRecordType() {
        return ConvertLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.convert_logs.log_id</code>. ID Number
     */
    public final TableField<ConvertLogsRecord, ULong> LOG_ID = createField(DSL.name("log_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.convert_logs.log_message</code>. Log
     * Message
     */
    public final TableField<ConvertLogsRecord, String> LOG_MESSAGE = createField(DSL.name("log_message"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Log Message");

    /**
     * The column <code>paradise_forums.convert_logs.log_app</code>. The
     * conversion app.
     */
    public final TableField<ConvertLogsRecord, Long> LOG_APP = createField(DSL.name("log_app"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "The conversion app.");

    /**
     * The column <code>paradise_forums.convert_logs.log_method</code>.
     * Conversion step that triggered this log
     */
    public final TableField<ConvertLogsRecord, String> LOG_METHOD = createField(DSL.name("log_method"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Conversion step that triggered this log");

    /**
     * The column <code>paradise_forums.convert_logs.log_severity</code>. Flag
     * to indicate the type of log (notice, warning, error)
     */
    public final TableField<ConvertLogsRecord, Byte> LOG_SEVERITY = createField(DSL.name("log_severity"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Flag to indicate the type of log (notice, warning, error)");

    /**
     * The column <code>paradise_forums.convert_logs.log_item_id</code>.
     */
    public final TableField<ConvertLogsRecord, String> LOG_ITEM_ID = createField(DSL.name("log_item_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.convert_logs.log_time</code>.
     */
    public final TableField<ConvertLogsRecord, Integer> LOG_TIME = createField(DSL.name("log_time"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private ConvertLogs(Name alias, Table<ConvertLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConvertLogs(Name alias, Table<ConvertLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.convert_logs</code> table
     * reference
     */
    public ConvertLogs(String alias) {
        this(DSL.name(alias), CONVERT_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.convert_logs</code> table
     * reference
     */
    public ConvertLogs(Name alias) {
        this(alias, CONVERT_LOGS);
    }

    /**
     * Create a <code>paradise_forums.convert_logs</code> table reference
     */
    public ConvertLogs() {
        this(DSL.name("convert_logs"), null);
    }

    public <O extends Record> ConvertLogs(Table<O> child, ForeignKey<O, ConvertLogsRecord> key) {
        super(child, key, CONVERT_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONVERT_LOGS_LOG_APP);
    }

    @Override
    public Identity<ConvertLogsRecord, ULong> getIdentity() {
        return (Identity<ConvertLogsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConvertLogsRecord> getPrimaryKey() {
        return Keys.KEY_CONVERT_LOGS_PRIMARY;
    }

    @Override
    public ConvertLogs as(String alias) {
        return new ConvertLogs(DSL.name(alias), this);
    }

    @Override
    public ConvertLogs as(Name alias) {
        return new ConvertLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConvertLogs rename(String name) {
        return new ConvertLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConvertLogs rename(Name name) {
        return new ConvertLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, Long, String, Byte, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
