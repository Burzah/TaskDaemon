/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreSecurityQuestions;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSecurityQuestionsRecord extends UpdatableRecordImpl<CoreSecurityQuestionsRecord> implements Record2<ULong, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>paradise_forums.core_security_questions.question_id</code>. ID
     * Number
     */
    public void setQuestionId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_security_questions.question_id</code>. ID
     * Number
     */
    public ULong getQuestionId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_security_questions.question_order</code>.
     * Index for ordering questions
     */
    public void setQuestionOrder(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_security_questions.question_order</code>.
     * Index for ordering questions
     */
    public Integer getQuestionOrder() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<ULong, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreSecurityQuestions.CORE_SECURITY_QUESTIONS.QUESTION_ID;
    }

    @Override
    public Field<Integer> field2() {
        return CoreSecurityQuestions.CORE_SECURITY_QUESTIONS.QUESTION_ORDER;
    }

    @Override
    public ULong component1() {
        return getQuestionId();
    }

    @Override
    public Integer component2() {
        return getQuestionOrder();
    }

    @Override
    public ULong value1() {
        return getQuestionId();
    }

    @Override
    public Integer value2() {
        return getQuestionOrder();
    }

    @Override
    public CoreSecurityQuestionsRecord value1(ULong value) {
        setQuestionId(value);
        return this;
    }

    @Override
    public CoreSecurityQuestionsRecord value2(Integer value) {
        setQuestionOrder(value);
        return this;
    }

    @Override
    public CoreSecurityQuestionsRecord values(ULong value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreSecurityQuestionsRecord
     */
    public CoreSecurityQuestionsRecord() {
        super(CoreSecurityQuestions.CORE_SECURITY_QUESTIONS);
    }

    /**
     * Create a detached, initialised CoreSecurityQuestionsRecord
     */
    public CoreSecurityQuestionsRecord(ULong questionId, Integer questionOrder) {
        super(CoreSecurityQuestions.CORE_SECURITY_QUESTIONS);

        setQuestionId(questionId);
        setQuestionOrder(questionOrder);
    }
}
