/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreOutputCache;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOutputCacheRecord extends UpdatableRecordImpl<CoreOutputCacheRecord> implements Record4<String, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_output_cache.cache_key</code>. The
     * key
     */
    public void setCacheKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_output_cache.cache_key</code>. The
     * key
     */
    public String getCacheKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_output_cache.cache_value</code>.
     * The output HTML
     */
    public void setCacheValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_output_cache.cache_value</code>.
     * The output HTML
     */
    public String getCacheValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_output_cache.cache_meta</code>.
     * JSON headers and meta data
     */
    public void setCacheMeta(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_output_cache.cache_meta</code>.
     * JSON headers and meta data
     */
    public String getCacheMeta() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_output_cache.cache_expire</code>.
     * Unix timestamp of when the cache expires
     */
    public void setCacheExpire(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_output_cache.cache_expire</code>.
     * Unix timestamp of when the cache expires
     */
    public Integer getCacheExpire() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreOutputCache.CORE_OUTPUT_CACHE.CACHE_KEY;
    }

    @Override
    public Field<String> field2() {
        return CoreOutputCache.CORE_OUTPUT_CACHE.CACHE_VALUE;
    }

    @Override
    public Field<String> field3() {
        return CoreOutputCache.CORE_OUTPUT_CACHE.CACHE_META;
    }

    @Override
    public Field<Integer> field4() {
        return CoreOutputCache.CORE_OUTPUT_CACHE.CACHE_EXPIRE;
    }

    @Override
    public String component1() {
        return getCacheKey();
    }

    @Override
    public String component2() {
        return getCacheValue();
    }

    @Override
    public String component3() {
        return getCacheMeta();
    }

    @Override
    public Integer component4() {
        return getCacheExpire();
    }

    @Override
    public String value1() {
        return getCacheKey();
    }

    @Override
    public String value2() {
        return getCacheValue();
    }

    @Override
    public String value3() {
        return getCacheMeta();
    }

    @Override
    public Integer value4() {
        return getCacheExpire();
    }

    @Override
    public CoreOutputCacheRecord value1(String value) {
        setCacheKey(value);
        return this;
    }

    @Override
    public CoreOutputCacheRecord value2(String value) {
        setCacheValue(value);
        return this;
    }

    @Override
    public CoreOutputCacheRecord value3(String value) {
        setCacheMeta(value);
        return this;
    }

    @Override
    public CoreOutputCacheRecord value4(Integer value) {
        setCacheExpire(value);
        return this;
    }

    @Override
    public CoreOutputCacheRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreOutputCacheRecord
     */
    public CoreOutputCacheRecord() {
        super(CoreOutputCache.CORE_OUTPUT_CACHE);
    }

    /**
     * Create a detached, initialised CoreOutputCacheRecord
     */
    public CoreOutputCacheRecord(String cacheKey, String cacheValue, String cacheMeta, Integer cacheExpire) {
        super(CoreOutputCache.CORE_OUTPUT_CACHE);

        setCacheKey(cacheKey);
        setCacheValue(cacheValue);
        setCacheMeta(cacheMeta);
        setCacheExpire(cacheExpire);
    }
}
