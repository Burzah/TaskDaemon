/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.BrilliantdiscordXinvitesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BrilliantdiscordXinvites extends TableImpl<BrilliantdiscordXinvitesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.brilliantdiscord_xinvites</code>
     */
    public static final BrilliantdiscordXinvites BRILLIANTDISCORD_XINVITES = new BrilliantdiscordXinvites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrilliantdiscordXinvitesRecord> getRecordType() {
        return BrilliantdiscordXinvitesRecord.class;
    }

    /**
     * The column <code>paradise_forums.brilliantdiscord_xinvites.id</code>.
     */
    public final TableField<BrilliantdiscordXinvitesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.brilliantdiscord_xinvites.code</code>.
     */
    public final TableField<BrilliantdiscordXinvitesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.brilliantdiscord_xinvites.position</code>.
     */
    public final TableField<BrilliantdiscordXinvitesRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.brilliantdiscord_xinvites.expiration</code>.
     */
    public final TableField<BrilliantdiscordXinvitesRecord, Integer> EXPIRATION = createField(DSL.name("expiration"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("-1", SQLDataType.INTEGER)), this, "");

    private BrilliantdiscordXinvites(Name alias, Table<BrilliantdiscordXinvitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BrilliantdiscordXinvites(Name alias, Table<BrilliantdiscordXinvitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_xinvites</code>
     * table reference
     */
    public BrilliantdiscordXinvites(String alias) {
        this(DSL.name(alias), BRILLIANTDISCORD_XINVITES);
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_xinvites</code>
     * table reference
     */
    public BrilliantdiscordXinvites(Name alias) {
        this(alias, BRILLIANTDISCORD_XINVITES);
    }

    /**
     * Create a <code>paradise_forums.brilliantdiscord_xinvites</code> table
     * reference
     */
    public BrilliantdiscordXinvites() {
        this(DSL.name("brilliantdiscord_xinvites"), null);
    }

    public <O extends Record> BrilliantdiscordXinvites(Table<O> child, ForeignKey<O, BrilliantdiscordXinvitesRecord> key) {
        super(child, key, BRILLIANTDISCORD_XINVITES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<BrilliantdiscordXinvitesRecord, ULong> getIdentity() {
        return (Identity<BrilliantdiscordXinvitesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BrilliantdiscordXinvitesRecord> getPrimaryKey() {
        return Keys.KEY_BRILLIANTDISCORD_XINVITES_PRIMARY;
    }

    @Override
    public List<UniqueKey<BrilliantdiscordXinvitesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BRILLIANTDISCORD_XINVITES_CODE);
    }

    @Override
    public BrilliantdiscordXinvites as(String alias) {
        return new BrilliantdiscordXinvites(DSL.name(alias), this);
    }

    @Override
    public BrilliantdiscordXinvites as(Name alias) {
        return new BrilliantdiscordXinvites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordXinvites rename(String name) {
        return new BrilliantdiscordXinvites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordXinvites rename(Name name) {
        return new BrilliantdiscordXinvites(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
