/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreItemMemberMapRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreItemMemberMap extends TableImpl<CoreItemMemberMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_item_member_map</code>
     */
    public static final CoreItemMemberMap CORE_ITEM_MEMBER_MAP = new CoreItemMemberMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreItemMemberMapRecord> getRecordType() {
        return CoreItemMemberMapRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_item_member_map.map_class</code>.
     */
    public final TableField<CoreItemMemberMapRecord, String> MAP_CLASS = createField(DSL.name("map_class"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_item_member_map.map_item_id</code>.
     */
    public final TableField<CoreItemMemberMapRecord, Integer> MAP_ITEM_ID = createField(DSL.name("map_item_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_member_map.map_member_id</code>.
     */
    public final TableField<CoreItemMemberMapRecord, Integer> MAP_MEMBER_ID = createField(DSL.name("map_member_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_member_map.map_latest_date</code>.
     */
    public final TableField<CoreItemMemberMapRecord, UInteger> MAP_LATEST_DATE = createField(DSL.name("map_latest_date"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "");

    private CoreItemMemberMap(Name alias, Table<CoreItemMemberMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreItemMemberMap(Name alias, Table<CoreItemMemberMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_item_member_map</code> table
     * reference
     */
    public CoreItemMemberMap(String alias) {
        this(DSL.name(alias), CORE_ITEM_MEMBER_MAP);
    }

    /**
     * Create an aliased <code>paradise_forums.core_item_member_map</code> table
     * reference
     */
    public CoreItemMemberMap(Name alias) {
        this(alias, CORE_ITEM_MEMBER_MAP);
    }

    /**
     * Create a <code>paradise_forums.core_item_member_map</code> table
     * reference
     */
    public CoreItemMemberMap() {
        this(DSL.name("core_item_member_map"), null);
    }

    public <O extends Record> CoreItemMemberMap(Table<O> child, ForeignKey<O, CoreItemMemberMapRecord> key) {
        super(child, key, CORE_ITEM_MEMBER_MAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ITEM_MEMBER_MAP_MAP_LOOKUP, Indexes.CORE_ITEM_MEMBER_MAP_MAP_MEMBER_ID);
    }

    @Override
    public List<UniqueKey<CoreItemMemberMapRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_ITEM_MEMBER_MAP_MAP_UNIQUE);
    }

    @Override
    public CoreItemMemberMap as(String alias) {
        return new CoreItemMemberMap(DSL.name(alias), this);
    }

    @Override
    public CoreItemMemberMap as(Name alias) {
        return new CoreItemMemberMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreItemMemberMap rename(String name) {
        return new CoreItemMemberMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreItemMemberMap rename(Name name) {
        return new CoreItemMemberMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, Integer, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
