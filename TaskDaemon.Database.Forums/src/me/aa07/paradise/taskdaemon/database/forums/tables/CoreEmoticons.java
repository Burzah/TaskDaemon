/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreEmoticonsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreEmoticons extends TableImpl<CoreEmoticonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_emoticons</code>
     */
    public static final CoreEmoticons CORE_EMOTICONS = new CoreEmoticons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreEmoticonsRecord> getRecordType() {
        return CoreEmoticonsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_emoticons.id</code>.
     */
    public final TableField<CoreEmoticonsRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.typed</code>.
     */
    public final TableField<CoreEmoticonsRecord, String> TYPED = createField(DSL.name("typed"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.image</code>.
     */
    public final TableField<CoreEmoticonsRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.clickable</code>.
     */
    public final TableField<CoreEmoticonsRecord, Short> CLICKABLE = createField(DSL.name("clickable"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.emo_set</code>.
     */
    public final TableField<CoreEmoticonsRecord, String> EMO_SET = createField(DSL.name("emo_set"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("'default'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.emo_position</code>.
     */
    public final TableField<CoreEmoticonsRecord, Integer> EMO_POSITION = createField(DSL.name("emo_position"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.emo_set_position</code>.
     */
    public final TableField<CoreEmoticonsRecord, UInteger> EMO_SET_POSITION = createField(DSL.name("emo_set_position"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.image_2x</code>.
     */
    public final TableField<CoreEmoticonsRecord, String> IMAGE_2X = createField(DSL.name("image_2x"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.width</code>.
     */
    public final TableField<CoreEmoticonsRecord, Short> WIDTH = createField(DSL.name("width"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_forums.core_emoticons.height</code>.
     */
    public final TableField<CoreEmoticonsRecord, Short> HEIGHT = createField(DSL.name("height"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    private CoreEmoticons(Name alias, Table<CoreEmoticonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreEmoticons(Name alias, Table<CoreEmoticonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_emoticons</code> table
     * reference
     */
    public CoreEmoticons(String alias) {
        this(DSL.name(alias), CORE_EMOTICONS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_emoticons</code> table
     * reference
     */
    public CoreEmoticons(Name alias) {
        this(alias, CORE_EMOTICONS);
    }

    /**
     * Create a <code>paradise_forums.core_emoticons</code> table reference
     */
    public CoreEmoticons() {
        this(DSL.name("core_emoticons"), null);
    }

    public <O extends Record> CoreEmoticons(Table<O> child, ForeignKey<O, CoreEmoticonsRecord> key) {
        super(child, key, CORE_EMOTICONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_EMOTICONS_EMO_SET);
    }

    @Override
    public Identity<CoreEmoticonsRecord, Short> getIdentity() {
        return (Identity<CoreEmoticonsRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreEmoticonsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_EMOTICONS_PRIMARY;
    }

    @Override
    public CoreEmoticons as(String alias) {
        return new CoreEmoticons(DSL.name(alias), this);
    }

    @Override
    public CoreEmoticons as(Name alias) {
        return new CoreEmoticons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreEmoticons rename(String name) {
        return new CoreEmoticons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreEmoticons rename(Name name) {
        return new CoreEmoticons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Short, String, String, Short, String, Integer, UInteger, String, Short, Short> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
