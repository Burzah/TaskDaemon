/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreFiles;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFilesRecord extends UpdatableRecordImpl<CoreFilesRecord> implements Record5<ULong, String, String, byte[], String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_files.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_files.filename</code>. Filename
     */
    public void setFilename(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files.filename</code>. Filename
     */
    public String getFilename() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_files.salt</code>.
     */
    public void setSalt(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files.salt</code>.
     */
    public String getSalt() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_files.contents</code>. Raw file
     * contents
     */
    public void setContents(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files.contents</code>. Raw file
     * contents
     */
    public byte[] getContents() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_files.container</code>.
     */
    public void setContainer(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files.container</code>.
     */
    public String getContainer() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, String, byte[], String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<ULong, String, String, byte[], String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreFiles.CORE_FILES.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreFiles.CORE_FILES.FILENAME;
    }

    @Override
    public Field<String> field3() {
        return CoreFiles.CORE_FILES.SALT;
    }

    @Override
    public Field<byte[]> field4() {
        return CoreFiles.CORE_FILES.CONTENTS;
    }

    @Override
    public Field<String> field5() {
        return CoreFiles.CORE_FILES.CONTAINER;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFilename();
    }

    @Override
    public String component3() {
        return getSalt();
    }

    @Override
    public byte[] component4() {
        return getContents();
    }

    @Override
    public String component5() {
        return getContainer();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFilename();
    }

    @Override
    public String value3() {
        return getSalt();
    }

    @Override
    public byte[] value4() {
        return getContents();
    }

    @Override
    public String value5() {
        return getContainer();
    }

    @Override
    public CoreFilesRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreFilesRecord value2(String value) {
        setFilename(value);
        return this;
    }

    @Override
    public CoreFilesRecord value3(String value) {
        setSalt(value);
        return this;
    }

    @Override
    public CoreFilesRecord value4(byte[] value) {
        setContents(value);
        return this;
    }

    @Override
    public CoreFilesRecord value5(String value) {
        setContainer(value);
        return this;
    }

    @Override
    public CoreFilesRecord values(ULong value1, String value2, String value3, byte[] value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreFilesRecord
     */
    public CoreFilesRecord() {
        super(CoreFiles.CORE_FILES);
    }

    /**
     * Create a detached, initialised CoreFilesRecord
     */
    public CoreFilesRecord(ULong id, String filename, String salt, byte[] contents, String container) {
        super(CoreFiles.CORE_FILES);

        setId(id);
        setFilename(filename);
        setSalt(salt);
        setContents(contents);
        setContainer(container);
    }
}
