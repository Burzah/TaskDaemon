/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAcpSearchIndexRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAcpSearchIndex extends TableImpl<CoreAcpSearchIndexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_acp_search_index</code>
     */
    public static final CoreAcpSearchIndex CORE_ACP_SEARCH_INDEX = new CoreAcpSearchIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAcpSearchIndexRecord> getRecordType() {
        return CoreAcpSearchIndexRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_acp_search_index.url</code>. The
     * query string
     */
    public final TableField<CoreAcpSearchIndexRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The query string");

    /**
     * The column <code>paradise_forums.core_acp_search_index.keyword</code>.
     * The keyword
     */
    public final TableField<CoreAcpSearchIndexRecord, String> KEYWORD = createField(DSL.name("keyword"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The keyword");

    /**
     * The column <code>paradise_forums.core_acp_search_index.app</code>. The
     * application key
     */
    public final TableField<CoreAcpSearchIndexRecord, String> APP = createField(DSL.name("app"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The application key");

    /**
     * The column <code>paradise_forums.core_acp_search_index.lang_key</code>.
     * The language key to use for the result link
     */
    public final TableField<CoreAcpSearchIndexRecord, String> LANG_KEY = createField(DSL.name("lang_key"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The language key to use for the result link");

    /**
     * The column
     * <code>paradise_forums.core_acp_search_index.restriction</code>. If
     * applicable, the ACP restriction key that should be checked for this
     * result
     */
    public final TableField<CoreAcpSearchIndexRecord, String> RESTRICTION = createField(DSL.name("restriction"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "If applicable, the ACP restriction key that should be checked for this result");

    private CoreAcpSearchIndex(Name alias, Table<CoreAcpSearchIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAcpSearchIndex(Name alias, Table<CoreAcpSearchIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_search_index</code>
     * table reference
     */
    public CoreAcpSearchIndex(String alias) {
        this(DSL.name(alias), CORE_ACP_SEARCH_INDEX);
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_search_index</code>
     * table reference
     */
    public CoreAcpSearchIndex(Name alias) {
        this(alias, CORE_ACP_SEARCH_INDEX);
    }

    /**
     * Create a <code>paradise_forums.core_acp_search_index</code> table
     * reference
     */
    public CoreAcpSearchIndex() {
        this(DSL.name("core_acp_search_index"), null);
    }

    public <O extends Record> CoreAcpSearchIndex(Table<O> child, ForeignKey<O, CoreAcpSearchIndexRecord> key) {
        super(child, key, CORE_ACP_SEARCH_INDEX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ACP_SEARCH_INDEX_APP, Indexes.CORE_ACP_SEARCH_INDEX_KEYWORD);
    }

    @Override
    public CoreAcpSearchIndex as(String alias) {
        return new CoreAcpSearchIndex(DSL.name(alias), this);
    }

    @Override
    public CoreAcpSearchIndex as(Name alias) {
        return new CoreAcpSearchIndex(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpSearchIndex rename(String name) {
        return new CoreAcpSearchIndex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpSearchIndex rename(Name name) {
        return new CoreAcpSearchIndex(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
