/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.ConvertLogs;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConvertLogsRecord extends UpdatableRecordImpl<ConvertLogsRecord> implements Record7<ULong, String, Long, String, Byte, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.convert_logs.log_id</code>. ID Number
     */
    public void setLogId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_id</code>. ID Number
     */
    public ULong getLogId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_message</code>. Log
     * Message
     */
    public void setLogMessage(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_message</code>. Log
     * Message
     */
    public String getLogMessage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_app</code>. The
     * conversion app.
     */
    public void setLogApp(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_app</code>. The
     * conversion app.
     */
    public Long getLogApp() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_method</code>.
     * Conversion step that triggered this log
     */
    public void setLogMethod(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_method</code>.
     * Conversion step that triggered this log
     */
    public String getLogMethod() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_severity</code>. Flag
     * to indicate the type of log (notice, warning, error)
     */
    public void setLogSeverity(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_severity</code>. Flag
     * to indicate the type of log (notice, warning, error)
     */
    public Byte getLogSeverity() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_item_id</code>.
     */
    public void setLogItemId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_item_id</code>.
     */
    public String getLogItemId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_forums.convert_logs.log_time</code>.
     */
    public void setLogTime(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.convert_logs.log_time</code>.
     */
    public Integer getLogTime() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, Long, String, Byte, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<ULong, String, Long, String, Byte, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return ConvertLogs.CONVERT_LOGS.LOG_ID;
    }

    @Override
    public Field<String> field2() {
        return ConvertLogs.CONVERT_LOGS.LOG_MESSAGE;
    }

    @Override
    public Field<Long> field3() {
        return ConvertLogs.CONVERT_LOGS.LOG_APP;
    }

    @Override
    public Field<String> field4() {
        return ConvertLogs.CONVERT_LOGS.LOG_METHOD;
    }

    @Override
    public Field<Byte> field5() {
        return ConvertLogs.CONVERT_LOGS.LOG_SEVERITY;
    }

    @Override
    public Field<String> field6() {
        return ConvertLogs.CONVERT_LOGS.LOG_ITEM_ID;
    }

    @Override
    public Field<Integer> field7() {
        return ConvertLogs.CONVERT_LOGS.LOG_TIME;
    }

    @Override
    public ULong component1() {
        return getLogId();
    }

    @Override
    public String component2() {
        return getLogMessage();
    }

    @Override
    public Long component3() {
        return getLogApp();
    }

    @Override
    public String component4() {
        return getLogMethod();
    }

    @Override
    public Byte component5() {
        return getLogSeverity();
    }

    @Override
    public String component6() {
        return getLogItemId();
    }

    @Override
    public Integer component7() {
        return getLogTime();
    }

    @Override
    public ULong value1() {
        return getLogId();
    }

    @Override
    public String value2() {
        return getLogMessage();
    }

    @Override
    public Long value3() {
        return getLogApp();
    }

    @Override
    public String value4() {
        return getLogMethod();
    }

    @Override
    public Byte value5() {
        return getLogSeverity();
    }

    @Override
    public String value6() {
        return getLogItemId();
    }

    @Override
    public Integer value7() {
        return getLogTime();
    }

    @Override
    public ConvertLogsRecord value1(ULong value) {
        setLogId(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value2(String value) {
        setLogMessage(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value3(Long value) {
        setLogApp(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value4(String value) {
        setLogMethod(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value5(Byte value) {
        setLogSeverity(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value6(String value) {
        setLogItemId(value);
        return this;
    }

    @Override
    public ConvertLogsRecord value7(Integer value) {
        setLogTime(value);
        return this;
    }

    @Override
    public ConvertLogsRecord values(ULong value1, String value2, Long value3, String value4, Byte value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConvertLogsRecord
     */
    public ConvertLogsRecord() {
        super(ConvertLogs.CONVERT_LOGS);
    }

    /**
     * Create a detached, initialised ConvertLogsRecord
     */
    public ConvertLogsRecord(ULong logId, String logMessage, Long logApp, String logMethod, Byte logSeverity, String logItemId, Integer logTime) {
        super(ConvertLogs.CONVERT_LOGS);

        setLogId(logId);
        setLogMessage(logMessage);
        setLogApp(logApp);
        setLogMethod(logMethod);
        setLogSeverity(logSeverity);
        setLogItemId(logItemId);
        setLogTime(logTime);
    }
}
