/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreEditHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreEditHistory extends TableImpl<CoreEditHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_edit_history</code>
     */
    public static final CoreEditHistory CORE_EDIT_HISTORY = new CoreEditHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreEditHistoryRecord> getRecordType() {
        return CoreEditHistoryRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_edit_history.id</code>. ID Number
     */
    public final TableField<CoreEditHistoryRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_edit_history.class</code>. The
     * comment class
     */
    public final TableField<CoreEditHistoryRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(255).nullable(false), this, "The comment class");

    /**
     * The column <code>paradise_forums.core_edit_history.comment_id</code>. The
     * comment ID
     */
    public final TableField<CoreEditHistoryRecord, ULong> COMMENT_ID = createField(DSL.name("comment_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The comment ID");

    /**
     * The column <code>paradise_forums.core_edit_history.member</code>. The ID
     * number of the member making the edit
     */
    public final TableField<CoreEditHistoryRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The ID number of the member making the edit");

    /**
     * The column <code>paradise_forums.core_edit_history.time</code>. Unix
     * timestamp of the date the edit was made
     */
    public final TableField<CoreEditHistoryRecord, UInteger> TIME = createField(DSL.name("time"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of the date the edit was made");

    /**
     * The column <code>paradise_forums.core_edit_history.old</code>. The
     * previous comment text
     */
    public final TableField<CoreEditHistoryRecord, String> OLD = createField(DSL.name("old"), SQLDataType.CLOB.nullable(false), this, "The previous comment text");

    /**
     * The column <code>paradise_forums.core_edit_history.new</code>. The new
     * comment text
     */
    public final TableField<CoreEditHistoryRecord, String> NEW = createField(DSL.name("new"), SQLDataType.CLOB.nullable(false), this, "The new comment text");

    /**
     * The column <code>paradise_forums.core_edit_history.public</code>.
     * Indicates if the log should display publicly
     */
    public final TableField<CoreEditHistoryRecord, Boolean> PUBLIC = createField(DSL.name("public"), SQLDataType.BIT.defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "Indicates if the log should display publicly");

    /**
     * The column <code>paradise_forums.core_edit_history.reason</code>.
     * User-provided reason for editing
     */
    public final TableField<CoreEditHistoryRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "User-provided reason for editing");

    private CoreEditHistory(Name alias, Table<CoreEditHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreEditHistory(Name alias, Table<CoreEditHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_edit_history</code> table
     * reference
     */
    public CoreEditHistory(String alias) {
        this(DSL.name(alias), CORE_EDIT_HISTORY);
    }

    /**
     * Create an aliased <code>paradise_forums.core_edit_history</code> table
     * reference
     */
    public CoreEditHistory(Name alias) {
        this(alias, CORE_EDIT_HISTORY);
    }

    /**
     * Create a <code>paradise_forums.core_edit_history</code> table reference
     */
    public CoreEditHistory() {
        this(DSL.name("core_edit_history"), null);
    }

    public <O extends Record> CoreEditHistory(Table<O> child, ForeignKey<O, CoreEditHistoryRecord> key) {
        super(child, key, CORE_EDIT_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_EDIT_HISTORY_EDIT_LOG, Indexes.CORE_EDIT_HISTORY_MEMBER, Indexes.CORE_EDIT_HISTORY_TIME);
    }

    @Override
    public Identity<CoreEditHistoryRecord, ULong> getIdentity() {
        return (Identity<CoreEditHistoryRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreEditHistoryRecord> getPrimaryKey() {
        return Keys.KEY_CORE_EDIT_HISTORY_PRIMARY;
    }

    @Override
    public CoreEditHistory as(String alias) {
        return new CoreEditHistory(DSL.name(alias), this);
    }

    @Override
    public CoreEditHistory as(Name alias) {
        return new CoreEditHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreEditHistory rename(String name) {
        return new CoreEditHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreEditHistory rename(Name name) {
        return new CoreEditHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, ULong, ULong, UInteger, String, String, Boolean, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
