/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreFilesTemp;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFilesTempRecord extends UpdatableRecordImpl<CoreFilesTempRecord> implements Record10<ULong, String, String, String, String, UInteger, String, String, String, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_files_temp.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.upload_key</code>. Key
     * for upload process
     */
    public void setUploadKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.upload_key</code>. Key
     * for upload process
     */
    public String getUploadKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.filename</code>.
     * Filename
     */
    public void setFilename(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.filename</code>.
     * Filename
     */
    public String getFilename() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.mime</code>.
     */
    public void setMime(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.mime</code>.
     */
    public String getMime() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.contents</code>. Path to
     * file on disk
     */
    public void setContents(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.contents</code>. Path to
     * file on disk
     */
    public String getContents() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.time</code>. Unix
     * timestamp of upload date
     */
    public void setTime(UInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.time</code>. Unix
     * timestamp of upload date
     */
    public UInteger getTime() {
        return (UInteger) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_files_temp.storage_extension</code>.
     */
    public void setStorageExtension(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_files_temp.storage_extension</code>.
     */
    public String getStorageExtension() {
        return (String) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.exif</code>.
     */
    public void setExif(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.exif</code>.
     */
    public String getExif() {
        return (String) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_files_temp.labels</code>.
     */
    public void setLabels(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_files_temp.labels</code>.
     */
    public String getLabels() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_files_temp.requires_moderation</code>. Boolean
     * value indicating if image scanner wants to hold this for moderation
     */
    public void setRequiresModeration(UByte value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_files_temp.requires_moderation</code>. Boolean
     * value indicating if image scanner wants to hold this for moderation
     */
    public UByte getRequiresModeration() {
        return (UByte) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, String, UInteger, String, String, String, UByte> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, String, String, String, String, UInteger, String, String, String, UByte> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreFilesTemp.CORE_FILES_TEMP.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreFilesTemp.CORE_FILES_TEMP.UPLOAD_KEY;
    }

    @Override
    public Field<String> field3() {
        return CoreFilesTemp.CORE_FILES_TEMP.FILENAME;
    }

    @Override
    public Field<String> field4() {
        return CoreFilesTemp.CORE_FILES_TEMP.MIME;
    }

    @Override
    public Field<String> field5() {
        return CoreFilesTemp.CORE_FILES_TEMP.CONTENTS;
    }

    @Override
    public Field<UInteger> field6() {
        return CoreFilesTemp.CORE_FILES_TEMP.TIME;
    }

    @Override
    public Field<String> field7() {
        return CoreFilesTemp.CORE_FILES_TEMP.STORAGE_EXTENSION;
    }

    @Override
    public Field<String> field8() {
        return CoreFilesTemp.CORE_FILES_TEMP.EXIF;
    }

    @Override
    public Field<String> field9() {
        return CoreFilesTemp.CORE_FILES_TEMP.LABELS;
    }

    @Override
    public Field<UByte> field10() {
        return CoreFilesTemp.CORE_FILES_TEMP.REQUIRES_MODERATION;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUploadKey();
    }

    @Override
    public String component3() {
        return getFilename();
    }

    @Override
    public String component4() {
        return getMime();
    }

    @Override
    public String component5() {
        return getContents();
    }

    @Override
    public UInteger component6() {
        return getTime();
    }

    @Override
    public String component7() {
        return getStorageExtension();
    }

    @Override
    public String component8() {
        return getExif();
    }

    @Override
    public String component9() {
        return getLabels();
    }

    @Override
    public UByte component10() {
        return getRequiresModeration();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUploadKey();
    }

    @Override
    public String value3() {
        return getFilename();
    }

    @Override
    public String value4() {
        return getMime();
    }

    @Override
    public String value5() {
        return getContents();
    }

    @Override
    public UInteger value6() {
        return getTime();
    }

    @Override
    public String value7() {
        return getStorageExtension();
    }

    @Override
    public String value8() {
        return getExif();
    }

    @Override
    public String value9() {
        return getLabels();
    }

    @Override
    public UByte value10() {
        return getRequiresModeration();
    }

    @Override
    public CoreFilesTempRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value2(String value) {
        setUploadKey(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value3(String value) {
        setFilename(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value4(String value) {
        setMime(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value5(String value) {
        setContents(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value6(UInteger value) {
        setTime(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value7(String value) {
        setStorageExtension(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value8(String value) {
        setExif(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value9(String value) {
        setLabels(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord value10(UByte value) {
        setRequiresModeration(value);
        return this;
    }

    @Override
    public CoreFilesTempRecord values(ULong value1, String value2, String value3, String value4, String value5, UInteger value6, String value7, String value8, String value9, UByte value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreFilesTempRecord
     */
    public CoreFilesTempRecord() {
        super(CoreFilesTemp.CORE_FILES_TEMP);
    }

    /**
     * Create a detached, initialised CoreFilesTempRecord
     */
    public CoreFilesTempRecord(ULong id, String uploadKey, String filename, String mime, String contents, UInteger time, String storageExtension, String exif, String labels, UByte requiresModeration) {
        super(CoreFilesTemp.CORE_FILES_TEMP);

        setId(id);
        setUploadKey(uploadKey);
        setFilename(filename);
        setMime(mime);
        setContents(contents);
        setTime(time);
        setStorageExtension(storageExtension);
        setExif(exif);
        setLabels(labels);
        setRequiresModeration(requiresModeration);
    }
}
