/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreValidating;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record17;
import org.jooq.Row17;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreValidatingRecord extends UpdatableRecordImpl<CoreValidatingRecord> implements Record17<String, ULong, Integer, Byte, Byte, Byte, Byte, String, Byte, String, Byte, Integer, UByte, UByte, UInteger, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_validating.vid</code>.
     */
    public void setVid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.vid</code>.
     */
    public String getVid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.member_id</code>.
     */
    public void setMemberId(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.member_id</code>.
     */
    public ULong getMemberId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.entry_date</code>.
     */
    public void setEntryDate(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.entry_date</code>.
     */
    public Integer getEntryDate() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.coppa_user</code>.
     */
    public void setCoppaUser(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.coppa_user</code>.
     */
    public Byte getCoppaUser() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.lost_pass</code>.
     */
    public void setLostPass(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.lost_pass</code>.
     */
    public Byte getLostPass() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.new_reg</code>.
     */
    public void setNewReg(Byte value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.new_reg</code>.
     */
    public Byte getNewReg() {
        return (Byte) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.email_chg</code>.
     */
    public void setEmailChg(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.email_chg</code>.
     */
    public Byte getEmailChg() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.ip_address</code>.
     */
    public void setIpAddress(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.ip_address</code>.
     */
    public String getIpAddress() {
        return (String) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.user_verified</code>.
     */
    public void setUserVerified(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.user_verified</code>.
     */
    public Byte getUserVerified() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.prev_email</code>.
     */
    public void setPrevEmail(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.prev_email</code>.
     */
    public String getPrevEmail() {
        return (String) get(9);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.spam_flag</code>.
     */
    public void setSpamFlag(Byte value) {
        set(10, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.spam_flag</code>.
     */
    public Byte getSpamFlag() {
        return (Byte) get(10);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.email_sent</code>.
     * Timestamp of when the confirmation email was last sent
     */
    public void setEmailSent(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.email_sent</code>.
     * Timestamp of when the confirmation email was last sent
     */
    public Integer getEmailSent() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.forgot_security</code>.
     */
    public void setForgotSecurity(UByte value) {
        set(12, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.forgot_security</code>.
     */
    public UByte getForgotSecurity() {
        return (UByte) get(12);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.do_not_delete</code>. A
     * flag to specify that the account should not be deleted in the normal
     * cleanup of unvalidated accounts. Used for accounts created in Commerce
     * checkout.
     */
    public void setDoNotDelete(UByte value) {
        set(13, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.do_not_delete</code>. A
     * flag to specify that the account should not be deleted in the normal
     * cleanup of unvalidated accounts. Used for accounts created in Commerce
     * checkout.
     */
    public UByte getDoNotDelete() {
        return (UByte) get(13);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.reg_cancelled</code>.
     * Flag to see if the user likes soup. Kidding, timestamp of when they have
     * cancelled their reg.
     */
    public void setRegCancelled(UInteger value) {
        set(14, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.reg_cancelled</code>.
     * Flag to see if the user likes soup. Kidding, timestamp of when they have
     * cancelled their reg.
     */
    public UInteger getRegCancelled() {
        return (UInteger) get(14);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.ref</code>. URL to
     * redirect the user to after validation is complete
     */
    public void setRef(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.ref</code>. URL to
     * redirect the user to after validation is complete
     */
    public String getRef() {
        return (String) get(15);
    }

    /**
     * Setter for <code>paradise_forums.core_validating.security_key</code>.
     */
    public void setSecurityKey(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>paradise_forums.core_validating.security_key</code>.
     */
    public String getSecurityKey() {
        return (String) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, ULong, Integer, Byte, Byte, Byte, Byte, String, Byte, String, Byte, Integer, UByte, UByte, UInteger, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    @Override
    public Row17<String, ULong, Integer, Byte, Byte, Byte, Byte, String, Byte, String, Byte, Integer, UByte, UByte, UInteger, String, String> valuesRow() {
        return (Row17) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreValidating.CORE_VALIDATING.VID;
    }

    @Override
    public Field<ULong> field2() {
        return CoreValidating.CORE_VALIDATING.MEMBER_ID;
    }

    @Override
    public Field<Integer> field3() {
        return CoreValidating.CORE_VALIDATING.ENTRY_DATE;
    }

    @Override
    public Field<Byte> field4() {
        return CoreValidating.CORE_VALIDATING.COPPA_USER;
    }

    @Override
    public Field<Byte> field5() {
        return CoreValidating.CORE_VALIDATING.LOST_PASS;
    }

    @Override
    public Field<Byte> field6() {
        return CoreValidating.CORE_VALIDATING.NEW_REG;
    }

    @Override
    public Field<Byte> field7() {
        return CoreValidating.CORE_VALIDATING.EMAIL_CHG;
    }

    @Override
    public Field<String> field8() {
        return CoreValidating.CORE_VALIDATING.IP_ADDRESS;
    }

    @Override
    public Field<Byte> field9() {
        return CoreValidating.CORE_VALIDATING.USER_VERIFIED;
    }

    @Override
    public Field<String> field10() {
        return CoreValidating.CORE_VALIDATING.PREV_EMAIL;
    }

    @Override
    public Field<Byte> field11() {
        return CoreValidating.CORE_VALIDATING.SPAM_FLAG;
    }

    @Override
    public Field<Integer> field12() {
        return CoreValidating.CORE_VALIDATING.EMAIL_SENT;
    }

    @Override
    public Field<UByte> field13() {
        return CoreValidating.CORE_VALIDATING.FORGOT_SECURITY;
    }

    @Override
    public Field<UByte> field14() {
        return CoreValidating.CORE_VALIDATING.DO_NOT_DELETE;
    }

    @Override
    public Field<UInteger> field15() {
        return CoreValidating.CORE_VALIDATING.REG_CANCELLED;
    }

    @Override
    public Field<String> field16() {
        return CoreValidating.CORE_VALIDATING.REF;
    }

    @Override
    public Field<String> field17() {
        return CoreValidating.CORE_VALIDATING.SECURITY_KEY;
    }

    @Override
    public String component1() {
        return getVid();
    }

    @Override
    public ULong component2() {
        return getMemberId();
    }

    @Override
    public Integer component3() {
        return getEntryDate();
    }

    @Override
    public Byte component4() {
        return getCoppaUser();
    }

    @Override
    public Byte component5() {
        return getLostPass();
    }

    @Override
    public Byte component6() {
        return getNewReg();
    }

    @Override
    public Byte component7() {
        return getEmailChg();
    }

    @Override
    public String component8() {
        return getIpAddress();
    }

    @Override
    public Byte component9() {
        return getUserVerified();
    }

    @Override
    public String component10() {
        return getPrevEmail();
    }

    @Override
    public Byte component11() {
        return getSpamFlag();
    }

    @Override
    public Integer component12() {
        return getEmailSent();
    }

    @Override
    public UByte component13() {
        return getForgotSecurity();
    }

    @Override
    public UByte component14() {
        return getDoNotDelete();
    }

    @Override
    public UInteger component15() {
        return getRegCancelled();
    }

    @Override
    public String component16() {
        return getRef();
    }

    @Override
    public String component17() {
        return getSecurityKey();
    }

    @Override
    public String value1() {
        return getVid();
    }

    @Override
    public ULong value2() {
        return getMemberId();
    }

    @Override
    public Integer value3() {
        return getEntryDate();
    }

    @Override
    public Byte value4() {
        return getCoppaUser();
    }

    @Override
    public Byte value5() {
        return getLostPass();
    }

    @Override
    public Byte value6() {
        return getNewReg();
    }

    @Override
    public Byte value7() {
        return getEmailChg();
    }

    @Override
    public String value8() {
        return getIpAddress();
    }

    @Override
    public Byte value9() {
        return getUserVerified();
    }

    @Override
    public String value10() {
        return getPrevEmail();
    }

    @Override
    public Byte value11() {
        return getSpamFlag();
    }

    @Override
    public Integer value12() {
        return getEmailSent();
    }

    @Override
    public UByte value13() {
        return getForgotSecurity();
    }

    @Override
    public UByte value14() {
        return getDoNotDelete();
    }

    @Override
    public UInteger value15() {
        return getRegCancelled();
    }

    @Override
    public String value16() {
        return getRef();
    }

    @Override
    public String value17() {
        return getSecurityKey();
    }

    @Override
    public CoreValidatingRecord value1(String value) {
        setVid(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value2(ULong value) {
        setMemberId(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value3(Integer value) {
        setEntryDate(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value4(Byte value) {
        setCoppaUser(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value5(Byte value) {
        setLostPass(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value6(Byte value) {
        setNewReg(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value7(Byte value) {
        setEmailChg(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value8(String value) {
        setIpAddress(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value9(Byte value) {
        setUserVerified(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value10(String value) {
        setPrevEmail(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value11(Byte value) {
        setSpamFlag(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value12(Integer value) {
        setEmailSent(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value13(UByte value) {
        setForgotSecurity(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value14(UByte value) {
        setDoNotDelete(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value15(UInteger value) {
        setRegCancelled(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value16(String value) {
        setRef(value);
        return this;
    }

    @Override
    public CoreValidatingRecord value17(String value) {
        setSecurityKey(value);
        return this;
    }

    @Override
    public CoreValidatingRecord values(String value1, ULong value2, Integer value3, Byte value4, Byte value5, Byte value6, Byte value7, String value8, Byte value9, String value10, Byte value11, Integer value12, UByte value13, UByte value14, UInteger value15, String value16, String value17) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreValidatingRecord
     */
    public CoreValidatingRecord() {
        super(CoreValidating.CORE_VALIDATING);
    }

    /**
     * Create a detached, initialised CoreValidatingRecord
     */
    public CoreValidatingRecord(String vid, ULong memberId, Integer entryDate, Byte coppaUser, Byte lostPass, Byte newReg, Byte emailChg, String ipAddress, Byte userVerified, String prevEmail, Byte spamFlag, Integer emailSent, UByte forgotSecurity, UByte doNotDelete, UInteger regCancelled, String ref, String securityKey) {
        super(CoreValidating.CORE_VALIDATING);

        setVid(vid);
        setMemberId(memberId);
        setEntryDate(entryDate);
        setCoppaUser(coppaUser);
        setLostPass(lostPass);
        setNewReg(newReg);
        setEmailChg(emailChg);
        setIpAddress(ipAddress);
        setUserVerified(userVerified);
        setPrevEmail(prevEmail);
        setSpamFlag(spamFlag);
        setEmailSent(emailSent);
        setForgotSecurity(forgotSecurity);
        setDoNotDelete(doNotDelete);
        setRegCancelled(regCancelled);
        setRef(ref);
        setSecurityKey(securityKey);
    }
}
