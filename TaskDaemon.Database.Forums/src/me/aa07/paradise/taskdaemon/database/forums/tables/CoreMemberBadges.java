/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreMemberBadgesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreMemberBadges extends TableImpl<CoreMemberBadgesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_member_badges</code>
     */
    public static final CoreMemberBadges CORE_MEMBER_BADGES = new CoreMemberBadges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreMemberBadgesRecord> getRecordType() {
        return CoreMemberBadgesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_member_badges.id</code>. ID Number
     */
    public final TableField<CoreMemberBadgesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_member_badges.member</code>. The
     * member ID
     */
    public final TableField<CoreMemberBadgesRecord, UInteger> MEMBER = createField(DSL.name("member"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The member ID");

    /**
     * The column <code>paradise_forums.core_member_badges.badge</code>. The
     * badge ID
     */
    public final TableField<CoreMemberBadgesRecord, UInteger> BADGE = createField(DSL.name("badge"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The badge ID");

    /**
     * The column <code>paradise_forums.core_member_badges.datetime</code>. Unix
     * timestamp of when the member earned this badge
     */
    public final TableField<CoreMemberBadgesRecord, UInteger> DATETIME = createField(DSL.name("datetime"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when the member earned this badge");

    /**
     * The column <code>paradise_forums.core_member_badges.rule</code>. A ID
     * number of the rule which triggered earning the badge
     */
    public final TableField<CoreMemberBadgesRecord, ULong> RULE = createField(DSL.name("rule"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "A ID number of the rule which triggered earning the badge");

    /**
     * The column <code>paradise_forums.core_member_badges.action_log</code>.
     * The ID number of the log in core_achievements_log which indicates the
     * action that was performed
     */
    public final TableField<CoreMemberBadgesRecord, ULong> ACTION_LOG = createField(DSL.name("action_log"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The ID number of the log in core_achievements_log which indicates the action that was performed");

    /**
     * The column <code>paradise_forums.core_member_badges.actor</code>. If the
     * member receiving the badge was the subject or other in the action
     */
    public final TableField<CoreMemberBadgesRecord, String> ACTOR = createField(DSL.name("actor"), SQLDataType.VARCHAR(13).nullable(false), this, "If the member receiving the badge was the subject or other in the action");

    /**
     * The column <code>paradise_forums.core_member_badges.recognize</code>.
     * core_member_recognise table pkey
     */
    public final TableField<CoreMemberBadgesRecord, UInteger> RECOGNIZE = createField(DSL.name("recognize"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "core_member_recognise table pkey");

    private CoreMemberBadges(Name alias, Table<CoreMemberBadgesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreMemberBadges(Name alias, Table<CoreMemberBadgesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_member_badges</code> table
     * reference
     */
    public CoreMemberBadges(String alias) {
        this(DSL.name(alias), CORE_MEMBER_BADGES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_member_badges</code> table
     * reference
     */
    public CoreMemberBadges(Name alias) {
        this(alias, CORE_MEMBER_BADGES);
    }

    /**
     * Create a <code>paradise_forums.core_member_badges</code> table reference
     */
    public CoreMemberBadges() {
        this(DSL.name("core_member_badges"), null);
    }

    public <O extends Record> CoreMemberBadges(Table<O> child, ForeignKey<O, CoreMemberBadgesRecord> key) {
        super(child, key, CORE_MEMBER_BADGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_MEMBER_BADGES_MEMBER);
    }

    @Override
    public Identity<CoreMemberBadgesRecord, ULong> getIdentity() {
        return (Identity<CoreMemberBadgesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreMemberBadgesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MEMBER_BADGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreMemberBadgesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_MEMBER_BADGES_LOOKUP);
    }

    @Override
    public CoreMemberBadges as(String alias) {
        return new CoreMemberBadges(DSL.name(alias), this);
    }

    @Override
    public CoreMemberBadges as(Name alias) {
        return new CoreMemberBadges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMemberBadges rename(String name) {
        return new CoreMemberBadges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMemberBadges rename(Name name) {
        return new CoreMemberBadges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, UInteger, UInteger, UInteger, ULong, ULong, String, UInteger> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
