/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.enums.CoreSavedChartsChartTimescale;
import me.aa07.paradise.taskdaemon.database.forums.tables.CoreSavedCharts;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSavedChartsRecord extends UpdatableRecordImpl<CoreSavedChartsRecord> implements Record7<ULong, ULong, String, String, String, Byte, CoreSavedChartsChartTimescale> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_saved_charts.chart_id</code>. ID
     * Number
     */
    public void setChartId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_saved_charts.chart_id</code>. ID
     * Number
     */
    public ULong getChartId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_saved_charts.chart_member</code>.
     */
    public void setChartMember(ULong value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_saved_charts.chart_member</code>.
     */
    public ULong getChartMember() {
        return (ULong) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_saved_charts.chart_controller</code>.
     */
    public void setChartController(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_saved_charts.chart_controller</code>.
     */
    public String getChartController() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_saved_charts.chart_configuration</code>.
     */
    public void setChartConfiguration(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_saved_charts.chart_configuration</code>.
     */
    public String getChartConfiguration() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_saved_charts.chart_title</code>.
     */
    public void setChartTitle(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_saved_charts.chart_title</code>.
     */
    public String getChartTitle() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_saved_charts.chart_favorite</code>.
     */
    public void setChartFavorite(Byte value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_saved_charts.chart_favorite</code>.
     */
    public Byte getChartFavorite() {
        return (Byte) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_saved_charts.chart_timescale</code>.
     */
    public void setChartTimescale(CoreSavedChartsChartTimescale value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_saved_charts.chart_timescale</code>.
     */
    public CoreSavedChartsChartTimescale getChartTimescale() {
        return (CoreSavedChartsChartTimescale) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, String, String, String, Byte, CoreSavedChartsChartTimescale> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<ULong, ULong, String, String, String, Byte, CoreSavedChartsChartTimescale> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_ID;
    }

    @Override
    public Field<ULong> field2() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_MEMBER;
    }

    @Override
    public Field<String> field3() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_CONTROLLER;
    }

    @Override
    public Field<String> field4() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_CONFIGURATION;
    }

    @Override
    public Field<String> field5() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_TITLE;
    }

    @Override
    public Field<Byte> field6() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_FAVORITE;
    }

    @Override
    public Field<CoreSavedChartsChartTimescale> field7() {
        return CoreSavedCharts.CORE_SAVED_CHARTS.CHART_TIMESCALE;
    }

    @Override
    public ULong component1() {
        return getChartId();
    }

    @Override
    public ULong component2() {
        return getChartMember();
    }

    @Override
    public String component3() {
        return getChartController();
    }

    @Override
    public String component4() {
        return getChartConfiguration();
    }

    @Override
    public String component5() {
        return getChartTitle();
    }

    @Override
    public Byte component6() {
        return getChartFavorite();
    }

    @Override
    public CoreSavedChartsChartTimescale component7() {
        return getChartTimescale();
    }

    @Override
    public ULong value1() {
        return getChartId();
    }

    @Override
    public ULong value2() {
        return getChartMember();
    }

    @Override
    public String value3() {
        return getChartController();
    }

    @Override
    public String value4() {
        return getChartConfiguration();
    }

    @Override
    public String value5() {
        return getChartTitle();
    }

    @Override
    public Byte value6() {
        return getChartFavorite();
    }

    @Override
    public CoreSavedChartsChartTimescale value7() {
        return getChartTimescale();
    }

    @Override
    public CoreSavedChartsRecord value1(ULong value) {
        setChartId(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value2(ULong value) {
        setChartMember(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value3(String value) {
        setChartController(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value4(String value) {
        setChartConfiguration(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value5(String value) {
        setChartTitle(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value6(Byte value) {
        setChartFavorite(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord value7(CoreSavedChartsChartTimescale value) {
        setChartTimescale(value);
        return this;
    }

    @Override
    public CoreSavedChartsRecord values(ULong value1, ULong value2, String value3, String value4, String value5, Byte value6, CoreSavedChartsChartTimescale value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreSavedChartsRecord
     */
    public CoreSavedChartsRecord() {
        super(CoreSavedCharts.CORE_SAVED_CHARTS);
    }

    /**
     * Create a detached, initialised CoreSavedChartsRecord
     */
    public CoreSavedChartsRecord(ULong chartId, ULong chartMember, String chartController, String chartConfiguration, String chartTitle, Byte chartFavorite, CoreSavedChartsChartTimescale chartTimescale) {
        super(CoreSavedCharts.CORE_SAVED_CHARTS);

        setChartId(chartId);
        setChartMember(chartMember);
        setChartController(chartController);
        setChartConfiguration(chartConfiguration);
        setChartTitle(chartTitle);
        setChartFavorite(chartFavorite);
        setChartTimescale(chartTimescale);
    }
}
