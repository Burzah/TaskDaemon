/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreClubsNodeMapRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreClubsNodeMap extends TableImpl<CoreClubsNodeMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_clubs_node_map</code>
     */
    public static final CoreClubsNodeMap CORE_CLUBS_NODE_MAP = new CoreClubsNodeMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreClubsNodeMapRecord> getRecordType() {
        return CoreClubsNodeMapRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_clubs_node_map.id</code>. Primary
     * ID
     */
    public final TableField<CoreClubsNodeMapRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary ID");

    /**
     * The column <code>paradise_forums.core_clubs_node_map.club_id</code>. The
     * club ID
     */
    public final TableField<CoreClubsNodeMapRecord, ULong> CLUB_ID = createField(DSL.name("club_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The club ID");

    /**
     * The column <code>paradise_forums.core_clubs_node_map.node_class</code>.
     * The class for the type of node
     */
    public final TableField<CoreClubsNodeMapRecord, String> NODE_CLASS = createField(DSL.name("node_class"), SQLDataType.VARCHAR(255).nullable(false), this, "The class for the type of node");

    /**
     * The column <code>paradise_forums.core_clubs_node_map.node_id</code>. The
     * ID number for the node
     */
    public final TableField<CoreClubsNodeMapRecord, ULong> NODE_ID = createField(DSL.name("node_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The ID number for the node");

    /**
     * The column <code>paradise_forums.core_clubs_node_map.name</code>. The
     * name
     */
    public final TableField<CoreClubsNodeMapRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "The name");

    /**
     * The column <code>paradise_forums.core_clubs_node_map.public</code>.
     */
    public final TableField<CoreClubsNodeMapRecord, UByte> PUBLIC = createField(DSL.name("public"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "");

    private CoreClubsNodeMap(Name alias, Table<CoreClubsNodeMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreClubsNodeMap(Name alias, Table<CoreClubsNodeMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_node_map</code> table
     * reference
     */
    public CoreClubsNodeMap(String alias) {
        this(DSL.name(alias), CORE_CLUBS_NODE_MAP);
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_node_map</code> table
     * reference
     */
    public CoreClubsNodeMap(Name alias) {
        this(alias, CORE_CLUBS_NODE_MAP);
    }

    /**
     * Create a <code>paradise_forums.core_clubs_node_map</code> table reference
     */
    public CoreClubsNodeMap() {
        this(DSL.name("core_clubs_node_map"), null);
    }

    public <O extends Record> CoreClubsNodeMap(Table<O> child, ForeignKey<O, CoreClubsNodeMapRecord> key) {
        super(child, key, CORE_CLUBS_NODE_MAP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_CLUBS_NODE_MAP_CLUB_ID, Indexes.CORE_CLUBS_NODE_MAP_NODE);
    }

    @Override
    public Identity<CoreClubsNodeMapRecord, ULong> getIdentity() {
        return (Identity<CoreClubsNodeMapRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreClubsNodeMapRecord> getPrimaryKey() {
        return Keys.KEY_CORE_CLUBS_NODE_MAP_PRIMARY;
    }

    @Override
    public CoreClubsNodeMap as(String alias) {
        return new CoreClubsNodeMap(DSL.name(alias), this);
    }

    @Override
    public CoreClubsNodeMap as(Name alias) {
        return new CoreClubsNodeMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsNodeMap rename(String name) {
        return new CoreClubsNodeMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsNodeMap rename(Name name) {
        return new CoreClubsNodeMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, ULong, String, ULong, String, UByte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
