/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreSearchIndexRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSearchIndex extends TableImpl<CoreSearchIndexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_search_index</code>
     */
    public static final CoreSearchIndex CORE_SEARCH_INDEX = new CoreSearchIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreSearchIndexRecord> getRecordType() {
        return CoreSearchIndexRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_search_index.index_id</code>.
     * Primary key
     */
    public final TableField<CoreSearchIndexRecord, ULong> INDEX_ID = createField(DSL.name("index_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>paradise_forums.core_search_index.index_class</code>.
     * Content type class e.g. \IPS\forums\Topic
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_CLASS = createField(DSL.name("index_class"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Content type class e.g. \\IPS\\forums\\Topic");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_object_id</code>. The ID of
     * the object. pid for posts, tid for topics etc
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_OBJECT_ID = createField(DSL.name("index_object_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The ID of the object. pid for posts, tid for topics etc");

    /**
     * The column <code>paradise_forums.core_search_index.index_item_id</code>.
     * For comments and reviews, the ID of the item it pertains to. For
     * \IPS\Content\Item this would just be NULL
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_ITEM_ID = createField(DSL.name("index_item_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "For comments and reviews, the ID of the item it pertains to. For \\IPS\\Content\\Item this would just be NULL");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_container_id</code>. The id
     * of the container for items/comments/reviews
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_CONTAINER_ID = createField(DSL.name("index_container_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The id of the container for items/comments/reviews");

    /**
     * The column <code>paradise_forums.core_search_index.index_content</code>.
     * The plain-text content to search
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_CONTENT = createField(DSL.name("index_content"), SQLDataType.CLOB.nullable(false), this, "The plain-text content to search");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_permissions</code>. A
     * comma-delimited list of groups which have permission to view
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_PERMISSIONS = createField(DSL.name("index_permissions"), SQLDataType.CLOB.nullable(false), this, "A comma-delimited list of groups which have permission to view");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_date_created</code>. The
     * object creation date
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_DATE_CREATED = createField(DSL.name("index_date_created"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The object creation date");

    /**
     * The column <code>paradise_forums.core_search_index.index_author</code>.
     * The object author id
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_AUTHOR = createField(DSL.name("index_author"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "The object author id");

    /**
     * The column <code>paradise_forums.core_search_index.index_title</code>.
     * Content title
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_TITLE = createField(DSL.name("index_title"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Content title");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_date_updated</code>. Object
     * last updated date
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_DATE_UPDATED = createField(DSL.name("index_date_updated"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Object last updated date");

    /**
     * The column <code>paradise_forums.core_search_index.index_hidden</code>. 0
     * = visible, -1 = hidden (previously visible), 1 = unapproved, 2 = parent
     * item hidden
     */
    public final TableField<CoreSearchIndexRecord, Byte> INDEX_HIDDEN = createField(DSL.name("index_hidden"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "0 = visible, -1 = hidden (previously visible), 1 = unapproved, 2 = parent item hidden");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_item_index_id</code>. The
     * index ID of the item
     */
    public final TableField<CoreSearchIndexRecord, ULong> INDEX_ITEM_INDEX_ID = createField(DSL.name("index_item_index_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The index ID of the item");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_item_author</code>. The
     * author of the item
     */
    public final TableField<CoreSearchIndexRecord, ULong> INDEX_ITEM_AUTHOR = createField(DSL.name("index_item_author"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The author of the item");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_is_last_comment</code>. Is
     * this the last comment/review on an item?
     */
    public final TableField<CoreSearchIndexRecord, Byte> INDEX_IS_LAST_COMMENT = createField(DSL.name("index_is_last_comment"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Is this the last comment/review on an item?");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_class_type_id_hash</code>.
     * MD5 of (index_class:index_object_id)
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_CLASS_TYPE_ID_HASH = createField(DSL.name("index_class_type_id_hash"), SQLDataType.CHAR(32).nullable(false), this, "MD5 of (index_class:index_object_id)");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_container_class</code>. The
     * class of the container that relates to index_container_id
     */
    public final TableField<CoreSearchIndexRecord, String> INDEX_CONTAINER_CLASS = createField(DSL.name("index_container_class"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The class of the container that relates to index_container_id");

    /**
     * The column <code>paradise_forums.core_search_index.index_club_id</code>.
     * The club ID, or NULL if it does not belong to a club
     */
    public final TableField<CoreSearchIndexRecord, ULong> INDEX_CLUB_ID = createField(DSL.name("index_club_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The club ID, or NULL if it does not belong to a club");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_date_commented</code>.
     * Object last commented/reviewed date
     */
    public final TableField<CoreSearchIndexRecord, UInteger> INDEX_DATE_COMMENTED = createField(DSL.name("index_date_commented"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Object last commented/reviewed date");

    /**
     * The column <code>paradise_forums.core_search_index.index_is_anon</code>.
     */
    public final TableField<CoreSearchIndexRecord, UByte> INDEX_IS_ANON = createField(DSL.name("index_is_anon"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_search_index.index_item_solved</code>. Object
     * solved status
     */
    public final TableField<CoreSearchIndexRecord, UByte> INDEX_ITEM_SOLVED = createField(DSL.name("index_item_solved"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.TINYINTUNSIGNED)), this, "Object solved status");

    private CoreSearchIndex(Name alias, Table<CoreSearchIndexRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreSearchIndex(Name alias, Table<CoreSearchIndexRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_search_index</code> table
     * reference
     */
    public CoreSearchIndex(String alias) {
        this(DSL.name(alias), CORE_SEARCH_INDEX);
    }

    /**
     * Create an aliased <code>paradise_forums.core_search_index</code> table
     * reference
     */
    public CoreSearchIndex(Name alias) {
        this(alias, CORE_SEARCH_INDEX);
    }

    /**
     * Create a <code>paradise_forums.core_search_index</code> table reference
     */
    public CoreSearchIndex() {
        this(DSL.name("core_search_index"), null);
    }

    public <O extends Record> CoreSearchIndex(Table<O> child, ForeignKey<O, CoreSearchIndexRecord> key) {
        super(child, key, CORE_SEARCH_INDEX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_SEARCH_INDEX_AUTHOR_LOOKUP, Indexes.CORE_SEARCH_INDEX_AUTHOR_POSTED_IN, Indexes.CORE_SEARCH_INDEX_CONTAINER, Indexes.CORE_SEARCH_INDEX_FOLLOWED_CONTENT, Indexes.CORE_SEARCH_INDEX_INDEX_CLASS_AND_OBJECT_ID, Indexes.CORE_SEARCH_INDEX_INDEX_CLASS_TYPE_ID_HASH, Indexes.CORE_SEARCH_INDEX_INDEX_CLUB_ID, Indexes.CORE_SEARCH_INDEX_INDEX_CONTENT, Indexes.CORE_SEARCH_INDEX_INDEX_DATE_COMMENTED, Indexes.CORE_SEARCH_INDEX_INDEX_DATE_CREATED, Indexes.CORE_SEARCH_INDEX_INDEX_DATE_UPDATED, Indexes.CORE_SEARCH_INDEX_INDEX_HIDDEN, Indexes.CORE_SEARCH_INDEX_INDEX_ITEM_AUTHOR, Indexes.CORE_SEARCH_INDEX_INDEX_PRUNE, Indexes.CORE_SEARCH_INDEX_INDEX_STREAM, Indexes.CORE_SEARCH_INDEX_INDEX_TITLE, Indexes.CORE_SEARCH_INDEX_ITEM);
    }

    @Override
    public Identity<CoreSearchIndexRecord, ULong> getIdentity() {
        return (Identity<CoreSearchIndexRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreSearchIndexRecord> getPrimaryKey() {
        return Keys.KEY_CORE_SEARCH_INDEX_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreSearchIndexRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_SEARCH_INDEX_OBJECT);
    }

    @Override
    public CoreSearchIndex as(String alias) {
        return new CoreSearchIndex(DSL.name(alias), this);
    }

    @Override
    public CoreSearchIndex as(Name alias) {
        return new CoreSearchIndex(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSearchIndex rename(String name) {
        return new CoreSearchIndex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSearchIndex rename(Name name) {
        return new CoreSearchIndex(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<ULong, String, UInteger, UInteger, UInteger, String, String, UInteger, UInteger, String, UInteger, Byte, ULong, ULong, Byte, String, String, ULong, UInteger, UByte, UByte> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
