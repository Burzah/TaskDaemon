/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CorePfieldsDataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePfieldsData extends TableImpl<CorePfieldsDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_pfields_data</code>
     */
    public static final CorePfieldsData CORE_PFIELDS_DATA = new CorePfieldsData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePfieldsDataRecord> getRecordType() {
        return CorePfieldsDataRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_id</code>.
     */
    public final TableField<CorePfieldsDataRecord, Short> PF_ID = createField(DSL.name("pf_id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_content</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_CONTENT = createField(DSL.name("pf_content"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_type</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_TYPE = createField(DSL.name("pf_type"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_not_null</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_NOT_NULL = createField(DSL.name("pf_not_null"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_member_hide</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_MEMBER_HIDE = createField(DSL.name("pf_member_hide"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_max_input</code>.
     */
    public final TableField<CorePfieldsDataRecord, Integer> PF_MAX_INPUT = createField(DSL.name("pf_max_input"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_member_edit</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_MEMBER_EDIT = createField(DSL.name("pf_member_edit"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_position</code>.
     */
    public final TableField<CorePfieldsDataRecord, Short> PF_POSITION = createField(DSL.name("pf_position"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_show_on_reg</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_SHOW_ON_REG = createField(DSL.name("pf_show_on_reg"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_pfields_data.pf_input_format</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_INPUT_FORMAT = createField(DSL.name("pf_input_format"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_format</code>.
     * Custom formatting for topic view
     */
    public final TableField<CorePfieldsDataRecord, String> PF_FORMAT = createField(DSL.name("pf_format"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Custom formatting for topic view");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_group_id</code>.
     */
    public final TableField<CorePfieldsDataRecord, UInteger> PF_GROUP_ID = createField(DSL.name("pf_group_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_search_type</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_SEARCH_TYPE = createField(DSL.name("pf_search_type"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_filtering</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_FILTERING = createField(DSL.name("pf_filtering"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_multiple</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_MULTIPLE = createField(DSL.name("pf_multiple"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_pfields_data.pf_allow_attachments</code>.
     */
    public final TableField<CorePfieldsDataRecord, UByte> PF_ALLOW_ATTACHMENTS = createField(DSL.name("pf_allow_attachments"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_topic_hide</code>.
     */
    public final TableField<CorePfieldsDataRecord, String> PF_TOPIC_HIDE = createField(DSL.name("pf_topic_hide"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("'hide'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_pfields_data.pf_admin_only</code>.
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_ADMIN_ONLY = createField(DSL.name("pf_admin_only"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_pfields_data.pf_profile_format</code>. Custom
     * formatting for profiles
     */
    public final TableField<CorePfieldsDataRecord, String> PF_PROFILE_FORMAT = createField(DSL.name("pf_profile_format"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Custom formatting for profiles");

    /**
     * The column
     * <code>paradise_forums.core_pfields_data.pf_contains_pii</code>. Can be
     * used to use it while the pii data export
     */
    public final TableField<CorePfieldsDataRecord, Byte> PF_CONTAINS_PII = createField(DSL.name("pf_contains_pii"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Can be used to use it while the pii data export");

    private CorePfieldsData(Name alias, Table<CorePfieldsDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePfieldsData(Name alias, Table<CorePfieldsDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_pfields_data</code> table
     * reference
     */
    public CorePfieldsData(String alias) {
        this(DSL.name(alias), CORE_PFIELDS_DATA);
    }

    /**
     * Create an aliased <code>paradise_forums.core_pfields_data</code> table
     * reference
     */
    public CorePfieldsData(Name alias) {
        this(alias, CORE_PFIELDS_DATA);
    }

    /**
     * Create a <code>paradise_forums.core_pfields_data</code> table reference
     */
    public CorePfieldsData() {
        this(DSL.name("core_pfields_data"), null);
    }

    public <O extends Record> CorePfieldsData(Table<O> child, ForeignKey<O, CorePfieldsDataRecord> key) {
        super(child, key, CORE_PFIELDS_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_PFIELDS_DATA_PUBLIC_FIELDS);
    }

    @Override
    public Identity<CorePfieldsDataRecord, Short> getIdentity() {
        return (Identity<CorePfieldsDataRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorePfieldsDataRecord> getPrimaryKey() {
        return Keys.KEY_CORE_PFIELDS_DATA_PRIMARY;
    }

    @Override
    public CorePfieldsData as(String alias) {
        return new CorePfieldsData(DSL.name(alias), this);
    }

    @Override
    public CorePfieldsData as(Name alias) {
        return new CorePfieldsData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePfieldsData rename(String name) {
        return new CorePfieldsData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePfieldsData rename(Name name) {
        return new CorePfieldsData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Short, String, String, Byte, String, Integer, Byte, Short, Byte, String, String, UInteger, String, Byte, Byte, UByte, String, Byte, String, Byte> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
