/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreRatingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreRatings extends TableImpl<CoreRatingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_ratings</code>
     */
    public static final CoreRatings CORE_RATINGS = new CoreRatings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreRatingsRecord> getRecordType() {
        return CoreRatingsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_ratings.id</code>. ID Number
     */
    public final TableField<CoreRatingsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_ratings.class</code>. The content
     * item classname
     */
    public final TableField<CoreRatingsRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The content item classname");

    /**
     * The column <code>paradise_forums.core_ratings.item_id</code>. The content
     * item ID
     */
    public final TableField<CoreRatingsRecord, ULong> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The content item ID");

    /**
     * The column <code>paradise_forums.core_ratings.member</code>. The member
     * ID
     */
    public final TableField<CoreRatingsRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The member ID");

    /**
     * The column <code>paradise_forums.core_ratings.rating</code>. The rating
     */
    public final TableField<CoreRatingsRecord, UByte> RATING = createField(DSL.name("rating"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "The rating");

    /**
     * The column <code>paradise_forums.core_ratings.ip</code>. IP address
     */
    public final TableField<CoreRatingsRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(46).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "IP address");

    /**
     * The column <code>paradise_forums.core_ratings.rating_date</code>.
     */
    public final TableField<CoreRatingsRecord, Integer> RATING_DATE = createField(DSL.name("rating_date"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    private CoreRatings(Name alias, Table<CoreRatingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreRatings(Name alias, Table<CoreRatingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_ratings</code> table
     * reference
     */
    public CoreRatings(String alias) {
        this(DSL.name(alias), CORE_RATINGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_ratings</code> table
     * reference
     */
    public CoreRatings(Name alias) {
        this(alias, CORE_RATINGS);
    }

    /**
     * Create a <code>paradise_forums.core_ratings</code> table reference
     */
    public CoreRatings() {
        this(DSL.name("core_ratings"), null);
    }

    public <O extends Record> CoreRatings(Table<O> child, ForeignKey<O, CoreRatingsRecord> key) {
        super(child, key, CORE_RATINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_RATINGS_IP, Indexes.CORE_RATINGS_LOOKUP);
    }

    @Override
    public Identity<CoreRatingsRecord, ULong> getIdentity() {
        return (Identity<CoreRatingsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreRatingsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_RATINGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreRatingsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_RATINGS_MEMBER_LOOKUP);
    }

    @Override
    public CoreRatings as(String alias) {
        return new CoreRatings(DSL.name(alias), this);
    }

    @Override
    public CoreRatings as(Name alias) {
        return new CoreRatings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreRatings rename(String name) {
        return new CoreRatings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreRatings rename(Name name) {
        return new CoreRatings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, ULong, ULong, UByte, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
