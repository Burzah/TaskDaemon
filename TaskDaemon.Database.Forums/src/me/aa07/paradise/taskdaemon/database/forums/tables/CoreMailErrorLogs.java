/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreMailErrorLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreMailErrorLogs extends TableImpl<CoreMailErrorLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_mail_error_logs</code>
     */
    public static final CoreMailErrorLogs CORE_MAIL_ERROR_LOGS = new CoreMailErrorLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreMailErrorLogsRecord> getRecordType() {
        return CoreMailErrorLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_mail_error_logs.mlog_id</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, Integer> MLOG_ID = createField(DSL.name("mlog_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_mail_error_logs.mlog_date</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, Integer> MLOG_DATE = createField(DSL.name("mlog_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_mail_error_logs.mlog_to</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_TO = createField(DSL.name("mlog_to"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_mail_error_logs.mlog_from</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_FROM = createField(DSL.name("mlog_from"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_mail_error_logs.mlog_subject</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_SUBJECT = createField(DSL.name("mlog_subject"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_mail_error_logs.mlog_content</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_CONTENT = createField(DSL.name("mlog_content"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_mail_error_logs.mlog_msg</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_MSG = createField(DSL.name("mlog_msg"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_mail_error_logs.mlog_smtp_log</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_SMTP_LOG = createField(DSL.name("mlog_smtp_log"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_mail_error_logs.mlog_resend_data</code>.
     */
    public final TableField<CoreMailErrorLogsRecord, String> MLOG_RESEND_DATA = createField(DSL.name("mlog_resend_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_mail_error_logs.mlog_notification_sent</code>.
     * Whether this has been sent in an AdminCP notification
     */
    public final TableField<CoreMailErrorLogsRecord, Byte> MLOG_NOTIFICATION_SENT = createField(DSL.name("mlog_notification_sent"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Whether this has been sent in an AdminCP notification");

    private CoreMailErrorLogs(Name alias, Table<CoreMailErrorLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreMailErrorLogs(Name alias, Table<CoreMailErrorLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_mail_error_logs</code> table
     * reference
     */
    public CoreMailErrorLogs(String alias) {
        this(DSL.name(alias), CORE_MAIL_ERROR_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_mail_error_logs</code> table
     * reference
     */
    public CoreMailErrorLogs(Name alias) {
        this(alias, CORE_MAIL_ERROR_LOGS);
    }

    /**
     * Create a <code>paradise_forums.core_mail_error_logs</code> table
     * reference
     */
    public CoreMailErrorLogs() {
        this(DSL.name("core_mail_error_logs"), null);
    }

    public <O extends Record> CoreMailErrorLogs(Table<O> child, ForeignKey<O, CoreMailErrorLogsRecord> key) {
        super(child, key, CORE_MAIL_ERROR_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_MAIL_ERROR_LOGS_MLOG_DATE, Indexes.CORE_MAIL_ERROR_LOGS_MLOG_NOTIFIED);
    }

    @Override
    public Identity<CoreMailErrorLogsRecord, Integer> getIdentity() {
        return (Identity<CoreMailErrorLogsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreMailErrorLogsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MAIL_ERROR_LOGS_PRIMARY;
    }

    @Override
    public CoreMailErrorLogs as(String alias) {
        return new CoreMailErrorLogs(DSL.name(alias), this);
    }

    @Override
    public CoreMailErrorLogs as(Name alias) {
        return new CoreMailErrorLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMailErrorLogs rename(String name) {
        return new CoreMailErrorLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMailErrorLogs rename(Name name) {
        return new CoreMailErrorLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, String, String, String, String, String, Byte> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
