/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreLoginFailuresRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginFailures extends TableImpl<CoreLoginFailuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_login_failures</code>
     */
    public static final CoreLoginFailures CORE_LOGIN_FAILURES = new CoreLoginFailures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLoginFailuresRecord> getRecordType() {
        return CoreLoginFailuresRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_login_failures.login_id</code>. ID
     * Number
     */
    public final TableField<CoreLoginFailuresRecord, ULong> LOGIN_ID = createField(DSL.name("login_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column
     * <code>paradise_forums.core_login_failures.login_member_id</code>.
     */
    public final TableField<CoreLoginFailuresRecord, Long> LOGIN_MEMBER_ID = createField(DSL.name("login_member_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>paradise_forums.core_login_failures.login_date</code>.
     */
    public final TableField<CoreLoginFailuresRecord, Integer> LOGIN_DATE = createField(DSL.name("login_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_login_failures.login_email</code>.
     */
    public final TableField<CoreLoginFailuresRecord, String> LOGIN_EMAIL = createField(DSL.name("login_email"), SQLDataType.VARCHAR(150).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_login_failures.login_ip_address</code>.
     */
    public final TableField<CoreLoginFailuresRecord, String> LOGIN_IP_ADDRESS = createField(DSL.name("login_ip_address"), SQLDataType.VARCHAR(46).nullable(false).defaultValue(DSL.inline("'::1'", SQLDataType.VARCHAR)), this, "");

    private CoreLoginFailures(Name alias, Table<CoreLoginFailuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLoginFailures(Name alias, Table<CoreLoginFailuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_failures</code> table
     * reference
     */
    public CoreLoginFailures(String alias) {
        this(DSL.name(alias), CORE_LOGIN_FAILURES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_failures</code> table
     * reference
     */
    public CoreLoginFailures(Name alias) {
        this(alias, CORE_LOGIN_FAILURES);
    }

    /**
     * Create a <code>paradise_forums.core_login_failures</code> table reference
     */
    public CoreLoginFailures() {
        this(DSL.name("core_login_failures"), null);
    }

    public <O extends Record> CoreLoginFailures(Table<O> child, ForeignKey<O, CoreLoginFailuresRecord> key) {
        super(child, key, CORE_LOGIN_FAILURES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_LOGIN_FAILURES_LOOKUP, Indexes.CORE_LOGIN_FAILURES_MEMBER);
    }

    @Override
    public Identity<CoreLoginFailuresRecord, ULong> getIdentity() {
        return (Identity<CoreLoginFailuresRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreLoginFailuresRecord> getPrimaryKey() {
        return Keys.KEY_CORE_LOGIN_FAILURES_PRIMARY;
    }

    @Override
    public CoreLoginFailures as(String alias) {
        return new CoreLoginFailures(DSL.name(alias), this);
    }

    @Override
    public CoreLoginFailures as(Name alias) {
        return new CoreLoginFailures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginFailures rename(String name) {
        return new CoreLoginFailures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginFailures rename(Name name) {
        return new CoreLoginFailures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, Long, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
