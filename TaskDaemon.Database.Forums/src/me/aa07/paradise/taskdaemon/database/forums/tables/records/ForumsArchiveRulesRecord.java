/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.ForumsArchiveRules;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForumsArchiveRulesRecord extends UpdatableRecordImpl<ForumsArchiveRulesRecord> implements Record7<String, String, String, String, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.forums_archive_rules.archive_key</code>.
     */
    public void setArchiveKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.forums_archive_rules.archive_key</code>.
     */
    public String getArchiveKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.forums_archive_rules.archive_app</code>.
     */
    public void setArchiveApp(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.forums_archive_rules.archive_app</code>.
     */
    public String getArchiveApp() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.forums_archive_rules.archive_field</code>.
     */
    public void setArchiveField(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.forums_archive_rules.archive_field</code>.
     */
    public String getArchiveField() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.forums_archive_rules.archive_value</code>.
     */
    public void setArchiveValue(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.forums_archive_rules.archive_value</code>.
     */
    public String getArchiveValue() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.forums_archive_rules.archive_text</code>.
     */
    public void setArchiveText(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.forums_archive_rules.archive_text</code>.
     */
    public String getArchiveText() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>paradise_forums.forums_archive_rules.archive_unit</code>.
     */
    public void setArchiveUnit(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.forums_archive_rules.archive_unit</code>.
     */
    public String getArchiveUnit() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.forums_archive_rules.archive_skip</code>.
     */
    public void setArchiveSkip(Integer value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.forums_archive_rules.archive_skip</code>.
     */
    public Integer getArchiveSkip() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, String, String, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_KEY;
    }

    @Override
    public Field<String> field2() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_APP;
    }

    @Override
    public Field<String> field3() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_FIELD;
    }

    @Override
    public Field<String> field4() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_VALUE;
    }

    @Override
    public Field<String> field5() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_TEXT;
    }

    @Override
    public Field<String> field6() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_UNIT;
    }

    @Override
    public Field<Integer> field7() {
        return ForumsArchiveRules.FORUMS_ARCHIVE_RULES.ARCHIVE_SKIP;
    }

    @Override
    public String component1() {
        return getArchiveKey();
    }

    @Override
    public String component2() {
        return getArchiveApp();
    }

    @Override
    public String component3() {
        return getArchiveField();
    }

    @Override
    public String component4() {
        return getArchiveValue();
    }

    @Override
    public String component5() {
        return getArchiveText();
    }

    @Override
    public String component6() {
        return getArchiveUnit();
    }

    @Override
    public Integer component7() {
        return getArchiveSkip();
    }

    @Override
    public String value1() {
        return getArchiveKey();
    }

    @Override
    public String value2() {
        return getArchiveApp();
    }

    @Override
    public String value3() {
        return getArchiveField();
    }

    @Override
    public String value4() {
        return getArchiveValue();
    }

    @Override
    public String value5() {
        return getArchiveText();
    }

    @Override
    public String value6() {
        return getArchiveUnit();
    }

    @Override
    public Integer value7() {
        return getArchiveSkip();
    }

    @Override
    public ForumsArchiveRulesRecord value1(String value) {
        setArchiveKey(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value2(String value) {
        setArchiveApp(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value3(String value) {
        setArchiveField(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value4(String value) {
        setArchiveValue(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value5(String value) {
        setArchiveText(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value6(String value) {
        setArchiveUnit(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord value7(Integer value) {
        setArchiveSkip(value);
        return this;
    }

    @Override
    public ForumsArchiveRulesRecord values(String value1, String value2, String value3, String value4, String value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ForumsArchiveRulesRecord
     */
    public ForumsArchiveRulesRecord() {
        super(ForumsArchiveRules.FORUMS_ARCHIVE_RULES);
    }

    /**
     * Create a detached, initialised ForumsArchiveRulesRecord
     */
    public ForumsArchiveRulesRecord(String archiveKey, String archiveApp, String archiveField, String archiveValue, String archiveText, String archiveUnit, Integer archiveSkip) {
        super(ForumsArchiveRules.FORUMS_ARCHIVE_RULES);

        setArchiveKey(archiveKey);
        setArchiveApp(archiveApp);
        setArchiveField(archiveField);
        setArchiveValue(archiveValue);
        setArchiveText(archiveText);
        setArchiveUnit(archiveUnit);
        setArchiveSkip(archiveSkip);
    }
}
