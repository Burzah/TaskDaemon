/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreViewUpdatesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreViewUpdates extends TableImpl<CoreViewUpdatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_view_updates</code>
     */
    public static final CoreViewUpdates CORE_VIEW_UPDATES = new CoreViewUpdates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreViewUpdatesRecord> getRecordType() {
        return CoreViewUpdatesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_view_updates.classname</code>. Name
     * of the class the view is for
     */
    public final TableField<CoreViewUpdatesRecord, String> CLASSNAME = createField(DSL.name("classname"), SQLDataType.VARCHAR(150).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Name of the class the view is for");

    /**
     * The column <code>paradise_forums.core_view_updates.id</code>. The ID
     * number for the object
     */
    public final TableField<CoreViewUpdatesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The ID number for the object");

    private CoreViewUpdates(Name alias, Table<CoreViewUpdatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreViewUpdates(Name alias, Table<CoreViewUpdatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_view_updates</code> table
     * reference
     */
    public CoreViewUpdates(String alias) {
        this(DSL.name(alias), CORE_VIEW_UPDATES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_view_updates</code> table
     * reference
     */
    public CoreViewUpdates(Name alias) {
        this(alias, CORE_VIEW_UPDATES);
    }

    /**
     * Create a <code>paradise_forums.core_view_updates</code> table reference
     */
    public CoreViewUpdates() {
        this(DSL.name("core_view_updates"), null);
    }

    public <O extends Record> CoreViewUpdates(Table<O> child, ForeignKey<O, CoreViewUpdatesRecord> key) {
        super(child, key, CORE_VIEW_UPDATES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_VIEW_UPDATES_CLASSNAME_AND_ID);
    }

    @Override
    public CoreViewUpdates as(String alias) {
        return new CoreViewUpdates(DSL.name(alias), this);
    }

    @Override
    public CoreViewUpdates as(Name alias) {
        return new CoreViewUpdates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreViewUpdates rename(String name) {
        return new CoreViewUpdates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreViewUpdates rename(Name name) {
        return new CoreViewUpdates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, ULong> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
