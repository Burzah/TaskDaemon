/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreSysLangWords;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSysLangWordsRecord extends UpdatableRecordImpl<CoreSysLangWordsRecord> implements Record13<UInteger, UInteger, String, Long, Integer, String, String, String, String, String, UByte, UByte, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_id</code>. UID
     */
    public void setWordId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_id</code>. UID
     */
    public UInteger getWordId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.lang_id</code>. The
     * ID number for the language
     */
    public void setLangId(UInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.lang_id</code>. The
     * ID number for the language
     */
    public UInteger getLangId() {
        return (UInteger) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_app</code>. The
     * application key, if word belongs to an application
     */
    public void setWordApp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_app</code>. The
     * application key, if word belongs to an application
     */
    public String getWordApp() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_plugin</code>.
     * The plugin ID, if word belongs to a plugin
     */
    public void setWordPlugin(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_plugin</code>.
     * The plugin ID, if word belongs to a plugin
     */
    public Long getWordPlugin() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_theme</code>.
     * The theme ID, if the language string belongs to a theme.
     */
    public void setWordTheme(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_theme</code>.
     * The theme ID, if the language string belongs to a theme.
     */
    public Integer getWordTheme() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_key</code>. The
     * key
     */
    public void setWordKey(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_key</code>. The
     * key
     */
    public String getWordKey() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_default</code>.
     * The default value
     */
    public void setWordDefault(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_default</code>.
     * The default value
     */
    public String getWordDefault() {
        return (String) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_custom</code>.
     * The current value
     */
    public void setWordCustom(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_custom</code>.
     * The current value
     */
    public String getWordCustom() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_sys_lang_words.word_default_version</code>.
     * The application/plugin version the word was last changed in
     */
    public void setWordDefaultVersion(String value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_sys_lang_words.word_default_version</code>.
     * The application/plugin version the word was last changed in
     */
    public String getWordDefaultVersion() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_sys_lang_words.word_custom_version</code>. The
     * application/plugin version installed when this word was customised
     */
    public void setWordCustomVersion(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_sys_lang_words.word_custom_version</code>. The
     * application/plugin version installed when this word was customised
     */
    public String getWordCustomVersion() {
        return (String) get(9);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_js</code>.
     * Binary if this word should be available to JavaScript
     */
    public void setWordJs(UByte value) {
        set(10, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_js</code>.
     * Binary if this word should be available to JavaScript
     */
    public UByte getWordJs() {
        return (UByte) get(10);
    }

    /**
     * Setter for <code>paradise_forums.core_sys_lang_words.word_export</code>.
     * Binary if this word should be exported (i.e. is not a forum/etc name)
     */
    public void setWordExport(UByte value) {
        set(11, value);
    }

    /**
     * Getter for <code>paradise_forums.core_sys_lang_words.word_export</code>.
     * Binary if this word should be exported (i.e. is not a forum/etc name)
     */
    public UByte getWordExport() {
        return (UByte) get(11);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_sys_lang_words.word_is_custom</code>. Word is
     * custom to the site?
     */
    public void setWordIsCustom(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_sys_lang_words.word_is_custom</code>. Word is
     * custom to the site?
     */
    public Boolean getWordIsCustom() {
        return (Boolean) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<UInteger, UInteger, String, Long, Integer, String, String, String, String, String, UByte, UByte, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<UInteger, UInteger, String, Long, Integer, String, String, String, String, String, UByte, UByte, Boolean> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_ID;
    }

    @Override
    public Field<UInteger> field2() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.LANG_ID;
    }

    @Override
    public Field<String> field3() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_APP;
    }

    @Override
    public Field<Long> field4() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_PLUGIN;
    }

    @Override
    public Field<Integer> field5() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_THEME;
    }

    @Override
    public Field<String> field6() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_KEY;
    }

    @Override
    public Field<String> field7() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_DEFAULT;
    }

    @Override
    public Field<String> field8() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_CUSTOM;
    }

    @Override
    public Field<String> field9() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_DEFAULT_VERSION;
    }

    @Override
    public Field<String> field10() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_CUSTOM_VERSION;
    }

    @Override
    public Field<UByte> field11() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_JS;
    }

    @Override
    public Field<UByte> field12() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_EXPORT;
    }

    @Override
    public Field<Boolean> field13() {
        return CoreSysLangWords.CORE_SYS_LANG_WORDS.WORD_IS_CUSTOM;
    }

    @Override
    public UInteger component1() {
        return getWordId();
    }

    @Override
    public UInteger component2() {
        return getLangId();
    }

    @Override
    public String component3() {
        return getWordApp();
    }

    @Override
    public Long component4() {
        return getWordPlugin();
    }

    @Override
    public Integer component5() {
        return getWordTheme();
    }

    @Override
    public String component6() {
        return getWordKey();
    }

    @Override
    public String component7() {
        return getWordDefault();
    }

    @Override
    public String component8() {
        return getWordCustom();
    }

    @Override
    public String component9() {
        return getWordDefaultVersion();
    }

    @Override
    public String component10() {
        return getWordCustomVersion();
    }

    @Override
    public UByte component11() {
        return getWordJs();
    }

    @Override
    public UByte component12() {
        return getWordExport();
    }

    @Override
    public Boolean component13() {
        return getWordIsCustom();
    }

    @Override
    public UInteger value1() {
        return getWordId();
    }

    @Override
    public UInteger value2() {
        return getLangId();
    }

    @Override
    public String value3() {
        return getWordApp();
    }

    @Override
    public Long value4() {
        return getWordPlugin();
    }

    @Override
    public Integer value5() {
        return getWordTheme();
    }

    @Override
    public String value6() {
        return getWordKey();
    }

    @Override
    public String value7() {
        return getWordDefault();
    }

    @Override
    public String value8() {
        return getWordCustom();
    }

    @Override
    public String value9() {
        return getWordDefaultVersion();
    }

    @Override
    public String value10() {
        return getWordCustomVersion();
    }

    @Override
    public UByte value11() {
        return getWordJs();
    }

    @Override
    public UByte value12() {
        return getWordExport();
    }

    @Override
    public Boolean value13() {
        return getWordIsCustom();
    }

    @Override
    public CoreSysLangWordsRecord value1(UInteger value) {
        setWordId(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value2(UInteger value) {
        setLangId(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value3(String value) {
        setWordApp(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value4(Long value) {
        setWordPlugin(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value5(Integer value) {
        setWordTheme(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value6(String value) {
        setWordKey(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value7(String value) {
        setWordDefault(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value8(String value) {
        setWordCustom(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value9(String value) {
        setWordDefaultVersion(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value10(String value) {
        setWordCustomVersion(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value11(UByte value) {
        setWordJs(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value12(UByte value) {
        setWordExport(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord value13(Boolean value) {
        setWordIsCustom(value);
        return this;
    }

    @Override
    public CoreSysLangWordsRecord values(UInteger value1, UInteger value2, String value3, Long value4, Integer value5, String value6, String value7, String value8, String value9, String value10, UByte value11, UByte value12, Boolean value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreSysLangWordsRecord
     */
    public CoreSysLangWordsRecord() {
        super(CoreSysLangWords.CORE_SYS_LANG_WORDS);
    }

    /**
     * Create a detached, initialised CoreSysLangWordsRecord
     */
    public CoreSysLangWordsRecord(UInteger wordId, UInteger langId, String wordApp, Long wordPlugin, Integer wordTheme, String wordKey, String wordDefault, String wordCustom, String wordDefaultVersion, String wordCustomVersion, UByte wordJs, UByte wordExport, Boolean wordIsCustom) {
        super(CoreSysLangWords.CORE_SYS_LANG_WORDS);

        setWordId(wordId);
        setLangId(langId);
        setWordApp(wordApp);
        setWordPlugin(wordPlugin);
        setWordTheme(wordTheme);
        setWordKey(wordKey);
        setWordDefault(wordDefault);
        setWordCustom(wordCustom);
        setWordDefaultVersion(wordDefaultVersion);
        setWordCustomVersion(wordCustomVersion);
        setWordJs(wordJs);
        setWordExport(wordExport);
        setWordIsCustom(wordIsCustom);
    }
}
