/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsDateType;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsDefaultView;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsFollow;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsOwnership;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsRead;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsSolved;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsSort;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreStreamsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreStreams extends TableImpl<CoreStreamsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_streams</code>
     */
    public static final CoreStreams CORE_STREAMS = new CoreStreams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreStreamsRecord> getRecordType() {
        return CoreStreamsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_streams.id</code>. ID Number
     */
    public final TableField<CoreStreamsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_streams.classes</code>. The classes
     * this stream will pull from or null for all
     */
    public final TableField<CoreStreamsRecord, String> CLASSES = createField(DSL.name("classes"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The classes this stream will pull from or null for all");

    /**
     * The column <code>paradise_forums.core_streams.containers</code>. A
     * JSON-encoded array of classes to allowed containers or NULL for all
     */
    public final TableField<CoreStreamsRecord, String> CONTAINERS = createField(DSL.name("containers"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "A JSON-encoded array of classes to allowed containers or NULL for all");

    /**
     * The column <code>paradise_forums.core_streams.ownership</code>. Stream
     * pulls all content or only content the viewer has started or posted in
     */
    public final TableField<CoreStreamsRecord, CoreStreamsOwnership> OWNERSHIP = createField(DSL.name("ownership"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsOwnership.class), this, "Stream pulls all content or only content the viewer has started or posted in");

    /**
     * The column <code>paradise_forums.core_streams.read</code>. If the stream
     * only includes unread items
     */
    public final TableField<CoreStreamsRecord, CoreStreamsRead> READ = createField(DSL.name("read"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsRead.class), this, "If the stream only includes unread items");

    /**
     * The column <code>paradise_forums.core_streams.follow</code>. If the
     * stream only shows followed content
     */
    public final TableField<CoreStreamsRecord, CoreStreamsFollow> FOLLOW = createField(DSL.name("follow"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsFollow.class), this, "If the stream only shows followed content");

    /**
     * The column <code>paradise_forums.core_streams.date_type</code>. The date
     * range for the stream
     */
    public final TableField<CoreStreamsRecord, CoreStreamsDateType> DATE_TYPE = createField(DSL.name("date_type"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsDateType.class), this, "The date range for the stream");

    /**
     * The column <code>paradise_forums.core_streams.date_start</code>. If using
     * a custom date, the start date
     */
    public final TableField<CoreStreamsRecord, Integer> DATE_START = createField(DSL.name("date_start"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "If using a custom date, the start date");

    /**
     * The column <code>paradise_forums.core_streams.date_end</code>. If using a
     * custom date, the end date
     */
    public final TableField<CoreStreamsRecord, Integer> DATE_END = createField(DSL.name("date_end"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "If using a custom date, the end date");

    /**
     * The column <code>paradise_forums.core_streams.position</code>. The
     * position in the list
     */
    public final TableField<CoreStreamsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "The position in the list");

    /**
     * The column <code>paradise_forums.core_streams.member</code>. The member
     * who created the stream or null for a global stream
     */
    public final TableField<CoreStreamsRecord, Long> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "The member who created the stream or null for a global stream");

    /**
     * The column <code>paradise_forums.core_streams.sort</code>. Whether the
     * stream sorts newest first or oldest first by default
     */
    public final TableField<CoreStreamsRecord, CoreStreamsSort> SORT = createField(DSL.name("sort"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("'newest'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsSort.class), this, "Whether the stream sorts newest first or oldest first by default");

    /**
     * The column <code>paradise_forums.core_streams.date_relative_days</code>.
     * If using a relative date period, the number of days
     */
    public final TableField<CoreStreamsRecord, UInteger> DATE_RELATIVE_DAYS = createField(DSL.name("date_relative_days"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "If using a relative date period, the number of days");

    /**
     * The column <code>paradise_forums.core_streams.custom_members</code>. If
     * using custom ownership, the member IDs
     */
    public final TableField<CoreStreamsRecord, String> CUSTOM_MEMBERS = createField(DSL.name("custom_members"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "If using custom ownership, the member IDs");

    /**
     * The column <code>paradise_forums.core_streams.tags</code>. Tags to match
     */
    public final TableField<CoreStreamsRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Tags to match");

    /**
     * The column <code>paradise_forums.core_streams.followed_types</code>. If
     * filtering by followed content, what kind of follows to include
     */
    public final TableField<CoreStreamsRecord, String> FOLLOWED_TYPES = createField(DSL.name("followed_types"), SQLDataType.VARCHAR(24).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "If filtering by followed content, what kind of follows to include");

    /**
     * The column <code>paradise_forums.core_streams.include_comments</code>.
     * Should comments and reviews be included?
     */
    public final TableField<CoreStreamsRecord, Byte> INCLUDE_COMMENTS = createField(DSL.name("include_comments"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Should comments and reviews be included?");

    /**
     * The column <code>paradise_forums.core_streams.title</code>. If this is a
     * member-created stream, the title (admin created streams use language
     * strings)
     */
    public final TableField<CoreStreamsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "If this is a member-created stream, the title (admin created streams use language strings)");

    /**
     * The column <code>paradise_forums.core_streams.default</code>. Default
     * item shows to the right of the top breadcrumb navigation
     */
    public final TableField<CoreStreamsRecord, UByte> DEFAULT = createField(DSL.name("default"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Default item shows to the right of the top breadcrumb navigation");

    /**
     * The column <code>paradise_forums.core_streams.default_view</code>. Should
     * a stream show in a condensed or expanded layout by default
     */
    public final TableField<CoreStreamsRecord, CoreStreamsDefaultView> DEFAULT_VIEW = createField(DSL.name("default_view"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("'expanded'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsDefaultView.class), this, "Should a stream show in a condensed or expanded layout by default");

    /**
     * The column <code>paradise_forums.core_streams.clubs</code>.
     * Comma-delimited list of club IDs or 0 to exclude clubs, or NULL to not
     * filter by clubs
     */
    public final TableField<CoreStreamsRecord, String> CLUBS = createField(DSL.name("clubs"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Comma-delimited list of club IDs or 0 to exclude clubs, or NULL to not filter by clubs");

    /**
     * The column <code>paradise_forums.core_streams.solved</code>. The solved
     * status of the item
     */
    public final TableField<CoreStreamsRecord, CoreStreamsSolved> SOLVED = createField(DSL.name("solved"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("'all'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreStreamsSolved.class), this, "The solved status of the item");

    private CoreStreams(Name alias, Table<CoreStreamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreStreams(Name alias, Table<CoreStreamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_streams</code> table
     * reference
     */
    public CoreStreams(String alias) {
        this(DSL.name(alias), CORE_STREAMS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_streams</code> table
     * reference
     */
    public CoreStreams(Name alias) {
        this(alias, CORE_STREAMS);
    }

    /**
     * Create a <code>paradise_forums.core_streams</code> table reference
     */
    public CoreStreams() {
        this(DSL.name("core_streams"), null);
    }

    public <O extends Record> CoreStreams(Table<O> child, ForeignKey<O, CoreStreamsRecord> key) {
        super(child, key, CORE_STREAMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_STREAMS_DEFAULT, Indexes.CORE_STREAMS_MEMBER);
    }

    @Override
    public Identity<CoreStreamsRecord, ULong> getIdentity() {
        return (Identity<CoreStreamsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreStreamsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_STREAMS_PRIMARY;
    }

    @Override
    public CoreStreams as(String alias) {
        return new CoreStreams(DSL.name(alias), this);
    }

    @Override
    public CoreStreams as(Name alias) {
        return new CoreStreams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStreams rename(String name) {
        return new CoreStreams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStreams rename(Name name) {
        return new CoreStreams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<ULong, String, String, CoreStreamsOwnership, CoreStreamsRead, CoreStreamsFollow, CoreStreamsDateType, Integer, Integer, Integer, Long, CoreStreamsSort, UInteger, String, String, String, Byte, String, UByte, CoreStreamsDefaultView, String, CoreStreamsSolved> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
