/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreAcronymsAType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAcronymsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAcronyms extends TableImpl<CoreAcronymsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_acronyms</code>
     */
    public static final CoreAcronyms CORE_ACRONYMS = new CoreAcronyms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAcronymsRecord> getRecordType() {
        return CoreAcronymsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_acronyms.a_id</code>.
     */
    public final TableField<CoreAcronymsRecord, UInteger> A_ID = createField(DSL.name("a_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_acronyms.a_short</code>.
     */
    public final TableField<CoreAcronymsRecord, String> A_SHORT = createField(DSL.name("a_short"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_acronyms.a_long</code>.
     */
    public final TableField<CoreAcronymsRecord, String> A_LONG = createField(DSL.name("a_long"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_acronyms.a_casesensitive</code>.
     */
    public final TableField<CoreAcronymsRecord, Byte> A_CASESENSITIVE = createField(DSL.name("a_casesensitive"), SQLDataType.TINYINT.defaultValue(DSL.inline("NULL", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_acronyms.a_type</code>.
     */
    public final TableField<CoreAcronymsRecord, CoreAcronymsAType> A_TYPE = createField(DSL.name("a_type"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("'acronym'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreAcronymsAType.class), this, "");

    private CoreAcronyms(Name alias, Table<CoreAcronymsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAcronyms(Name alias, Table<CoreAcronymsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_acronyms</code> table
     * reference
     */
    public CoreAcronyms(String alias) {
        this(DSL.name(alias), CORE_ACRONYMS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_acronyms</code> table
     * reference
     */
    public CoreAcronyms(Name alias) {
        this(alias, CORE_ACRONYMS);
    }

    /**
     * Create a <code>paradise_forums.core_acronyms</code> table reference
     */
    public CoreAcronyms() {
        this(DSL.name("core_acronyms"), null);
    }

    public <O extends Record> CoreAcronyms(Table<O> child, ForeignKey<O, CoreAcronymsRecord> key) {
        super(child, key, CORE_ACRONYMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ACRONYMS_A_SHORT);
    }

    @Override
    public Identity<CoreAcronymsRecord, UInteger> getIdentity() {
        return (Identity<CoreAcronymsRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreAcronymsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ACRONYMS_PRIMARY;
    }

    @Override
    public CoreAcronyms as(String alias) {
        return new CoreAcronyms(DSL.name(alias), this);
    }

    @Override
    public CoreAcronyms as(Name alias) {
        return new CoreAcronyms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcronyms rename(String name) {
        return new CoreAcronyms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcronyms rename(Name name) {
        return new CoreAcronyms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UInteger, String, String, Byte, CoreAcronymsAType> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
