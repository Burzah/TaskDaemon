/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsPrompt;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsResponseType;
import me.aa07.paradise.taskdaemon.database.forums.tables.CoreOauthAuthorizePrompts;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthAuthorizePromptsRecord extends UpdatableRecordImpl<CoreOauthAuthorizePromptsRecord> implements Record11<String, String, CoreOauthAuthorizePromptsResponseType, String, String, String, UInteger, UByte, CoreOauthAuthorizePromptsPrompt, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.session_id</code>. The
     * session ID
     */
    public void setSessionId(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.session_id</code>. The
     * session ID
     */
    public String getSessionId() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.client_id</code>. The
     * client ID
     */
    public void setClientId(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.client_id</code>. The
     * client ID
     */
    public String getClientId() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.response_type</code>.
     * The response type
     */
    public void setResponseType(CoreOauthAuthorizePromptsResponseType value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.response_type</code>.
     * The response type
     */
    public CoreOauthAuthorizePromptsResponseType getResponseType() {
        return (CoreOauthAuthorizePromptsResponseType) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.redirect_uri</code>.
     * The provided redirect URI
     */
    public void setRedirectUri(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.redirect_uri</code>.
     * The provided redirect URI
     */
    public String getRedirectUri() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.scope</code>.
     * space-delimited scope
     */
    public void setScope(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.scope</code>.
     * space-delimited scope
     */
    public String getScope() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.state</code>.
     */
    public void setState(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.state</code>.
     */
    public String getState() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.timestamp</code>. Unix
     * timestamp of when this prompt was initially shown
     */
    public void setTimestamp(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.timestamp</code>. Unix
     * timestamp of when this prompt was initially shown
     */
    public UInteger getTimestamp() {
        return (UInteger) get(6);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.logged_in</code>. Has
     * the user logged in yet (for prompts that require it)?
     */
    public void setLoggedIn(UByte value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.logged_in</code>. Has
     * the user logged in yet (for prompts that require it)?
     */
    public UByte getLoggedIn() {
        return (UByte) get(7);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.prompt</code>. The
     * requested prompt type
     */
    public void setPrompt(CoreOauthAuthorizePromptsPrompt value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.prompt</code>. The
     * requested prompt type
     */
    public CoreOauthAuthorizePromptsPrompt getPrompt() {
        return (CoreOauthAuthorizePromptsPrompt) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge</code>.
     * The PKCE code challenge, if one was provided by the client
     */
    public void setCodeChallenge(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge</code>.
     * The PKCE code challenge, if one was provided by the client
     */
    public String getCodeChallenge() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge_method</code>.
     * The PKCE code challenge method, if applicable
     */
    public void setCodeChallengeMethod(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge_method</code>.
     * The PKCE code challenge method, if applicable
     */
    public String getCodeChallengeMethod() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, CoreOauthAuthorizePromptsResponseType, String, String, String, UInteger, UByte, CoreOauthAuthorizePromptsPrompt, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<String, String, CoreOauthAuthorizePromptsResponseType, String, String, String, UInteger, UByte, CoreOauthAuthorizePromptsPrompt, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.SESSION_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.CLIENT_ID;
    }

    @Override
    public Field<CoreOauthAuthorizePromptsResponseType> field3() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.RESPONSE_TYPE;
    }

    @Override
    public Field<String> field4() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.REDIRECT_URI;
    }

    @Override
    public Field<String> field5() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.SCOPE;
    }

    @Override
    public Field<String> field6() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.STATE;
    }

    @Override
    public Field<UInteger> field7() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.TIMESTAMP;
    }

    @Override
    public Field<UByte> field8() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.LOGGED_IN;
    }

    @Override
    public Field<CoreOauthAuthorizePromptsPrompt> field9() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.PROMPT;
    }

    @Override
    public Field<String> field10() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.CODE_CHALLENGE;
    }

    @Override
    public Field<String> field11() {
        return CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS.CODE_CHALLENGE_METHOD;
    }

    @Override
    public String component1() {
        return getSessionId();
    }

    @Override
    public String component2() {
        return getClientId();
    }

    @Override
    public CoreOauthAuthorizePromptsResponseType component3() {
        return getResponseType();
    }

    @Override
    public String component4() {
        return getRedirectUri();
    }

    @Override
    public String component5() {
        return getScope();
    }

    @Override
    public String component6() {
        return getState();
    }

    @Override
    public UInteger component7() {
        return getTimestamp();
    }

    @Override
    public UByte component8() {
        return getLoggedIn();
    }

    @Override
    public CoreOauthAuthorizePromptsPrompt component9() {
        return getPrompt();
    }

    @Override
    public String component10() {
        return getCodeChallenge();
    }

    @Override
    public String component11() {
        return getCodeChallengeMethod();
    }

    @Override
    public String value1() {
        return getSessionId();
    }

    @Override
    public String value2() {
        return getClientId();
    }

    @Override
    public CoreOauthAuthorizePromptsResponseType value3() {
        return getResponseType();
    }

    @Override
    public String value4() {
        return getRedirectUri();
    }

    @Override
    public String value5() {
        return getScope();
    }

    @Override
    public String value6() {
        return getState();
    }

    @Override
    public UInteger value7() {
        return getTimestamp();
    }

    @Override
    public UByte value8() {
        return getLoggedIn();
    }

    @Override
    public CoreOauthAuthorizePromptsPrompt value9() {
        return getPrompt();
    }

    @Override
    public String value10() {
        return getCodeChallenge();
    }

    @Override
    public String value11() {
        return getCodeChallengeMethod();
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value1(String value) {
        setSessionId(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value2(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value3(CoreOauthAuthorizePromptsResponseType value) {
        setResponseType(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value4(String value) {
        setRedirectUri(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value5(String value) {
        setScope(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value6(String value) {
        setState(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value7(UInteger value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value8(UByte value) {
        setLoggedIn(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value9(CoreOauthAuthorizePromptsPrompt value) {
        setPrompt(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value10(String value) {
        setCodeChallenge(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord value11(String value) {
        setCodeChallengeMethod(value);
        return this;
    }

    @Override
    public CoreOauthAuthorizePromptsRecord values(String value1, String value2, CoreOauthAuthorizePromptsResponseType value3, String value4, String value5, String value6, UInteger value7, UByte value8, CoreOauthAuthorizePromptsPrompt value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreOauthAuthorizePromptsRecord
     */
    public CoreOauthAuthorizePromptsRecord() {
        super(CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS);
    }

    /**
     * Create a detached, initialised CoreOauthAuthorizePromptsRecord
     */
    public CoreOauthAuthorizePromptsRecord(String sessionId, String clientId, CoreOauthAuthorizePromptsResponseType responseType, String redirectUri, String scope, String state, UInteger timestamp, UByte loggedIn, CoreOauthAuthorizePromptsPrompt prompt, String codeChallenge, String codeChallengeMethod) {
        super(CoreOauthAuthorizePrompts.CORE_OAUTH_AUTHORIZE_PROMPTS);

        setSessionId(sessionId);
        setClientId(clientId);
        setResponseType(responseType);
        setRedirectUri(redirectUri);
        setScope(scope);
        setState(state);
        setTimestamp(timestamp);
        setLoggedIn(loggedIn);
        setPrompt(prompt);
        setCodeChallenge(codeChallenge);
        setCodeChallengeMethod(codeChallengeMethod);
    }
}
