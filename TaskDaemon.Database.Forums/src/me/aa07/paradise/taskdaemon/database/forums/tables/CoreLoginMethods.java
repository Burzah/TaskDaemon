/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreLoginMethodsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginMethods extends TableImpl<CoreLoginMethodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_login_methods</code>
     */
    public static final CoreLoginMethods CORE_LOGIN_METHODS = new CoreLoginMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLoginMethodsRecord> getRecordType() {
        return CoreLoginMethodsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_login_methods.login_id</code>. ID
     * Number
     */
    public final TableField<CoreLoginMethodsRecord, ULong> LOGIN_ID = createField(DSL.name("login_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column
     * <code>paradise_forums.core_login_methods.login_classname</code>.
     * Handler's class name
     */
    public final TableField<CoreLoginMethodsRecord, String> LOGIN_CLASSNAME = createField(DSL.name("login_classname"), SQLDataType.VARCHAR(255).nullable(false), this, "Handler's class name");

    /**
     * The column <code>paradise_forums.core_login_methods.login_order</code>.
     * The order to process in 
     */
    public final TableField<CoreLoginMethodsRecord, UInteger> LOGIN_ORDER = createField(DSL.name("login_order"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The order to process in ");

    /**
     * The column <code>paradise_forums.core_login_methods.login_acp</code>.
     * Boolean value indicating if method can be used for ACP logins
     */
    public final TableField<CoreLoginMethodsRecord, UByte> LOGIN_ACP = createField(DSL.name("login_acp"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if method can be used for ACP logins");

    /**
     * The column
     * <code>paradise_forums.core_login_methods.login_settings</code>.
     * JSON-encoded handler-specific setting values
     */
    public final TableField<CoreLoginMethodsRecord, String> LOGIN_SETTINGS = createField(DSL.name("login_settings"), SQLDataType.CLOB.nullable(false), this, "JSON-encoded handler-specific setting values");

    /**
     * The column <code>paradise_forums.core_login_methods.login_enabled</code>.
     * Boolean value indicating if method is enabled
     */
    public final TableField<CoreLoginMethodsRecord, UByte> LOGIN_ENABLED = createField(DSL.name("login_enabled"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if method is enabled");

    /**
     * The column
     * <code>paradise_forums.core_login_methods.login_register</code>. Boolean
     * value indicating if users can register using this method
     */
    public final TableField<CoreLoginMethodsRecord, UByte> LOGIN_REGISTER = createField(DSL.name("login_register"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if users can register using this method");

    /**
     * The column <code>paradise_forums.core_login_methods.login_front</code>.
     * Boolean value indicating if method can be used for frontend logins
     */
    public final TableField<CoreLoginMethodsRecord, UInteger> LOGIN_FRONT = createField(DSL.name("login_front"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGERUNSIGNED)), this, "Boolean value indicating if method can be used for frontend logins");

    private CoreLoginMethods(Name alias, Table<CoreLoginMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLoginMethods(Name alias, Table<CoreLoginMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_methods</code> table
     * reference
     */
    public CoreLoginMethods(String alias) {
        this(DSL.name(alias), CORE_LOGIN_METHODS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_login_methods</code> table
     * reference
     */
    public CoreLoginMethods(Name alias) {
        this(alias, CORE_LOGIN_METHODS);
    }

    /**
     * Create a <code>paradise_forums.core_login_methods</code> table reference
     */
    public CoreLoginMethods() {
        this(DSL.name("core_login_methods"), null);
    }

    public <O extends Record> CoreLoginMethods(Table<O> child, ForeignKey<O, CoreLoginMethodsRecord> key) {
        super(child, key, CORE_LOGIN_METHODS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_LOGIN_METHODS_LOGIN_ENABLED);
    }

    @Override
    public Identity<CoreLoginMethodsRecord, ULong> getIdentity() {
        return (Identity<CoreLoginMethodsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreLoginMethodsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_LOGIN_METHODS_PRIMARY;
    }

    @Override
    public CoreLoginMethods as(String alias) {
        return new CoreLoginMethods(DSL.name(alias), this);
    }

    @Override
    public CoreLoginMethods as(Name alias) {
        return new CoreLoginMethods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginMethods rename(String name) {
        return new CoreLoginMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLoginMethods rename(Name name) {
        return new CoreLoginMethods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, UInteger, UByte, String, UByte, UByte, UInteger> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
