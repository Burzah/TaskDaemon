/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAchievementsLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAchievementsLog extends TableImpl<CoreAchievementsLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_achievements_log</code>
     */
    public static final CoreAchievementsLog CORE_ACHIEVEMENTS_LOG = new CoreAchievementsLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAchievementsLogRecord> getRecordType() {
        return CoreAchievementsLogRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_achievements_log.id</code>. ID
     * Number
     */
    public final TableField<CoreAchievementsLogRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_achievements_log.datetime</code>. A
     * unix timestamp of when this occurred
     */
    public final TableField<CoreAchievementsLogRecord, UInteger> DATETIME = createField(DSL.name("datetime"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "A unix timestamp of when this occurred");

    /**
     * The column <code>paradise_forums.core_achievements_log.identifier</code>.
     * An identifier for the thing the action is being performed on (e.g. if
     * this is for making a post, the post ID)
     */
    public final TableField<CoreAchievementsLogRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.VARCHAR(50).nullable(false), this, "An identifier for the thing the action is being performed on (e.g. if this is for making a post, the post ID)");

    /**
     * The column <code>paradise_forums.core_achievements_log.action</code>. The
     * action that was performed
     */
    public final TableField<CoreAchievementsLogRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(100).nullable(false), this, "The action that was performed");

    private CoreAchievementsLog(Name alias, Table<CoreAchievementsLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAchievementsLog(Name alias, Table<CoreAchievementsLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_achievements_log</code>
     * table reference
     */
    public CoreAchievementsLog(String alias) {
        this(DSL.name(alias), CORE_ACHIEVEMENTS_LOG);
    }

    /**
     * Create an aliased <code>paradise_forums.core_achievements_log</code>
     * table reference
     */
    public CoreAchievementsLog(Name alias) {
        this(alias, CORE_ACHIEVEMENTS_LOG);
    }

    /**
     * Create a <code>paradise_forums.core_achievements_log</code> table
     * reference
     */
    public CoreAchievementsLog() {
        this(DSL.name("core_achievements_log"), null);
    }

    public <O extends Record> CoreAchievementsLog(Table<O> child, ForeignKey<O, CoreAchievementsLogRecord> key) {
        super(child, key, CORE_ACHIEVEMENTS_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ACHIEVEMENTS_LOG_DATETIME);
    }

    @Override
    public Identity<CoreAchievementsLogRecord, ULong> getIdentity() {
        return (Identity<CoreAchievementsLogRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreAchievementsLogRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ACHIEVEMENTS_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreAchievementsLogRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_ACHIEVEMENTS_LOG_LOOKUP);
    }

    @Override
    public CoreAchievementsLog as(String alias) {
        return new CoreAchievementsLog(DSL.name(alias), this);
    }

    @Override
    public CoreAchievementsLog as(Name alias) {
        return new CoreAchievementsLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAchievementsLog rename(String name) {
        return new CoreAchievementsLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAchievementsLog rename(Name name) {
        return new CoreAchievementsLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, UInteger, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
