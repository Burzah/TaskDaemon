/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreWidgets;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreWidgetsRecord extends UpdatableRecordImpl<CoreWidgetsRecord> implements Record11<ULong, String, String, String, String, String, String, String, UByte, String, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_widgets.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.key</code>. The widget key
     */
    public void setKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.key</code>. The widget key
     */
    public String getKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.app</code>. The application
     * which owns the widget (if applicable)
     */
    public void setApp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.app</code>. The application
     * which owns the widget (if applicable)
     */
    public String getApp() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.plugin</code>. The plugin
     * which owns the widget (if applicable)
     */
    public void setPlugin(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.plugin</code>. The plugin
     * which owns the widget (if applicable)
     */
    public String getPlugin() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.class</code>. What type of
     * widget is this? e.g. \IPS\Widget\StaticCache
     */
    public void setClass_(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.class</code>. What type of
     * widget is this? e.g. \IPS\Widget\StaticCache
     */
    public String getClass_() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.caches</code>. JSON encoded
     * array of cache keys to be referenced when deleting caches
     */
    public void setCaches(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.caches</code>. JSON encoded
     * array of cache keys to be referenced when deleting caches
     */
    public String getCaches() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.restrict</code>. JSON array
     * of owner app restrictions (e.g. core restricts to sidebar only, content
     * restricts to IP.Content only)
     */
    public void setRestrict(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.restrict</code>. JSON array
     * of owner app restrictions (e.g. core restricts to sidebar only, content
     * restricts to IP.Content only)
     */
    public String getRestrict() {
        return (String) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.default_area</code>. If no
     * sidebar configuration is available for a page, all of the widgets for
     * that app are loaded. This field determines which area on the page the
     * default will show.
     */
    public void setDefaultArea(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.default_area</code>. If no
     * sidebar configuration is available for a page, all of the widgets for
     * that app are loaded. This field determines which area on the page the
     * default will show.
     */
    public String getDefaultArea() {
        return (String) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.allow_reuse</code>. If 1,
     * the widget can be re-used instead of having the block vanish from the
     * manager's block list.
     */
    public void setAllowReuse(UByte value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.allow_reuse</code>. If 1,
     * the widget can be re-used instead of having the block vanish from the
     * manager's block list.
     */
    public UByte getAllowReuse() {
        return (UByte) get(8);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.menu_style</code>.
     */
    public void setMenuStyle(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.menu_style</code>.
     */
    public String getMenuStyle() {
        return (String) get(9);
    }

    /**
     * Setter for <code>paradise_forums.core_widgets.embeddable</code>.
     * Determines if Pages can embed this widget in a custom block.
     */
    public void setEmbeddable(UByte value) {
        set(10, value);
    }

    /**
     * Getter for <code>paradise_forums.core_widgets.embeddable</code>.
     * Determines if Pages can embed this widget in a custom block.
     */
    public UByte getEmbeddable() {
        return (UByte) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, String, String, String, String, String, String, String, UByte, String, UByte> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<ULong, String, String, String, String, String, String, String, UByte, String, UByte> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreWidgets.CORE_WIDGETS.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreWidgets.CORE_WIDGETS.KEY;
    }

    @Override
    public Field<String> field3() {
        return CoreWidgets.CORE_WIDGETS.APP;
    }

    @Override
    public Field<String> field4() {
        return CoreWidgets.CORE_WIDGETS.PLUGIN;
    }

    @Override
    public Field<String> field5() {
        return CoreWidgets.CORE_WIDGETS.CLASS;
    }

    @Override
    public Field<String> field6() {
        return CoreWidgets.CORE_WIDGETS.CACHES;
    }

    @Override
    public Field<String> field7() {
        return CoreWidgets.CORE_WIDGETS.RESTRICT;
    }

    @Override
    public Field<String> field8() {
        return CoreWidgets.CORE_WIDGETS.DEFAULT_AREA;
    }

    @Override
    public Field<UByte> field9() {
        return CoreWidgets.CORE_WIDGETS.ALLOW_REUSE;
    }

    @Override
    public Field<String> field10() {
        return CoreWidgets.CORE_WIDGETS.MENU_STYLE;
    }

    @Override
    public Field<UByte> field11() {
        return CoreWidgets.CORE_WIDGETS.EMBEDDABLE;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getKey();
    }

    @Override
    public String component3() {
        return getApp();
    }

    @Override
    public String component4() {
        return getPlugin();
    }

    @Override
    public String component5() {
        return getClass_();
    }

    @Override
    public String component6() {
        return getCaches();
    }

    @Override
    public String component7() {
        return getRestrict();
    }

    @Override
    public String component8() {
        return getDefaultArea();
    }

    @Override
    public UByte component9() {
        return getAllowReuse();
    }

    @Override
    public String component10() {
        return getMenuStyle();
    }

    @Override
    public UByte component11() {
        return getEmbeddable();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getKey();
    }

    @Override
    public String value3() {
        return getApp();
    }

    @Override
    public String value4() {
        return getPlugin();
    }

    @Override
    public String value5() {
        return getClass_();
    }

    @Override
    public String value6() {
        return getCaches();
    }

    @Override
    public String value7() {
        return getRestrict();
    }

    @Override
    public String value8() {
        return getDefaultArea();
    }

    @Override
    public UByte value9() {
        return getAllowReuse();
    }

    @Override
    public String value10() {
        return getMenuStyle();
    }

    @Override
    public UByte value11() {
        return getEmbeddable();
    }

    @Override
    public CoreWidgetsRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value2(String value) {
        setKey(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value3(String value) {
        setApp(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value4(String value) {
        setPlugin(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value5(String value) {
        setClass_(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value6(String value) {
        setCaches(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value7(String value) {
        setRestrict(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value8(String value) {
        setDefaultArea(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value9(UByte value) {
        setAllowReuse(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value10(String value) {
        setMenuStyle(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord value11(UByte value) {
        setEmbeddable(value);
        return this;
    }

    @Override
    public CoreWidgetsRecord values(ULong value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, UByte value9, String value10, UByte value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreWidgetsRecord
     */
    public CoreWidgetsRecord() {
        super(CoreWidgets.CORE_WIDGETS);
    }

    /**
     * Create a detached, initialised CoreWidgetsRecord
     */
    public CoreWidgetsRecord(ULong id, String key, String app, String plugin, String class_, String caches, String restrict, String defaultArea, UByte allowReuse, String menuStyle, UByte embeddable) {
        super(CoreWidgets.CORE_WIDGETS);

        setId(id);
        setKey(key);
        setApp(app);
        setPlugin(plugin);
        setClass_(class_);
        setCaches(caches);
        setRestrict(restrict);
        setDefaultArea(defaultArea);
        setAllowReuse(allowReuse);
        setMenuStyle(menuStyle);
        setEmbeddable(embeddable);
    }
}
