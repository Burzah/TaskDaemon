/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreMembersKnownIpAddressesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreMembersKnownIpAddresses extends TableImpl<CoreMembersKnownIpAddressesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_members_known_ip_addresses</code>
     */
    public static final CoreMembersKnownIpAddresses CORE_MEMBERS_KNOWN_IP_ADDRESSES = new CoreMembersKnownIpAddresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreMembersKnownIpAddressesRecord> getRecordType() {
        return CoreMembersKnownIpAddressesRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_members_known_ip_addresses.device_key</code>.
     * The device key as stored in core_members_known_devices.device_key
     */
    public final TableField<CoreMembersKnownIpAddressesRecord, String> DEVICE_KEY = createField(DSL.name("device_key"), SQLDataType.VARCHAR(32).nullable(false), this, "The device key as stored in core_members_known_devices.device_key");

    /**
     * The column
     * <code>paradise_forums.core_members_known_ip_addresses.member_id</code>.
     * The  member ID
     */
    public final TableField<CoreMembersKnownIpAddressesRecord, ULong> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The  member ID");

    /**
     * The column
     * <code>paradise_forums.core_members_known_ip_addresses.ip_address</code>.
     * The IP address
     */
    public final TableField<CoreMembersKnownIpAddressesRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(46).nullable(false), this, "The IP address");

    /**
     * The column
     * <code>paradise_forums.core_members_known_ip_addresses.last_seen</code>. A
     * unix timestamp of when the device was last used on this IP address.
     * Updated at session start, not on every click
     */
    public final TableField<CoreMembersKnownIpAddressesRecord, UInteger> LAST_SEEN = createField(DSL.name("last_seen"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "A unix timestamp of when the device was last used on this IP address. Updated at session start, not on every click");

    private CoreMembersKnownIpAddresses(Name alias, Table<CoreMembersKnownIpAddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreMembersKnownIpAddresses(Name alias, Table<CoreMembersKnownIpAddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_members_known_ip_addresses</code> table
     * reference
     */
    public CoreMembersKnownIpAddresses(String alias) {
        this(DSL.name(alias), CORE_MEMBERS_KNOWN_IP_ADDRESSES);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_members_known_ip_addresses</code> table
     * reference
     */
    public CoreMembersKnownIpAddresses(Name alias) {
        this(alias, CORE_MEMBERS_KNOWN_IP_ADDRESSES);
    }

    /**
     * Create a <code>paradise_forums.core_members_known_ip_addresses</code>
     * table reference
     */
    public CoreMembersKnownIpAddresses() {
        this(DSL.name("core_members_known_ip_addresses"), null);
    }

    public <O extends Record> CoreMembersKnownIpAddresses(Table<O> child, ForeignKey<O, CoreMembersKnownIpAddressesRecord> key) {
        super(child, key, CORE_MEMBERS_KNOWN_IP_ADDRESSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_MEMBERS_KNOWN_IP_ADDRESSES_IP_ADDRESS, Indexes.CORE_MEMBERS_KNOWN_IP_ADDRESSES_LAST_SEEN, Indexes.CORE_MEMBERS_KNOWN_IP_ADDRESSES_MEMBER_ID);
    }

    @Override
    public UniqueKey<CoreMembersKnownIpAddressesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MEMBERS_KNOWN_IP_ADDRESSES_PRIMARY;
    }

    @Override
    public CoreMembersKnownIpAddresses as(String alias) {
        return new CoreMembersKnownIpAddresses(DSL.name(alias), this);
    }

    @Override
    public CoreMembersKnownIpAddresses as(Name alias) {
        return new CoreMembersKnownIpAddresses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMembersKnownIpAddresses rename(String name) {
        return new CoreMembersKnownIpAddresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreMembersKnownIpAddresses rename(Name name) {
        return new CoreMembersKnownIpAddresses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, ULong, String, UInteger> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
