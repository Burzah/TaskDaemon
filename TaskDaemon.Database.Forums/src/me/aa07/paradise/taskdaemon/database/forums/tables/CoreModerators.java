/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreModeratorsType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreModeratorsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreModerators extends TableImpl<CoreModeratorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_moderators</code>
     */
    public static final CoreModerators CORE_MODERATORS = new CoreModerators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreModeratorsRecord> getRecordType() {
        return CoreModeratorsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_moderators.type</code>. Member or
     * group
     */
    public final TableField<CoreModeratorsRecord, CoreModeratorsType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("'m'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreModeratorsType.class), this, "Member or group");

    /**
     * The column <code>paradise_forums.core_moderators.id</code>. ID Number
     */
    public final TableField<CoreModeratorsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_moderators.perms</code>.
     * Permissions
     */
    public final TableField<CoreModeratorsRecord, String> PERMS = createField(DSL.name("perms"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Permissions");

    /**
     * The column <code>paradise_forums.core_moderators.updated</code>. Updated
     */
    public final TableField<CoreModeratorsRecord, Integer> UPDATED = createField(DSL.name("updated"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Updated");

    /**
     * The column <code>paradise_forums.core_moderators.show_badge</code>. Show
     * a badge?
     */
    public final TableField<CoreModeratorsRecord, UByte> SHOW_BADGE = createField(DSL.name("show_badge"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Show a badge?");

    private CoreModerators(Name alias, Table<CoreModeratorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreModerators(Name alias, Table<CoreModeratorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_moderators</code> table
     * reference
     */
    public CoreModerators(String alias) {
        this(DSL.name(alias), CORE_MODERATORS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_moderators</code> table
     * reference
     */
    public CoreModerators(Name alias) {
        this(alias, CORE_MODERATORS);
    }

    /**
     * Create a <code>paradise_forums.core_moderators</code> table reference
     */
    public CoreModerators() {
        this(DSL.name("core_moderators"), null);
    }

    public <O extends Record> CoreModerators(Table<O> child, ForeignKey<O, CoreModeratorsRecord> key) {
        super(child, key, CORE_MODERATORS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreModeratorsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MODERATORS_PRIMARY;
    }

    @Override
    public CoreModerators as(String alias) {
        return new CoreModerators(DSL.name(alias), this);
    }

    @Override
    public CoreModerators as(Name alias) {
        return new CoreModerators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreModerators rename(String name) {
        return new CoreModerators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreModerators rename(Name name) {
        return new CoreModerators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<CoreModeratorsType, Long, String, Integer, UByte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
