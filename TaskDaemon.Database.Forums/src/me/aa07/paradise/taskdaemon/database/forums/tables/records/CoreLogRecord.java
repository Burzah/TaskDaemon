/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreLog;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLogRecord extends UpdatableRecordImpl<CoreLogRecord> implements Record10<ULong, String, UInteger, String, String, Integer, String, String, ULong, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_log.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_log.exception_class</code>. If the
     * log was an exception, the class name
     */
    public void setExceptionClass(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.exception_class</code>. If the
     * log was an exception, the class name
     */
    public String getExceptionClass() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_log.exception_code</code>. If the
     * log was an exception, the code
     */
    public void setExceptionCode(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.exception_code</code>. If the
     * log was an exception, the code
     */
    public UInteger getExceptionCode() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_log.message</code>. The log message
     */
    public void setMessage(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.message</code>. The log message
     */
    public String getMessage() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_log.backtrace</code>. The backtrace
     */
    public void setBacktrace(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.backtrace</code>. The backtrace
     */
    public String getBacktrace() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_log.time</code>. Unix timestamp of
     * log
     */
    public void setTime(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.time</code>. Unix timestamp of
     * log
     */
    public Integer getTime() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_log.category</code>. Optional
     * string identifying the type of log
     */
    public void setCategory(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.category</code>. Optional
     * string identifying the type of log
     */
    public String getCategory() {
        return (String) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_log.url</code>. URL the error
     * occurred on, if any
     */
    public void setUrl(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.url</code>. URL the error
     * occurred on, if any
     */
    public String getUrl() {
        return (String) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_log.member_id</code>. Member that
     * triggered the error, if any
     */
    public void setMemberId(ULong value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.member_id</code>. Member that
     * triggered the error, if any
     */
    public ULong getMemberId() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>paradise_forums.core_log.loaded_hooks</code>. Any third
     * party hooks loaded
     */
    public void setLoadedHooks(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>paradise_forums.core_log.loaded_hooks</code>. Any third
     * party hooks loaded
     */
    public String getLoadedHooks() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, UInteger, String, String, Integer, String, String, ULong, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, String, UInteger, String, String, Integer, String, String, ULong, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreLog.CORE_LOG.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreLog.CORE_LOG.EXCEPTION_CLASS;
    }

    @Override
    public Field<UInteger> field3() {
        return CoreLog.CORE_LOG.EXCEPTION_CODE;
    }

    @Override
    public Field<String> field4() {
        return CoreLog.CORE_LOG.MESSAGE;
    }

    @Override
    public Field<String> field5() {
        return CoreLog.CORE_LOG.BACKTRACE;
    }

    @Override
    public Field<Integer> field6() {
        return CoreLog.CORE_LOG.TIME;
    }

    @Override
    public Field<String> field7() {
        return CoreLog.CORE_LOG.CATEGORY;
    }

    @Override
    public Field<String> field8() {
        return CoreLog.CORE_LOG.URL;
    }

    @Override
    public Field<ULong> field9() {
        return CoreLog.CORE_LOG.MEMBER_ID;
    }

    @Override
    public Field<String> field10() {
        return CoreLog.CORE_LOG.LOADED_HOOKS;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getExceptionClass();
    }

    @Override
    public UInteger component3() {
        return getExceptionCode();
    }

    @Override
    public String component4() {
        return getMessage();
    }

    @Override
    public String component5() {
        return getBacktrace();
    }

    @Override
    public Integer component6() {
        return getTime();
    }

    @Override
    public String component7() {
        return getCategory();
    }

    @Override
    public String component8() {
        return getUrl();
    }

    @Override
    public ULong component9() {
        return getMemberId();
    }

    @Override
    public String component10() {
        return getLoadedHooks();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getExceptionClass();
    }

    @Override
    public UInteger value3() {
        return getExceptionCode();
    }

    @Override
    public String value4() {
        return getMessage();
    }

    @Override
    public String value5() {
        return getBacktrace();
    }

    @Override
    public Integer value6() {
        return getTime();
    }

    @Override
    public String value7() {
        return getCategory();
    }

    @Override
    public String value8() {
        return getUrl();
    }

    @Override
    public ULong value9() {
        return getMemberId();
    }

    @Override
    public String value10() {
        return getLoadedHooks();
    }

    @Override
    public CoreLogRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreLogRecord value2(String value) {
        setExceptionClass(value);
        return this;
    }

    @Override
    public CoreLogRecord value3(UInteger value) {
        setExceptionCode(value);
        return this;
    }

    @Override
    public CoreLogRecord value4(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public CoreLogRecord value5(String value) {
        setBacktrace(value);
        return this;
    }

    @Override
    public CoreLogRecord value6(Integer value) {
        setTime(value);
        return this;
    }

    @Override
    public CoreLogRecord value7(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public CoreLogRecord value8(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public CoreLogRecord value9(ULong value) {
        setMemberId(value);
        return this;
    }

    @Override
    public CoreLogRecord value10(String value) {
        setLoadedHooks(value);
        return this;
    }

    @Override
    public CoreLogRecord values(ULong value1, String value2, UInteger value3, String value4, String value5, Integer value6, String value7, String value8, ULong value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreLogRecord
     */
    public CoreLogRecord() {
        super(CoreLog.CORE_LOG);
    }

    /**
     * Create a detached, initialised CoreLogRecord
     */
    public CoreLogRecord(ULong id, String exceptionClass, UInteger exceptionCode, String message, String backtrace, Integer time, String category, String url, ULong memberId, String loadedHooks) {
        super(CoreLog.CORE_LOG);

        setId(id);
        setExceptionClass(exceptionClass);
        setExceptionCode(exceptionCode);
        setMessage(message);
        setBacktrace(backtrace);
        setTime(time);
        setCategory(category);
        setUrl(url);
        setMemberId(memberId);
        setLoadedHooks(loadedHooks);
    }
}
