/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreLoginHandlers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLoginHandlersRecord extends UpdatableRecordImpl<CoreLoginHandlersRecord> implements Record5<String, UByte, String, UShort, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_login_handlers.login_key</code>.
     * Key
     */
    public void setLoginKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_handlers.login_key</code>.
     * Key
     */
    public String getLoginKey() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_login_handlers.login_enabled</code>. Enabled?
     */
    public void setLoginEnabled(UByte value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_login_handlers.login_enabled</code>. Enabled?
     */
    public UByte getLoginEnabled() {
        return (UByte) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_login_handlers.login_settings</code>.
     * Handler-specific settings
     */
    public void setLoginSettings(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_login_handlers.login_settings</code>.
     * Handler-specific settings
     */
    public String getLoginSettings() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_login_handlers.login_order</code>.
     * Order to execute
     */
    public void setLoginOrder(UShort value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_handlers.login_order</code>.
     * Order to execute
     */
    public UShort getLoginOrder() {
        return (UShort) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_login_handlers.login_acp</code>.
     * Enabled for Admin CP?
     */
    public void setLoginAcp(UByte value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_login_handlers.login_acp</code>.
     * Enabled for Admin CP?
     */
    public UByte getLoginAcp() {
        return (UByte) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, UByte, String, UShort, UByte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, UByte, String, UShort, UByte> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreLoginHandlers.CORE_LOGIN_HANDLERS.LOGIN_KEY;
    }

    @Override
    public Field<UByte> field2() {
        return CoreLoginHandlers.CORE_LOGIN_HANDLERS.LOGIN_ENABLED;
    }

    @Override
    public Field<String> field3() {
        return CoreLoginHandlers.CORE_LOGIN_HANDLERS.LOGIN_SETTINGS;
    }

    @Override
    public Field<UShort> field4() {
        return CoreLoginHandlers.CORE_LOGIN_HANDLERS.LOGIN_ORDER;
    }

    @Override
    public Field<UByte> field5() {
        return CoreLoginHandlers.CORE_LOGIN_HANDLERS.LOGIN_ACP;
    }

    @Override
    public String component1() {
        return getLoginKey();
    }

    @Override
    public UByte component2() {
        return getLoginEnabled();
    }

    @Override
    public String component3() {
        return getLoginSettings();
    }

    @Override
    public UShort component4() {
        return getLoginOrder();
    }

    @Override
    public UByte component5() {
        return getLoginAcp();
    }

    @Override
    public String value1() {
        return getLoginKey();
    }

    @Override
    public UByte value2() {
        return getLoginEnabled();
    }

    @Override
    public String value3() {
        return getLoginSettings();
    }

    @Override
    public UShort value4() {
        return getLoginOrder();
    }

    @Override
    public UByte value5() {
        return getLoginAcp();
    }

    @Override
    public CoreLoginHandlersRecord value1(String value) {
        setLoginKey(value);
        return this;
    }

    @Override
    public CoreLoginHandlersRecord value2(UByte value) {
        setLoginEnabled(value);
        return this;
    }

    @Override
    public CoreLoginHandlersRecord value3(String value) {
        setLoginSettings(value);
        return this;
    }

    @Override
    public CoreLoginHandlersRecord value4(UShort value) {
        setLoginOrder(value);
        return this;
    }

    @Override
    public CoreLoginHandlersRecord value5(UByte value) {
        setLoginAcp(value);
        return this;
    }

    @Override
    public CoreLoginHandlersRecord values(String value1, UByte value2, String value3, UShort value4, UByte value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreLoginHandlersRecord
     */
    public CoreLoginHandlersRecord() {
        super(CoreLoginHandlers.CORE_LOGIN_HANDLERS);
    }

    /**
     * Create a detached, initialised CoreLoginHandlersRecord
     */
    public CoreLoginHandlersRecord(String loginKey, UByte loginEnabled, String loginSettings, UShort loginOrder, UByte loginAcp) {
        super(CoreLoginHandlers.CORE_LOGIN_HANDLERS);

        setLoginKey(loginKey);
        setLoginEnabled(loginEnabled);
        setLoginSettings(loginSettings);
        setLoginOrder(loginOrder);
        setLoginAcp(loginAcp);
    }
}
