/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsPrompt;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsResponseType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreOauthAuthorizePromptsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthAuthorizePrompts extends TableImpl<CoreOauthAuthorizePromptsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_oauth_authorize_prompts</code>
     */
    public static final CoreOauthAuthorizePrompts CORE_OAUTH_AUTHORIZE_PROMPTS = new CoreOauthAuthorizePrompts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreOauthAuthorizePromptsRecord> getRecordType() {
        return CoreOauthAuthorizePromptsRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.session_id</code>. The
     * session ID
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The session ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.client_id</code>. The
     * client ID
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.CHAR(32).nullable(false), this, "The client ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.response_type</code>.
     * The response type
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, CoreOauthAuthorizePromptsResponseType> RESPONSE_TYPE = createField(DSL.name("response_type"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("'code'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsResponseType.class), this, "The response type");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.redirect_uri</code>.
     * The provided redirect URI
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> REDIRECT_URI = createField(DSL.name("redirect_uri"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The provided redirect URI");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.scope</code>.
     * space-delimited scope
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "space-delimited scope");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.state</code>.
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.timestamp</code>. Unix
     * timestamp of when this prompt was initially shown
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, UInteger> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when this prompt was initially shown");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.logged_in</code>. Has
     * the user logged in yet (for prompts that require it)?
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, UByte> LOGGED_IN = createField(DSL.name("logged_in"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Has the user logged in yet (for prompts that require it)?");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.prompt</code>. The
     * requested prompt type
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, CoreOauthAuthorizePromptsPrompt> PROMPT = createField(DSL.name("prompt"), SQLDataType.VARCHAR(11).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthAuthorizePromptsPrompt.class), this, "The requested prompt type");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge</code>.
     * The PKCE code challenge, if one was provided by the client
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> CODE_CHALLENGE = createField(DSL.name("code_challenge"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The PKCE code challenge, if one was provided by the client");

    /**
     * The column
     * <code>paradise_forums.core_oauth_authorize_prompts.code_challenge_method</code>.
     * The PKCE code challenge method, if applicable
     */
    public final TableField<CoreOauthAuthorizePromptsRecord, String> CODE_CHALLENGE_METHOD = createField(DSL.name("code_challenge_method"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("'plain'", SQLDataType.VARCHAR)), this, "The PKCE code challenge method, if applicable");

    private CoreOauthAuthorizePrompts(Name alias, Table<CoreOauthAuthorizePromptsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreOauthAuthorizePrompts(Name alias, Table<CoreOauthAuthorizePromptsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_authorize_prompts</code> table reference
     */
    public CoreOauthAuthorizePrompts(String alias) {
        this(DSL.name(alias), CORE_OAUTH_AUTHORIZE_PROMPTS);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_authorize_prompts</code> table reference
     */
    public CoreOauthAuthorizePrompts(Name alias) {
        this(alias, CORE_OAUTH_AUTHORIZE_PROMPTS);
    }

    /**
     * Create a <code>paradise_forums.core_oauth_authorize_prompts</code> table
     * reference
     */
    public CoreOauthAuthorizePrompts() {
        this(DSL.name("core_oauth_authorize_prompts"), null);
    }

    public <O extends Record> CoreOauthAuthorizePrompts(Table<O> child, ForeignKey<O, CoreOauthAuthorizePromptsRecord> key) {
        super(child, key, CORE_OAUTH_AUTHORIZE_PROMPTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreOauthAuthorizePromptsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_OAUTH_AUTHORIZE_PROMPTS_PRIMARY;
    }

    @Override
    public CoreOauthAuthorizePrompts as(String alias) {
        return new CoreOauthAuthorizePrompts(DSL.name(alias), this);
    }

    @Override
    public CoreOauthAuthorizePrompts as(Name alias) {
        return new CoreOauthAuthorizePrompts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthAuthorizePrompts rename(String name) {
        return new CoreOauthAuthorizePrompts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthAuthorizePrompts rename(Name name) {
        return new CoreOauthAuthorizePrompts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, CoreOauthAuthorizePromptsResponseType, String, String, String, UInteger, UByte, CoreOauthAuthorizePromptsPrompt, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
