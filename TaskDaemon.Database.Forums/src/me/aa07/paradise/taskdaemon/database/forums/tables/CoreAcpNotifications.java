/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAcpNotificationsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAcpNotifications extends TableImpl<CoreAcpNotificationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_acp_notifications</code>
     */
    public static final CoreAcpNotifications CORE_ACP_NOTIFICATIONS = new CoreAcpNotifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAcpNotificationsRecord> getRecordType() {
        return CoreAcpNotificationsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_acp_notifications.id</code>. ID
     * Number
     */
    public final TableField<CoreAcpNotificationsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_acp_notifications.app</code>. The
     * key of the application this notification belongs to
     */
    public final TableField<CoreAcpNotificationsRecord, String> APP = createField(DSL.name("app"), SQLDataType.VARCHAR(32).nullable(false), this, "The key of the application this notification belongs to");

    /**
     * The column <code>paradise_forums.core_acp_notifications.ext</code>. The
     * extension this notification belongs to within the application
     */
    public final TableField<CoreAcpNotificationsRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(32).nullable(false), this, "The extension this notification belongs to within the application");

    /**
     * The column <code>paradise_forums.core_acp_notifications.sent</code>. Unix
     * timestamp of when this notification was sent
     */
    public final TableField<CoreAcpNotificationsRecord, UInteger> SENT = createField(DSL.name("sent"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when this notification was sent");

    /**
     * The column <code>paradise_forums.core_acp_notifications.extra</code>. Any
     * additional data about the notification
     */
    public final TableField<CoreAcpNotificationsRecord, String> EXTRA = createField(DSL.name("extra"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Any additional data about the notification");

    private CoreAcpNotifications(Name alias, Table<CoreAcpNotificationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAcpNotifications(Name alias, Table<CoreAcpNotificationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_notifications</code>
     * table reference
     */
    public CoreAcpNotifications(String alias) {
        this(DSL.name(alias), CORE_ACP_NOTIFICATIONS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_notifications</code>
     * table reference
     */
    public CoreAcpNotifications(Name alias) {
        this(alias, CORE_ACP_NOTIFICATIONS);
    }

    /**
     * Create a <code>paradise_forums.core_acp_notifications</code> table
     * reference
     */
    public CoreAcpNotifications() {
        this(DSL.name("core_acp_notifications"), null);
    }

    public <O extends Record> CoreAcpNotifications(Table<O> child, ForeignKey<O, CoreAcpNotificationsRecord> key) {
        super(child, key, CORE_ACP_NOTIFICATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreAcpNotificationsRecord, ULong> getIdentity() {
        return (Identity<CoreAcpNotificationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreAcpNotificationsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ACP_NOTIFICATIONS_PRIMARY;
    }

    @Override
    public CoreAcpNotifications as(String alias) {
        return new CoreAcpNotifications(DSL.name(alias), this);
    }

    @Override
    public CoreAcpNotifications as(Name alias) {
        return new CoreAcpNotifications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpNotifications rename(String name) {
        return new CoreAcpNotifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpNotifications rename(Name name) {
        return new CoreAcpNotifications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, String, UInteger, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
