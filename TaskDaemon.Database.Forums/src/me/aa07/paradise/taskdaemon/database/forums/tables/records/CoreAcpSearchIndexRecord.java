/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreAcpSearchIndex;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAcpSearchIndexRecord extends TableRecordImpl<CoreAcpSearchIndexRecord> implements Record5<String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_acp_search_index.url</code>. The
     * query string
     */
    public void setUrl(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_acp_search_index.url</code>. The
     * query string
     */
    public String getUrl() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_acp_search_index.keyword</code>.
     * The keyword
     */
    public void setKeyword(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_acp_search_index.keyword</code>.
     * The keyword
     */
    public String getKeyword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_acp_search_index.app</code>. The
     * application key
     */
    public void setApp(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_acp_search_index.app</code>. The
     * application key
     */
    public String getApp() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_acp_search_index.lang_key</code>.
     * The language key to use for the result link
     */
    public void setLangKey(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_acp_search_index.lang_key</code>.
     * The language key to use for the result link
     */
    public String getLangKey() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_acp_search_index.restriction</code>. If
     * applicable, the ACP restriction key that should be checked for this
     * result
     */
    public void setRestriction(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_acp_search_index.restriction</code>. If
     * applicable, the ACP restriction key that should be checked for this
     * result
     */
    public String getRestriction() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX.URL;
    }

    @Override
    public Field<String> field2() {
        return CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX.KEYWORD;
    }

    @Override
    public Field<String> field3() {
        return CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX.APP;
    }

    @Override
    public Field<String> field4() {
        return CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX.LANG_KEY;
    }

    @Override
    public Field<String> field5() {
        return CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX.RESTRICTION;
    }

    @Override
    public String component1() {
        return getUrl();
    }

    @Override
    public String component2() {
        return getKeyword();
    }

    @Override
    public String component3() {
        return getApp();
    }

    @Override
    public String component4() {
        return getLangKey();
    }

    @Override
    public String component5() {
        return getRestriction();
    }

    @Override
    public String value1() {
        return getUrl();
    }

    @Override
    public String value2() {
        return getKeyword();
    }

    @Override
    public String value3() {
        return getApp();
    }

    @Override
    public String value4() {
        return getLangKey();
    }

    @Override
    public String value5() {
        return getRestriction();
    }

    @Override
    public CoreAcpSearchIndexRecord value1(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public CoreAcpSearchIndexRecord value2(String value) {
        setKeyword(value);
        return this;
    }

    @Override
    public CoreAcpSearchIndexRecord value3(String value) {
        setApp(value);
        return this;
    }

    @Override
    public CoreAcpSearchIndexRecord value4(String value) {
        setLangKey(value);
        return this;
    }

    @Override
    public CoreAcpSearchIndexRecord value5(String value) {
        setRestriction(value);
        return this;
    }

    @Override
    public CoreAcpSearchIndexRecord values(String value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreAcpSearchIndexRecord
     */
    public CoreAcpSearchIndexRecord() {
        super(CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX);
    }

    /**
     * Create a detached, initialised CoreAcpSearchIndexRecord
     */
    public CoreAcpSearchIndexRecord(String url, String keyword, String app, String langKey, String restriction) {
        super(CoreAcpSearchIndex.CORE_ACP_SEARCH_INDEX);

        setUrl(url);
        setKeyword(keyword);
        setApp(app);
        setLangKey(langKey);
        setRestriction(restriction);
    }
}
