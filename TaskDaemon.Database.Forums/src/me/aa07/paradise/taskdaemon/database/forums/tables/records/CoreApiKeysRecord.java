/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreApiKeys;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiKeysRecord extends UpdatableRecordImpl<CoreApiKeysRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_api_keys.api_id</code>. API Key
     */
    public void setApiId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_keys.api_id</code>. API Key
     */
    public String getApiId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_api_keys.api_permissions</code>.
     * JSON encoded details of which endpoints the key can access
     */
    public void setApiPermissions(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_keys.api_permissions</code>.
     * JSON encoded details of which endpoints the key can access
     */
    public String getApiPermissions() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_api_keys.api_allowed_ips</code>.
     * Comma-delimited allowed IPs
     */
    public void setApiAllowedIps(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_api_keys.api_allowed_ips</code>.
     * Comma-delimited allowed IPs
     */
    public String getApiAllowedIps() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreApiKeys.CORE_API_KEYS.API_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreApiKeys.CORE_API_KEYS.API_PERMISSIONS;
    }

    @Override
    public Field<String> field3() {
        return CoreApiKeys.CORE_API_KEYS.API_ALLOWED_IPS;
    }

    @Override
    public String component1() {
        return getApiId();
    }

    @Override
    public String component2() {
        return getApiPermissions();
    }

    @Override
    public String component3() {
        return getApiAllowedIps();
    }

    @Override
    public String value1() {
        return getApiId();
    }

    @Override
    public String value2() {
        return getApiPermissions();
    }

    @Override
    public String value3() {
        return getApiAllowedIps();
    }

    @Override
    public CoreApiKeysRecord value1(String value) {
        setApiId(value);
        return this;
    }

    @Override
    public CoreApiKeysRecord value2(String value) {
        setApiPermissions(value);
        return this;
    }

    @Override
    public CoreApiKeysRecord value3(String value) {
        setApiAllowedIps(value);
        return this;
    }

    @Override
    public CoreApiKeysRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreApiKeysRecord
     */
    public CoreApiKeysRecord() {
        super(CoreApiKeys.CORE_API_KEYS);
    }

    /**
     * Create a detached, initialised CoreApiKeysRecord
     */
    public CoreApiKeysRecord(String apiId, String apiPermissions, String apiAllowedIps) {
        super(CoreApiKeys.CORE_API_KEYS);

        setApiId(apiId);
        setApiPermissions(apiPermissions);
        setApiAllowedIps(apiAllowedIps);
    }
}
