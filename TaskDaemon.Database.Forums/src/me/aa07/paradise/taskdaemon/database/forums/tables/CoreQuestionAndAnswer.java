/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreQuestionAndAnswerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreQuestionAndAnswer extends TableImpl<CoreQuestionAndAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_question_and_answer</code>
     */
    public static final CoreQuestionAndAnswer CORE_QUESTION_AND_ANSWER = new CoreQuestionAndAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreQuestionAndAnswerRecord> getRecordType() {
        return CoreQuestionAndAnswerRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_question_and_answer.qa_id</code>.
     */
    public final TableField<CoreQuestionAndAnswerRecord, Integer> QA_ID = createField(DSL.name("qa_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>paradise_forums.core_question_and_answer.qa_answers</code>.
     */
    public final TableField<CoreQuestionAndAnswerRecord, String> QA_ANSWERS = createField(DSL.name("qa_answers"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private CoreQuestionAndAnswer(Name alias, Table<CoreQuestionAndAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreQuestionAndAnswer(Name alias, Table<CoreQuestionAndAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_question_and_answer</code>
     * table reference
     */
    public CoreQuestionAndAnswer(String alias) {
        this(DSL.name(alias), CORE_QUESTION_AND_ANSWER);
    }

    /**
     * Create an aliased <code>paradise_forums.core_question_and_answer</code>
     * table reference
     */
    public CoreQuestionAndAnswer(Name alias) {
        this(alias, CORE_QUESTION_AND_ANSWER);
    }

    /**
     * Create a <code>paradise_forums.core_question_and_answer</code> table
     * reference
     */
    public CoreQuestionAndAnswer() {
        this(DSL.name("core_question_and_answer"), null);
    }

    public <O extends Record> CoreQuestionAndAnswer(Table<O> child, ForeignKey<O, CoreQuestionAndAnswerRecord> key) {
        super(child, key, CORE_QUESTION_AND_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreQuestionAndAnswerRecord, Integer> getIdentity() {
        return (Identity<CoreQuestionAndAnswerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreQuestionAndAnswerRecord> getPrimaryKey() {
        return Keys.KEY_CORE_QUESTION_AND_ANSWER_PRIMARY;
    }

    @Override
    public CoreQuestionAndAnswer as(String alias) {
        return new CoreQuestionAndAnswer(DSL.name(alias), this);
    }

    @Override
    public CoreQuestionAndAnswer as(Name alias) {
        return new CoreQuestionAndAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreQuestionAndAnswer rename(String name) {
        return new CoreQuestionAndAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreQuestionAndAnswer rename(Name name) {
        return new CoreQuestionAndAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
