/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsCoreOauthClients;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthApiAccess;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthPkce;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthPrompt;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreOauthClientsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthClients extends TableImpl<CoreOauthClientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_oauth_clients</code>
     */
    public static final CoreOauthClients CORE_OAUTH_CLIENTS = new CoreOauthClients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreOauthClientsRecord> getRecordType() {
        return CoreOauthClientsRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_client_id</code>. The
     * client ID
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_CLIENT_ID = createField(DSL.name("oauth_client_id"), SQLDataType.CHAR(32).nullable(false), this, "The client ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_grant_types</code>.
     * Available grant types
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_GRANT_TYPES = createField(DSL.name("oauth_grant_types"), SQLDataType.VARCHAR(55).nullable(false), this, "Available grant types");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_redirect_uris</code>.
     * JSON-encoded array of Redirect URIs
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_REDIRECT_URIS = createField(DSL.name("oauth_redirect_uris"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of Redirect URIs");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_client_secret</code>. The
     * hashed client secret or NULL for public clients
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_CLIENT_SECRET = createField(DSL.name("oauth_client_secret"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The hashed client secret or NULL for public clients");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_access_token_length</code>.
     * Number of hours access token lives for, or NULL for no limit
     */
    public final TableField<CoreOauthClientsRecord, UInteger> OAUTH_ACCESS_TOKEN_LENGTH = createField(DSL.name("oauth_access_token_length"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Number of hours access token lives for, or NULL for no limit");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_use_refresh_tokens</code>.
     * Boolean value indicating if refresh tokens should be used
     */
    public final TableField<CoreOauthClientsRecord, UByte> OAUTH_USE_REFRESH_TOKENS = createField(DSL.name("oauth_use_refresh_tokens"), SQLDataType.TINYINTUNSIGNED.nullable(false), this, "Boolean value indicating if refresh tokens should be used");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_refresh_token_length</code>.
     * Number of days refresh tokens live for, or NULL for no expiry or not
     * applicable
     */
    public final TableField<CoreOauthClientsRecord, UInteger> OAUTH_REFRESH_TOKEN_LENGTH = createField(DSL.name("oauth_refresh_token_length"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Number of days refresh tokens live for, or NULL for no expiry or not applicable");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_scopes</code>.
     * JSON-encoded array of scope data
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_SCOPES = createField(DSL.name("oauth_scopes"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of scope data");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_enabled</code>.
     * Boolean value indicating if client is enabled
     */
    public final TableField<CoreOauthClientsRecord, UByte> OAUTH_ENABLED = createField(DSL.name("oauth_enabled"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if client is enabled");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_prompt</code>.
     * How to prompt users. login = Users must always login. reauthorize = Users
     * are shown authorize screen. automatic = Users with an existing access
     * token skip authorise screen. none = Never show screen
     */
    public final TableField<CoreOauthClientsRecord, CoreOauthClientsOauthPrompt> OAUTH_PROMPT = createField(DSL.name("oauth_prompt"), SQLDataType.VARCHAR(11).defaultValue(DSL.inline("'reauthorize'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthPrompt.class), this, "How to prompt users. login = Users must always login. reauthorize = Users are shown authorize screen. automatic = Users with an existing access token skip authorise screen. none = Never show screen");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_choose_scopes</code>.
     * Boolean value indicating if user can choose which of the requested scopes
     * to grant
     */
    public final TableField<CoreOauthClientsRecord, UByte> OAUTH_CHOOSE_SCOPES = createField(DSL.name("oauth_choose_scopes"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if user can choose which of the requested scopes to grant");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_ucp</code>.
     * Boolean value indicating if the user can see and revoke their
     * authorization in their settings page
     */
    public final TableField<CoreOauthClientsRecord, UByte> OAUTH_UCP = createField(DSL.name("oauth_ucp"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Boolean value indicating if the user can see and revoke their authorization in their settings page");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_brute_force</code>.
     * JSON-encoded array of IP addresses and failed authentication, for
     * brute-force prevention
     */
    public final TableField<CoreOauthClientsRecord, String> OAUTH_BRUTE_FORCE = createField(DSL.name("oauth_brute_force"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of IP addresses and failed authentication, for brute-force prevention");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_type</code>. A
     * hint for how to display the form (NULL is generic custom)
     */
    public final TableField<CoreOauthClientsRecord, CoreOauthClientsOauthType> OAUTH_TYPE = createField(DSL.name("oauth_type"), SQLDataType.VARCHAR(9).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthType.class), this, "A hint for how to display the form (NULL is generic custom)");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_pkce</code>.
     * Required PKCE method.
     */
    public final TableField<CoreOauthClientsRecord, CoreOauthClientsOauthPkce> OAUTH_PKCE = createField(DSL.name("oauth_pkce"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("'none'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthPkce.class), this, "Required PKCE method.");

    /**
     * The column <code>paradise_forums.core_oauth_clients.oauth_graphql</code>.
     * A boolean indicating if this client (and access tokens issued by it) can
     * access the GraphQL API
     */
    public final TableField<CoreOauthClientsRecord, UByte> OAUTH_GRAPHQL = createField(DSL.name("oauth_graphql"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "A boolean indicating if this client (and access tokens issued by it) can access the GraphQL API");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.oauth_api_access</code>.
     */
    public final TableField<CoreOauthClientsRecord, CoreOauthClientsOauthApiAccess> OAUTH_API_ACCESS = createField(DSL.name("oauth_api_access"), SQLDataType.VARCHAR(7).defaultValue(DSL.inline("'rest'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsOauthApiAccess.class), this, "");

    /**
     * The column
     * <code>paradise_forums.core_oauth_clients.core_oauth_clients</code>.
     */
    public final TableField<CoreOauthClientsRecord, CoreOauthClientsCoreOauthClients> CORE_OAUTH_CLIENTS_ = createField(DSL.name("core_oauth_clients"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("'rest'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthClientsCoreOauthClients.class), this, "");

    private CoreOauthClients(Name alias, Table<CoreOauthClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreOauthClients(Name alias, Table<CoreOauthClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_oauth_clients</code> table
     * reference
     */
    public CoreOauthClients(String alias) {
        this(DSL.name(alias), CORE_OAUTH_CLIENTS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_oauth_clients</code> table
     * reference
     */
    public CoreOauthClients(Name alias) {
        this(alias, CORE_OAUTH_CLIENTS);
    }

    /**
     * Create a <code>paradise_forums.core_oauth_clients</code> table reference
     */
    public CoreOauthClients() {
        this(DSL.name("core_oauth_clients"), null);
    }

    public <O extends Record> CoreOauthClients(Table<O> child, ForeignKey<O, CoreOauthClientsRecord> key) {
        super(child, key, CORE_OAUTH_CLIENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreOauthClientsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_OAUTH_CLIENTS_PRIMARY;
    }

    @Override
    public CoreOauthClients as(String alias) {
        return new CoreOauthClients(DSL.name(alias), this);
    }

    @Override
    public CoreOauthClients as(Name alias) {
        return new CoreOauthClients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthClients rename(String name) {
        return new CoreOauthClients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthClients rename(Name name) {
        return new CoreOauthClients(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, UInteger, UByte, UInteger, String, UByte, CoreOauthClientsOauthPrompt, UByte, UByte, String, CoreOauthClientsOauthType, CoreOauthClientsOauthPkce, UByte, CoreOauthClientsOauthApiAccess, CoreOauthClientsCoreOauthClients> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
