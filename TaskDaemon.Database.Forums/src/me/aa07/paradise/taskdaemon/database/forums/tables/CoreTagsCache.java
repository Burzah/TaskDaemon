/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreTagsCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTagsCache extends TableImpl<CoreTagsCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_tags_cache</code>
     */
    public static final CoreTagsCache CORE_TAGS_CACHE = new CoreTagsCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreTagsCacheRecord> getRecordType() {
        return CoreTagsCacheRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_tags_cache.tag_cache_key</code>.
     */
    public final TableField<CoreTagsCacheRecord, String> TAG_CACHE_KEY = createField(DSL.name("tag_cache_key"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_tags_cache.tag_cache_text</code>.
     */
    public final TableField<CoreTagsCacheRecord, String> TAG_CACHE_TEXT = createField(DSL.name("tag_cache_text"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_tags_cache.tag_cache_date</code>.
     */
    public final TableField<CoreTagsCacheRecord, Integer> TAG_CACHE_DATE = createField(DSL.name("tag_cache_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private CoreTagsCache(Name alias, Table<CoreTagsCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreTagsCache(Name alias, Table<CoreTagsCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_tags_cache</code> table
     * reference
     */
    public CoreTagsCache(String alias) {
        this(DSL.name(alias), CORE_TAGS_CACHE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_tags_cache</code> table
     * reference
     */
    public CoreTagsCache(Name alias) {
        this(alias, CORE_TAGS_CACHE);
    }

    /**
     * Create a <code>paradise_forums.core_tags_cache</code> table reference
     */
    public CoreTagsCache() {
        this(DSL.name("core_tags_cache"), null);
    }

    public <O extends Record> CoreTagsCache(Table<O> child, ForeignKey<O, CoreTagsCacheRecord> key) {
        super(child, key, CORE_TAGS_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<UniqueKey<CoreTagsCacheRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_TAGS_CACHE_TAG_CACHE_KEY);
    }

    @Override
    public CoreTagsCache as(String alias) {
        return new CoreTagsCache(DSL.name(alias), this);
    }

    @Override
    public CoreTagsCache as(Name alias) {
        return new CoreTagsCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTagsCache rename(String name) {
        return new CoreTagsCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTagsCache rename(Name name) {
        return new CoreTagsCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
