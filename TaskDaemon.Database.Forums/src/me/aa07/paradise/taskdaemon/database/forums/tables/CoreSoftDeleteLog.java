/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreSoftDeleteLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreSoftDeleteLog extends TableImpl<CoreSoftDeleteLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_soft_delete_log</code>
     */
    public static final CoreSoftDeleteLog CORE_SOFT_DELETE_LOG = new CoreSoftDeleteLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreSoftDeleteLogRecord> getRecordType() {
        return CoreSoftDeleteLogRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_soft_delete_log.sdl_id</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, Integer> SDL_ID = createField(DSL.name("sdl_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_soft_delete_log.sdl_obj_id</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, Integer> SDL_OBJ_ID = createField(DSL.name("sdl_obj_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_soft_delete_log.sdl_obj_key</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, String> SDL_OBJ_KEY = createField(DSL.name("sdl_obj_key"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_soft_delete_log.sdl_obj_member_id</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, ULong> SDL_OBJ_MEMBER_ID = createField(DSL.name("sdl_obj_member_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_soft_delete_log.sdl_obj_date</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, Integer> SDL_OBJ_DATE = createField(DSL.name("sdl_obj_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_soft_delete_log.sdl_obj_reason</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, String> SDL_OBJ_REASON = createField(DSL.name("sdl_obj_reason"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_soft_delete_log.sdl_locked</code>.
     */
    public final TableField<CoreSoftDeleteLogRecord, Integer> SDL_LOCKED = createField(DSL.name("sdl_locked"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private CoreSoftDeleteLog(Name alias, Table<CoreSoftDeleteLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreSoftDeleteLog(Name alias, Table<CoreSoftDeleteLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_soft_delete_log</code> table
     * reference
     */
    public CoreSoftDeleteLog(String alias) {
        this(DSL.name(alias), CORE_SOFT_DELETE_LOG);
    }

    /**
     * Create an aliased <code>paradise_forums.core_soft_delete_log</code> table
     * reference
     */
    public CoreSoftDeleteLog(Name alias) {
        this(alias, CORE_SOFT_DELETE_LOG);
    }

    /**
     * Create a <code>paradise_forums.core_soft_delete_log</code> table
     * reference
     */
    public CoreSoftDeleteLog() {
        this(DSL.name("core_soft_delete_log"), null);
    }

    public <O extends Record> CoreSoftDeleteLog(Table<O> child, ForeignKey<O, CoreSoftDeleteLogRecord> key) {
        super(child, key, CORE_SOFT_DELETE_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_SOFT_DELETE_LOG_LOOK_UP, Indexes.CORE_SOFT_DELETE_LOG_MEMBER);
    }

    @Override
    public Identity<CoreSoftDeleteLogRecord, Integer> getIdentity() {
        return (Identity<CoreSoftDeleteLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreSoftDeleteLogRecord> getPrimaryKey() {
        return Keys.KEY_CORE_SOFT_DELETE_LOG_PRIMARY;
    }

    @Override
    public CoreSoftDeleteLog as(String alias) {
        return new CoreSoftDeleteLog(DSL.name(alias), this);
    }

    @Override
    public CoreSoftDeleteLog as(Name alias) {
        return new CoreSoftDeleteLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSoftDeleteLog rename(String name) {
        return new CoreSoftDeleteLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreSoftDeleteLog rename(Name name) {
        return new CoreSoftDeleteLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, ULong, Integer, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
