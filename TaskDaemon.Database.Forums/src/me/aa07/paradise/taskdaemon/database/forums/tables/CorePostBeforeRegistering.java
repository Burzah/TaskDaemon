/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CorePostBeforeRegisteringRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePostBeforeRegistering extends TableImpl<CorePostBeforeRegisteringRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_post_before_registering</code>
     */
    public static final CorePostBeforeRegistering CORE_POST_BEFORE_REGISTERING = new CorePostBeforeRegistering();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorePostBeforeRegisteringRecord> getRecordType() {
        return CorePostBeforeRegisteringRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.email</code>. The
     * guest's email address
     */
    public final TableField<CorePostBeforeRegisteringRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "The guest's email address");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.class</code>. The
     * class of the content that was posted
     */
    public final TableField<CorePostBeforeRegisteringRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(255).nullable(false), this, "The class of the content that was posted");

    /**
     * The column <code>paradise_forums.core_post_before_registering.id</code>.
     * The ID of the content that was posted
     */
    public final TableField<CorePostBeforeRegisteringRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The ID of the content that was posted");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.timestamp</code>. Unix
     * timestamp of when the content was posted
     */
    public final TableField<CorePostBeforeRegisteringRecord, UInteger> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when the content was posted");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.secret</code>. A
     * secret key which is used to link the user to this content
     */
    public final TableField<CorePostBeforeRegisteringRecord, String> SECRET = createField(DSL.name("secret"), SQLDataType.CHAR(32).nullable(false), this, "A secret key which is used to link the user to this content");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.member</code>. The ID
     * number of the member account once it has been created but before it has
     * been validated
     */
    public final TableField<CorePostBeforeRegisteringRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The ID number of the member account once it has been created but before it has been validated");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.followup</code>. Unix
     * timestamp of when followup email was sent
     */
    public final TableField<CorePostBeforeRegisteringRecord, UInteger> FOLLOWUP = createField(DSL.name("followup"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when followup email was sent");

    /**
     * The column
     * <code>paradise_forums.core_post_before_registering.language</code>. ID
     * number of the language that the guest had selected
     */
    public final TableField<CorePostBeforeRegisteringRecord, ULong> LANGUAGE = createField(DSL.name("language"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "ID number of the language that the guest had selected");

    private CorePostBeforeRegistering(Name alias, Table<CorePostBeforeRegisteringRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorePostBeforeRegistering(Name alias, Table<CorePostBeforeRegisteringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_post_before_registering</code> table reference
     */
    public CorePostBeforeRegistering(String alias) {
        this(DSL.name(alias), CORE_POST_BEFORE_REGISTERING);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_post_before_registering</code> table reference
     */
    public CorePostBeforeRegistering(Name alias) {
        this(alias, CORE_POST_BEFORE_REGISTERING);
    }

    /**
     * Create a <code>paradise_forums.core_post_before_registering</code> table
     * reference
     */
    public CorePostBeforeRegistering() {
        this(DSL.name("core_post_before_registering"), null);
    }

    public <O extends Record> CorePostBeforeRegistering(Table<O> child, ForeignKey<O, CorePostBeforeRegisteringRecord> key) {
        super(child, key, CORE_POST_BEFORE_REGISTERING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_POST_BEFORE_REGISTERING_MEMBER, Indexes.CORE_POST_BEFORE_REGISTERING_SECRET);
    }

    @Override
    public List<UniqueKey<CorePostBeforeRegisteringRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_POST_BEFORE_REGISTERING_CONTENT_LOOKUP);
    }

    @Override
    public CorePostBeforeRegistering as(String alias) {
        return new CorePostBeforeRegistering(DSL.name(alias), this);
    }

    @Override
    public CorePostBeforeRegistering as(Name alias) {
        return new CorePostBeforeRegistering(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePostBeforeRegistering rename(String name) {
        return new CorePostBeforeRegistering(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorePostBeforeRegistering rename(Name name) {
        return new CorePostBeforeRegistering(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, ULong, UInteger, String, ULong, UInteger, ULong> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
