/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreOutputCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOutputCache extends TableImpl<CoreOutputCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_output_cache</code>
     */
    public static final CoreOutputCache CORE_OUTPUT_CACHE = new CoreOutputCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreOutputCacheRecord> getRecordType() {
        return CoreOutputCacheRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_output_cache.cache_key</code>. The
     * key
     */
    public final TableField<CoreOutputCacheRecord, String> CACHE_KEY = createField(DSL.name("cache_key"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The key");

    /**
     * The column <code>paradise_forums.core_output_cache.cache_value</code>.
     * The output HTML
     */
    public final TableField<CoreOutputCacheRecord, String> CACHE_VALUE = createField(DSL.name("cache_value"), SQLDataType.CLOB.nullable(false), this, "The output HTML");

    /**
     * The column <code>paradise_forums.core_output_cache.cache_meta</code>.
     * JSON headers and meta data
     */
    public final TableField<CoreOutputCacheRecord, String> CACHE_META = createField(DSL.name("cache_meta"), SQLDataType.CLOB.nullable(false), this, "JSON headers and meta data");

    /**
     * The column <code>paradise_forums.core_output_cache.cache_expire</code>.
     * Unix timestamp of when the cache expires
     */
    public final TableField<CoreOutputCacheRecord, Integer> CACHE_EXPIRE = createField(DSL.name("cache_expire"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "Unix timestamp of when the cache expires");

    private CoreOutputCache(Name alias, Table<CoreOutputCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreOutputCache(Name alias, Table<CoreOutputCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_output_cache</code> table
     * reference
     */
    public CoreOutputCache(String alias) {
        this(DSL.name(alias), CORE_OUTPUT_CACHE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_output_cache</code> table
     * reference
     */
    public CoreOutputCache(Name alias) {
        this(alias, CORE_OUTPUT_CACHE);
    }

    /**
     * Create a <code>paradise_forums.core_output_cache</code> table reference
     */
    public CoreOutputCache() {
        this(DSL.name("core_output_cache"), null);
    }

    public <O extends Record> CoreOutputCache(Table<O> child, ForeignKey<O, CoreOutputCacheRecord> key) {
        super(child, key, CORE_OUTPUT_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_OUTPUT_CACHE_CACHE_EXPIRE);
    }

    @Override
    public UniqueKey<CoreOutputCacheRecord> getPrimaryKey() {
        return Keys.KEY_CORE_OUTPUT_CACHE_PRIMARY;
    }

    @Override
    public CoreOutputCache as(String alias) {
        return new CoreOutputCache(DSL.name(alias), this);
    }

    @Override
    public CoreOutputCache as(Name alias) {
        return new CoreOutputCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOutputCache rename(String name) {
        return new CoreOutputCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOutputCache rename(Name name) {
        return new CoreOutputCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
