/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreTasks;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * Stores information about tasks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTasksRecord extends UpdatableRecordImpl<CoreTasksRecord> implements Record10<ULong, String, String, String, ULong, Boolean, Boolean, Long, UByte, ULong> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_tasks.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.app</code>. The application
     * key which owns the task.
     */
    public void setApp(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.app</code>. The application
     * key which owns the task.
     */
    public String getApp() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.key</code>. The task key.
     */
    public void setKey(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.key</code>. The task key.
     */
    public String getKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.frequency</code>.
     * DateInterval specification for the frequency the task runs.
     */
    public void setFrequency(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.frequency</code>.
     * DateInterval specification for the frequency the task runs.
     */
    public String getFrequency() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.next_run</code>. Unix
     * timestamp of next time task should be ran.
     */
    public void setNextRun(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.next_run</code>. Unix
     * timestamp of next time task should be ran.
     */
    public ULong getNextRun() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.running</code>. Indicates if
     * task is currently running (to prevent duplicate runs).
     */
    public void setRunning(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.running</code>. Indicates if
     * task is currently running (to prevent duplicate runs).
     */
    public Boolean getRunning() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.enabled</code>. Some tasks
     * may set this automatically when they do/don't have things to do.
     */
    public void setEnabled(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.enabled</code>. Some tasks
     * may set this automatically when they do/don't have things to do.
     */
    public Boolean getEnabled() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.plugin</code>. The plugin ID
     * number which owns the task.
     */
    public void setPlugin(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.plugin</code>. The plugin ID
     * number which owns the task.
     */
    public Long getPlugin() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.lock_count</code>. How many
     * times the task has been in a locked state without a successful run. A
     * count of 3 will trigger a dashboard warning.
     */
    public void setLockCount(UByte value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.lock_count</code>. How many
     * times the task has been in a locked state without a successful run. A
     * count of 3 will trigger a dashboard warning.
     */
    public UByte getLockCount() {
        return (UByte) get(8);
    }

    /**
     * Setter for <code>paradise_forums.core_tasks.last_run</code>. The
     * timestamp the task was last run, 0 if never.
     */
    public void setLastRun(ULong value) {
        set(9, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tasks.last_run</code>. The
     * timestamp the task was last run, 0 if never.
     */
    public ULong getLastRun() {
        return (ULong) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, ULong, Boolean, Boolean, Long, UByte, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, String, String, String, ULong, Boolean, Boolean, Long, UByte, ULong> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreTasks.CORE_TASKS.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreTasks.CORE_TASKS.APP;
    }

    @Override
    public Field<String> field3() {
        return CoreTasks.CORE_TASKS.KEY;
    }

    @Override
    public Field<String> field4() {
        return CoreTasks.CORE_TASKS.FREQUENCY;
    }

    @Override
    public Field<ULong> field5() {
        return CoreTasks.CORE_TASKS.NEXT_RUN;
    }

    @Override
    public Field<Boolean> field6() {
        return CoreTasks.CORE_TASKS.RUNNING;
    }

    @Override
    public Field<Boolean> field7() {
        return CoreTasks.CORE_TASKS.ENABLED;
    }

    @Override
    public Field<Long> field8() {
        return CoreTasks.CORE_TASKS.PLUGIN;
    }

    @Override
    public Field<UByte> field9() {
        return CoreTasks.CORE_TASKS.LOCK_COUNT;
    }

    @Override
    public Field<ULong> field10() {
        return CoreTasks.CORE_TASKS.LAST_RUN;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getApp();
    }

    @Override
    public String component3() {
        return getKey();
    }

    @Override
    public String component4() {
        return getFrequency();
    }

    @Override
    public ULong component5() {
        return getNextRun();
    }

    @Override
    public Boolean component6() {
        return getRunning();
    }

    @Override
    public Boolean component7() {
        return getEnabled();
    }

    @Override
    public Long component8() {
        return getPlugin();
    }

    @Override
    public UByte component9() {
        return getLockCount();
    }

    @Override
    public ULong component10() {
        return getLastRun();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getApp();
    }

    @Override
    public String value3() {
        return getKey();
    }

    @Override
    public String value4() {
        return getFrequency();
    }

    @Override
    public ULong value5() {
        return getNextRun();
    }

    @Override
    public Boolean value6() {
        return getRunning();
    }

    @Override
    public Boolean value7() {
        return getEnabled();
    }

    @Override
    public Long value8() {
        return getPlugin();
    }

    @Override
    public UByte value9() {
        return getLockCount();
    }

    @Override
    public ULong value10() {
        return getLastRun();
    }

    @Override
    public CoreTasksRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreTasksRecord value2(String value) {
        setApp(value);
        return this;
    }

    @Override
    public CoreTasksRecord value3(String value) {
        setKey(value);
        return this;
    }

    @Override
    public CoreTasksRecord value4(String value) {
        setFrequency(value);
        return this;
    }

    @Override
    public CoreTasksRecord value5(ULong value) {
        setNextRun(value);
        return this;
    }

    @Override
    public CoreTasksRecord value6(Boolean value) {
        setRunning(value);
        return this;
    }

    @Override
    public CoreTasksRecord value7(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public CoreTasksRecord value8(Long value) {
        setPlugin(value);
        return this;
    }

    @Override
    public CoreTasksRecord value9(UByte value) {
        setLockCount(value);
        return this;
    }

    @Override
    public CoreTasksRecord value10(ULong value) {
        setLastRun(value);
        return this;
    }

    @Override
    public CoreTasksRecord values(ULong value1, String value2, String value3, String value4, ULong value5, Boolean value6, Boolean value7, Long value8, UByte value9, ULong value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreTasksRecord
     */
    public CoreTasksRecord() {
        super(CoreTasks.CORE_TASKS);
    }

    /**
     * Create a detached, initialised CoreTasksRecord
     */
    public CoreTasksRecord(ULong id, String app, String key, String frequency, ULong nextRun, Boolean running, Boolean enabled, Long plugin, UByte lockCount, ULong lastRun) {
        super(CoreTasks.CORE_TASKS);

        setId(id);
        setApp(app);
        setKey(key);
        setFrequency(frequency);
        setNextRun(nextRun);
        setRunning(running);
        setEnabled(enabled);
        setPlugin(plugin);
        setLockCount(lockCount);
        setLastRun(lastRun);
    }
}
