/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthServerAccessTokensStatus;
import me.aa07.paradise.taskdaemon.database.forums.tables.CoreOauthServerAccessTokens;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthServerAccessTokensRecord extends TableRecordImpl<CoreOauthServerAccessTokensRecord> implements Record13<String, String, UInteger, String, UInteger, ULong, String, String, UInteger, String, String, String, CoreOauthServerAccessTokensStatus> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.client_id</code>.
     * The client ID
     */
    public void setClientId(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.client_id</code>.
     * The client ID
     */
    public String getClientId() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token</code>.
     * The access token
     */
    public void setAccessToken(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token</code>.
     * The access token
     */
    public String getAccessToken() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token_expires</code>.
     * Unix timestamp of when access token expires, or NULL for never
     */
    public void setAccessTokenExpires(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token_expires</code>.
     * Unix timestamp of when access token expires, or NULL for never
     */
    public UInteger getAccessTokenExpires() {
        return (UInteger) get(2);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token</code>.
     * Refresh token or NULL if not applicable
     */
    public void setRefreshToken(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token</code>.
     * Refresh token or NULL if not applicable
     */
    public String getRefreshToken() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token_expires</code>.
     * Unix timestamp of when refresh token expires or NULL if never - will be
     * same value as access_token_expires if not applicable
     */
    public void setRefreshTokenExpires(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token_expires</code>.
     * Unix timestamp of when refresh token expires or NULL if never - will be
     * same value as access_token_expires if not applicable
     */
    public UInteger getRefreshTokenExpires() {
        return (UInteger) get(4);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.member_id</code>.
     * The member ID or NULL for client_credentials
     */
    public void setMemberId(ULong value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.member_id</code>.
     * The member ID or NULL for client_credentials
     */
    public ULong getMemberId() {
        return (ULong) get(5);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.scope</code>.
     * JSON-encoded array of scopes or NULL if no scope was requested
     */
    public void setScope(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.scope</code>.
     * JSON-encoded array of scopes or NULL if no scope was requested
     */
    public String getScope() {
        return (String) get(6);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.authorization_code</code>.
     * The authorization code that generated the access token, if applicable
     */
    public void setAuthorizationCode(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.authorization_code</code>.
     * The authorization code that generated the access token, if applicable
     */
    public String getAuthorizationCode() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.issued</code>. Unix
     * timestamp of when access token was generated
     */
    public void setIssued(UInteger value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.issued</code>. Unix
     * timestamp of when access token was generated
     */
    public UInteger getIssued() {
        return (UInteger) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.auth_user_agent</code>.
     * The user agent that the user performed authentication on, if known
     */
    public void setAuthUserAgent(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.auth_user_agent</code>.
     * The user agent that the user performed authentication on, if known
     */
    public String getAuthUserAgent() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.issue_user_agent</code>.
     * The user agent that the access token was issued to, if known
     */
    public void setIssueUserAgent(String value) {
        set(10, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.issue_user_agent</code>.
     * The user agent that the access token was issued to, if known
     */
    public String getIssueUserAgent() {
        return (String) get(10);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.device_key</code>.
     * The device key of the device used to obtain this access token, if known
     */
    public void setDeviceKey(String value) {
        set(11, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.device_key</code>.
     * The device key of the device used to obtain this access token, if known
     */
    public String getDeviceKey() {
        return (String) get(11);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_oauth_server_access_tokens.status</code>. The
     * status. "active" means "active if within expiry date".
     */
    public void setStatus(CoreOauthServerAccessTokensStatus value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_oauth_server_access_tokens.status</code>. The
     * status. "active" means "active if within expiry date".
     */
    public CoreOauthServerAccessTokensStatus getStatus() {
        return (CoreOauthServerAccessTokensStatus) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, UInteger, String, UInteger, ULong, String, String, UInteger, String, String, String, CoreOauthServerAccessTokensStatus> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<String, String, UInteger, String, UInteger, ULong, String, String, UInteger, String, String, String, CoreOauthServerAccessTokensStatus> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.CLIENT_ID;
    }

    @Override
    public Field<String> field2() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.ACCESS_TOKEN;
    }

    @Override
    public Field<UInteger> field3() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.ACCESS_TOKEN_EXPIRES;
    }

    @Override
    public Field<String> field4() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.REFRESH_TOKEN;
    }

    @Override
    public Field<UInteger> field5() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.REFRESH_TOKEN_EXPIRES;
    }

    @Override
    public Field<ULong> field6() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.MEMBER_ID;
    }

    @Override
    public Field<String> field7() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.SCOPE;
    }

    @Override
    public Field<String> field8() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.AUTHORIZATION_CODE;
    }

    @Override
    public Field<UInteger> field9() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.ISSUED;
    }

    @Override
    public Field<String> field10() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.AUTH_USER_AGENT;
    }

    @Override
    public Field<String> field11() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.ISSUE_USER_AGENT;
    }

    @Override
    public Field<String> field12() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.DEVICE_KEY;
    }

    @Override
    public Field<CoreOauthServerAccessTokensStatus> field13() {
        return CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS.STATUS;
    }

    @Override
    public String component1() {
        return getClientId();
    }

    @Override
    public String component2() {
        return getAccessToken();
    }

    @Override
    public UInteger component3() {
        return getAccessTokenExpires();
    }

    @Override
    public String component4() {
        return getRefreshToken();
    }

    @Override
    public UInteger component5() {
        return getRefreshTokenExpires();
    }

    @Override
    public ULong component6() {
        return getMemberId();
    }

    @Override
    public String component7() {
        return getScope();
    }

    @Override
    public String component8() {
        return getAuthorizationCode();
    }

    @Override
    public UInteger component9() {
        return getIssued();
    }

    @Override
    public String component10() {
        return getAuthUserAgent();
    }

    @Override
    public String component11() {
        return getIssueUserAgent();
    }

    @Override
    public String component12() {
        return getDeviceKey();
    }

    @Override
    public CoreOauthServerAccessTokensStatus component13() {
        return getStatus();
    }

    @Override
    public String value1() {
        return getClientId();
    }

    @Override
    public String value2() {
        return getAccessToken();
    }

    @Override
    public UInteger value3() {
        return getAccessTokenExpires();
    }

    @Override
    public String value4() {
        return getRefreshToken();
    }

    @Override
    public UInteger value5() {
        return getRefreshTokenExpires();
    }

    @Override
    public ULong value6() {
        return getMemberId();
    }

    @Override
    public String value7() {
        return getScope();
    }

    @Override
    public String value8() {
        return getAuthorizationCode();
    }

    @Override
    public UInteger value9() {
        return getIssued();
    }

    @Override
    public String value10() {
        return getAuthUserAgent();
    }

    @Override
    public String value11() {
        return getIssueUserAgent();
    }

    @Override
    public String value12() {
        return getDeviceKey();
    }

    @Override
    public CoreOauthServerAccessTokensStatus value13() {
        return getStatus();
    }

    @Override
    public CoreOauthServerAccessTokensRecord value1(String value) {
        setClientId(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value2(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value3(UInteger value) {
        setAccessTokenExpires(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value4(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value5(UInteger value) {
        setRefreshTokenExpires(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value6(ULong value) {
        setMemberId(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value7(String value) {
        setScope(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value8(String value) {
        setAuthorizationCode(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value9(UInteger value) {
        setIssued(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value10(String value) {
        setAuthUserAgent(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value11(String value) {
        setIssueUserAgent(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value12(String value) {
        setDeviceKey(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord value13(CoreOauthServerAccessTokensStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public CoreOauthServerAccessTokensRecord values(String value1, String value2, UInteger value3, String value4, UInteger value5, ULong value6, String value7, String value8, UInteger value9, String value10, String value11, String value12, CoreOauthServerAccessTokensStatus value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreOauthServerAccessTokensRecord
     */
    public CoreOauthServerAccessTokensRecord() {
        super(CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS);
    }

    /**
     * Create a detached, initialised CoreOauthServerAccessTokensRecord
     */
    public CoreOauthServerAccessTokensRecord(String clientId, String accessToken, UInteger accessTokenExpires, String refreshToken, UInteger refreshTokenExpires, ULong memberId, String scope, String authorizationCode, UInteger issued, String authUserAgent, String issueUserAgent, String deviceKey, CoreOauthServerAccessTokensStatus status) {
        super(CoreOauthServerAccessTokens.CORE_OAUTH_SERVER_ACCESS_TOKENS);

        setClientId(clientId);
        setAccessToken(accessToken);
        setAccessTokenExpires(accessTokenExpires);
        setRefreshToken(refreshToken);
        setRefreshTokenExpires(refreshTokenExpires);
        setMemberId(memberId);
        setScope(scope);
        setAuthorizationCode(authorizationCode);
        setIssued(issued);
        setAuthUserAgent(authUserAgent);
        setIssueUserAgent(issueUserAgent);
        setDeviceKey(deviceKey);
        setStatus(status);
    }
}
