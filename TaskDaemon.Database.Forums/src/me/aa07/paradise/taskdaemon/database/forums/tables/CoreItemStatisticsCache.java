/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreItemStatisticsCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreItemStatisticsCache extends TableImpl<CoreItemStatisticsCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_item_statistics_cache</code>
     */
    public static final CoreItemStatisticsCache CORE_ITEM_STATISTICS_CACHE = new CoreItemStatisticsCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreItemStatisticsCacheRecord> getRecordType() {
        return CoreItemStatisticsCacheRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_item_statistics_cache.cache_id</code>.
     */
    public final TableField<CoreItemStatisticsCacheRecord, Integer> CACHE_ID = createField(DSL.name("cache_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_statistics_cache.cache_class</code>.
     */
    public final TableField<CoreItemStatisticsCacheRecord, String> CACHE_CLASS = createField(DSL.name("cache_class"), SQLDataType.VARCHAR(150).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_statistics_cache.cache_item_id</code>.
     */
    public final TableField<CoreItemStatisticsCacheRecord, Integer> CACHE_ITEM_ID = createField(DSL.name("cache_item_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_statistics_cache.cache_added</code>.
     */
    public final TableField<CoreItemStatisticsCacheRecord, Integer> CACHE_ADDED = createField(DSL.name("cache_added"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>paradise_forums.core_item_statistics_cache.cache_contents</code>.
     */
    public final TableField<CoreItemStatisticsCacheRecord, String> CACHE_CONTENTS = createField(DSL.name("cache_contents"), SQLDataType.CLOB.nullable(false), this, "");

    private CoreItemStatisticsCache(Name alias, Table<CoreItemStatisticsCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreItemStatisticsCache(Name alias, Table<CoreItemStatisticsCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_item_statistics_cache</code>
     * table reference
     */
    public CoreItemStatisticsCache(String alias) {
        this(DSL.name(alias), CORE_ITEM_STATISTICS_CACHE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_item_statistics_cache</code>
     * table reference
     */
    public CoreItemStatisticsCache(Name alias) {
        this(alias, CORE_ITEM_STATISTICS_CACHE);
    }

    /**
     * Create a <code>paradise_forums.core_item_statistics_cache</code> table
     * reference
     */
    public CoreItemStatisticsCache() {
        this(DSL.name("core_item_statistics_cache"), null);
    }

    public <O extends Record> CoreItemStatisticsCache(Table<O> child, ForeignKey<O, CoreItemStatisticsCacheRecord> key) {
        super(child, key, CORE_ITEM_STATISTICS_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ITEM_STATISTICS_CACHE_CACHE_ADDED);
    }

    @Override
    public Identity<CoreItemStatisticsCacheRecord, Integer> getIdentity() {
        return (Identity<CoreItemStatisticsCacheRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreItemStatisticsCacheRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ITEM_STATISTICS_CACHE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreItemStatisticsCacheRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_ITEM_STATISTICS_CACHE_CACHE_LOOKUP);
    }

    @Override
    public CoreItemStatisticsCache as(String alias) {
        return new CoreItemStatisticsCache(DSL.name(alias), this);
    }

    @Override
    public CoreItemStatisticsCache as(Name alias) {
        return new CoreItemStatisticsCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreItemStatisticsCache rename(String name) {
        return new CoreItemStatisticsCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreItemStatisticsCache rename(Name name) {
        return new CoreItemStatisticsCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
