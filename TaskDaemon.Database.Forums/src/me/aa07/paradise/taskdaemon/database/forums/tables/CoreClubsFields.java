/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreClubsFieldsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreClubsFields extends TableImpl<CoreClubsFieldsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_clubs_fields</code>
     */
    public static final CoreClubsFields CORE_CLUBS_FIELDS = new CoreClubsFields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreClubsFieldsRecord> getRecordType() {
        return CoreClubsFieldsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_id</code>. ID Number
     */
    public final TableField<CoreClubsFieldsRecord, ULong> F_ID = createField(DSL.name("f_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_extra</code>. Extra
     * details such as options
     */
    public final TableField<CoreClubsFieldsRecord, String> F_EXTRA = createField(DSL.name("f_extra"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Extra details such as options");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_position</code>.
     * Position order
     */
    public final TableField<CoreClubsFieldsRecord, UInteger> F_POSITION = createField(DSL.name("f_position"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Position order");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_required</code>.
     * Binary value indicating if the field is required
     */
    public final TableField<CoreClubsFieldsRecord, UByte> F_REQUIRED = createField(DSL.name("f_required"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Binary value indicating if the field is required");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_multiple</code>. For
     * certain types of fields, if multiple values are supported
     */
    public final TableField<CoreClubsFieldsRecord, UByte> F_MULTIPLE = createField(DSL.name("f_multiple"), SQLDataType.TINYINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.TINYINTUNSIGNED)), this, "For certain types of fields, if multiple values are supported");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_type</code>. The
     * field type
     */
    public final TableField<CoreClubsFieldsRecord, String> F_TYPE = createField(DSL.name("f_type"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The field type");

    /**
     * The column <code>paradise_forums.core_clubs_fields.f_filterable</code>.
     * Binary value indicating if the field should be included in the filter
     * options
     */
    public final TableField<CoreClubsFieldsRecord, UByte> F_FILTERABLE = createField(DSL.name("f_filterable"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Binary value indicating if the field should be included in the filter options");

    /**
     * The column
     * <code>paradise_forums.core_clubs_fields.f_allow_attachments</code>.
     */
    public final TableField<CoreClubsFieldsRecord, UByte> F_ALLOW_ATTACHMENTS = createField(DSL.name("f_allow_attachments"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "");

    private CoreClubsFields(Name alias, Table<CoreClubsFieldsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreClubsFields(Name alias, Table<CoreClubsFieldsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_fields</code> table
     * reference
     */
    public CoreClubsFields(String alias) {
        this(DSL.name(alias), CORE_CLUBS_FIELDS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_fields</code> table
     * reference
     */
    public CoreClubsFields(Name alias) {
        this(alias, CORE_CLUBS_FIELDS);
    }

    /**
     * Create a <code>paradise_forums.core_clubs_fields</code> table reference
     */
    public CoreClubsFields() {
        this(DSL.name("core_clubs_fields"), null);
    }

    public <O extends Record> CoreClubsFields(Table<O> child, ForeignKey<O, CoreClubsFieldsRecord> key) {
        super(child, key, CORE_CLUBS_FIELDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreClubsFieldsRecord, ULong> getIdentity() {
        return (Identity<CoreClubsFieldsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreClubsFieldsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_CLUBS_FIELDS_PRIMARY;
    }

    @Override
    public CoreClubsFields as(String alias) {
        return new CoreClubsFields(DSL.name(alias), this);
    }

    @Override
    public CoreClubsFields as(Name alias) {
        return new CoreClubsFields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsFields rename(String name) {
        return new CoreClubsFields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsFields rename(Name name) {
        return new CoreClubsFields(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, UInteger, UByte, UByte, String, UByte, UByte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
