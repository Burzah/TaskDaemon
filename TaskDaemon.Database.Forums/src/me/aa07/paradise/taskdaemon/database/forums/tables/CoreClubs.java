/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreClubsType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreClubsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreClubs extends TableImpl<CoreClubsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_clubs</code>
     */
    public static final CoreClubs CORE_CLUBS = new CoreClubs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreClubsRecord> getRecordType() {
        return CoreClubsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_clubs.id</code>. ID Number
     */
    public final TableField<CoreClubsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_clubs.name</code>. Name of the club
     */
    public final TableField<CoreClubsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "Name of the club");

    /**
     * The column <code>paradise_forums.core_clubs.created</code>. Unix
     * timestamp of when the club was created
     */
    public final TableField<CoreClubsRecord, UInteger> CREATED = createField(DSL.name("created"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when the club was created");

    /**
     * The column <code>paradise_forums.core_clubs.members</code>. Current
     * number of members
     */
    public final TableField<CoreClubsRecord, UInteger> MEMBERS = createField(DSL.name("members"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Current number of members");

    /**
     * The column <code>paradise_forums.core_clubs.owner</code>. Member ID of
     * club owner
     */
    public final TableField<CoreClubsRecord, ULong> OWNER = createField(DSL.name("owner"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "Member ID of club owner");

    /**
     * The column <code>paradise_forums.core_clubs.type</code>. Type of club
     */
    public final TableField<CoreClubsRecord, CoreClubsType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("'open'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreClubsType.class), this, "Type of club");

    /**
     * The column <code>paradise_forums.core_clubs.profile_photo</code>. The
     * club profile photo
     */
    public final TableField<CoreClubsRecord, String> PROFILE_PHOTO = createField(DSL.name("profile_photo"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The club profile photo");

    /**
     * The column <code>paradise_forums.core_clubs.cover_photo</code>. The club
     * cover photo
     */
    public final TableField<CoreClubsRecord, String> COVER_PHOTO = createField(DSL.name("cover_photo"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The club cover photo");

    /**
     * The column <code>paradise_forums.core_clubs.cover_offset</code>. The
     * position offset for the cover photo
     */
    public final TableField<CoreClubsRecord, UInteger> COVER_OFFSET = createField(DSL.name("cover_offset"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "The position offset for the cover photo");

    /**
     * The column <code>paradise_forums.core_clubs.featured</code>. Binary value
     * indicating if club is featured
     */
    public final TableField<CoreClubsRecord, UByte> FEATURED = createField(DSL.name("featured"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Binary value indicating if club is featured");

    /**
     * The column <code>paradise_forums.core_clubs.location_json</code>. Full
     * \IPS\Geolocation JSON value of club location
     */
    public final TableField<CoreClubsRecord, String> LOCATION_JSON = createField(DSL.name("location_json"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Full \\IPS\\Geolocation JSON value of club location");

    /**
     * The column <code>paradise_forums.core_clubs.location_lat</code>. The
     * latitude of the club location
     */
    public final TableField<CoreClubsRecord, BigDecimal> LOCATION_LAT = createField(DSL.name("location_lat"), SQLDataType.DECIMAL(10, 8).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "The latitude of the club location");

    /**
     * The column <code>paradise_forums.core_clubs.location_long</code>. The
     * longitude of the club location
     */
    public final TableField<CoreClubsRecord, BigDecimal> LOCATION_LONG = createField(DSL.name("location_long"), SQLDataType.DECIMAL(11, 8).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "The longitude of the club location");

    /**
     * The column <code>paradise_forums.core_clubs.about</code>. Blurb about
     * this club
     */
    public final TableField<CoreClubsRecord, String> ABOUT = createField(DSL.name("about"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Blurb about this club");

    /**
     * The column <code>paradise_forums.core_clubs.last_activity</code>.
     * Timestamp of last activity
     */
    public final TableField<CoreClubsRecord, UInteger> LAST_ACTIVITY = createField(DSL.name("last_activity"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Timestamp of last activity");

    /**
     * The column <code>paradise_forums.core_clubs.content</code>. Count of all
     * content items + comments
     */
    public final TableField<CoreClubsRecord, UInteger> CONTENT = createField(DSL.name("content"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Count of all content items + comments");

    /**
     * The column <code>paradise_forums.core_clubs.rebuilt</code>. Timestamp of
     * when the last_activity and content values were last updated
     */
    public final TableField<CoreClubsRecord, UInteger> REBUILT = createField(DSL.name("rebuilt"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Timestamp of when the last_activity and content values were last updated");

    /**
     * The column <code>paradise_forums.core_clubs.approved</code>. Boolean
     * indicating if club is approved
     */
    public final TableField<CoreClubsRecord, UByte> APPROVED = createField(DSL.name("approved"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Boolean indicating if club is approved");

    /**
     * The column
     * <code>paradise_forums.core_clubs.profile_photo_uncropped</code>. The
     * uncropped club photo
     */
    public final TableField<CoreClubsRecord, String> PROFILE_PHOTO_UNCROPPED = createField(DSL.name("profile_photo_uncropped"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The uncropped club photo");

    /**
     * The column <code>paradise_forums.core_clubs.fee</code>. JSON object with
     * costs if this is a paid club
     */
    public final TableField<CoreClubsRecord, String> FEE = createField(DSL.name("fee"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON object with costs if this is a paid club");

    /**
     * The column <code>paradise_forums.core_clubs.renewal_term</code>. The
     * renewal term in renewal_units (e.g. if renews every 5 days, value will be
     * 5)
     */
    public final TableField<CoreClubsRecord, UInteger> RENEWAL_TERM = createField(DSL.name("renewal_term"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "The renewal term in renewal_units (e.g. if renews every 5 days, value will be 5)");

    /**
     * The column <code>paradise_forums.core_clubs.renewal_units</code>. The
     * renewal units - "d" for days, etc.
     */
    public final TableField<CoreClubsRecord, String> RENEWAL_UNITS = createField(DSL.name("renewal_units"), SQLDataType.CHAR(1).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The renewal units - \"d\" for days, etc.");

    /**
     * The column <code>paradise_forums.core_clubs.renewal_price</code>. JSON
     * object with renewal costs if this is a paid club
     */
    public final TableField<CoreClubsRecord, String> RENEWAL_PRICE = createField(DSL.name("renewal_price"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON object with renewal costs if this is a paid club");

    /**
     * The column <code>paradise_forums.core_clubs.menu_tabs</code>. Club Menu
     * sortorder
     */
    public final TableField<CoreClubsRecord, String> MENU_TABS = createField(DSL.name("menu_tabs"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "Club Menu sortorder");

    /**
     * The column <code>paradise_forums.core_clubs.show_membertab</code>.
     */
    public final TableField<CoreClubsRecord, String> SHOW_MEMBERTAB = createField(DSL.name("show_membertab"), SQLDataType.VARCHAR(26).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_clubs.rules</code>.
     */
    public final TableField<CoreClubsRecord, String> RULES = createField(DSL.name("rules"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_clubs.rules_required</code>.
     */
    public final TableField<CoreClubsRecord, Boolean> RULES_REQUIRED = createField(DSL.name("rules_required"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "");

    private CoreClubs(Name alias, Table<CoreClubsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreClubs(Name alias, Table<CoreClubsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs</code> table reference
     */
    public CoreClubs(String alias) {
        this(DSL.name(alias), CORE_CLUBS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs</code> table reference
     */
    public CoreClubs(Name alias) {
        this(alias, CORE_CLUBS);
    }

    /**
     * Create a <code>paradise_forums.core_clubs</code> table reference
     */
    public CoreClubs() {
        this(DSL.name("core_clubs"), null);
    }

    public <O extends Record> CoreClubs(Table<O> child, ForeignKey<O, CoreClubsRecord> key) {
        super(child, key, CORE_CLUBS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_CLUBS_APPROVED, Indexes.CORE_CLUBS_CLUB_FEATURED, Indexes.CORE_CLUBS_CONTENT, Indexes.CORE_CLUBS_CREATED, Indexes.CORE_CLUBS_LAST_ACTIVITY, Indexes.CORE_CLUBS_LOCATION_LAT, Indexes.CORE_CLUBS_MEMBERS, Indexes.CORE_CLUBS_NAME, Indexes.CORE_CLUBS_OWNER, Indexes.CORE_CLUBS_REBUILT, Indexes.CORE_CLUBS_TYPE);
    }

    @Override
    public Identity<CoreClubsRecord, ULong> getIdentity() {
        return (Identity<CoreClubsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreClubsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_CLUBS_PRIMARY;
    }

    @Override
    public CoreClubs as(String alias) {
        return new CoreClubs(DSL.name(alias), this);
    }

    @Override
    public CoreClubs as(Name alias) {
        return new CoreClubs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubs rename(String name) {
        return new CoreClubs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubs rename(Name name) {
        return new CoreClubs(name, null);
    }
}
