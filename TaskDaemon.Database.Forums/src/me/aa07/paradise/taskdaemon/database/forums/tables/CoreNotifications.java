/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreNotificationsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreNotifications extends TableImpl<CoreNotificationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_notifications</code>
     */
    public static final CoreNotifications CORE_NOTIFICATIONS = new CoreNotifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreNotificationsRecord> getRecordType() {
        return CoreNotificationsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_notifications.id</code>. ID Number
     */
    public final TableField<CoreNotificationsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_notifications.member</code>. The
     * member ID
     */
    public final TableField<CoreNotificationsRecord, ULong> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The member ID");

    /**
     * The column
     * <code>paradise_forums.core_notifications.notification_app</code>. The
     * application that owns this type of notification
     */
    public final TableField<CoreNotificationsRecord, String> NOTIFICATION_APP = createField(DSL.name("notification_app"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The application that owns this type of notification");

    /**
     * The column
     * <code>paradise_forums.core_notifications.notification_key</code>. The
     * notification key
     */
    public final TableField<CoreNotificationsRecord, String> NOTIFICATION_KEY = createField(DSL.name("notification_key"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The notification key");

    /**
     * The column <code>paradise_forums.core_notifications.item_class</code>.
     * The class for the item the notification is about
     */
    public final TableField<CoreNotificationsRecord, String> ITEM_CLASS = createField(DSL.name("item_class"), SQLDataType.VARCHAR(128).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The class for the item the notification is about");

    /**
     * The column <code>paradise_forums.core_notifications.item_id</code>. The
     * ID number for the item the notification is about
     */
    public final TableField<CoreNotificationsRecord, ULong> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The ID number for the item the notification is about");

    /**
     * The column <code>paradise_forums.core_notifications.member_data</code>.
     * JSON-encoded merge data
     */
    public final TableField<CoreNotificationsRecord, String> MEMBER_DATA = createField(DSL.name("member_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded merge data");

    /**
     * The column <code>paradise_forums.core_notifications.sent_time</code>.
     * Unix timestamp of the time the notification was sent.
     */
    public final TableField<CoreNotificationsRecord, UInteger> SENT_TIME = createField(DSL.name("sent_time"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of the time the notification was sent.");

    /**
     * The column <code>paradise_forums.core_notifications.read_time</code>.
     * Unix timestamp of the time the notification was read.
     */
    public final TableField<CoreNotificationsRecord, UInteger> READ_TIME = createField(DSL.name("read_time"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of the time the notification was read.");

    /**
     * The column <code>paradise_forums.core_notifications.updated_time</code>.
     * Unix timestamp of when the notification was last updated (or sent)
     */
    public final TableField<CoreNotificationsRecord, UInteger> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when the notification was last updated (or sent)");

    /**
     * The column
     * <code>paradise_forums.core_notifications.item_sub_class</code>. Item Sub
     * Class for Comments and Reviews
     */
    public final TableField<CoreNotificationsRecord, String> ITEM_SUB_CLASS = createField(DSL.name("item_sub_class"), SQLDataType.VARCHAR(128).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "Item Sub Class for Comments and Reviews");

    /**
     * The column <code>paradise_forums.core_notifications.item_sub_id</code>.
     * Item Sub ID
     */
    public final TableField<CoreNotificationsRecord, ULong> ITEM_SUB_ID = createField(DSL.name("item_sub_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "Item Sub ID");

    /**
     * The column <code>paradise_forums.core_notifications.extra</code>.
     * JSON-encoded additional data
     */
    public final TableField<CoreNotificationsRecord, String> EXTRA = createField(DSL.name("extra"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded additional data");

    private CoreNotifications(Name alias, Table<CoreNotificationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreNotifications(Name alias, Table<CoreNotificationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_notifications</code> table
     * reference
     */
    public CoreNotifications(String alias) {
        this(DSL.name(alias), CORE_NOTIFICATIONS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_notifications</code> table
     * reference
     */
    public CoreNotifications(Name alias) {
        this(alias, CORE_NOTIFICATIONS);
    }

    /**
     * Create a <code>paradise_forums.core_notifications</code> table reference
     */
    public CoreNotifications() {
        this(DSL.name("core_notifications"), null);
    }

    public <O extends Record> CoreNotifications(Table<O> child, ForeignKey<O, CoreNotificationsRecord> key) {
        super(child, key, CORE_NOTIFICATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_NOTIFICATIONS_ITEM_LOOKUP, Indexes.CORE_NOTIFICATIONS_MEMBER_READ, Indexes.CORE_NOTIFICATIONS_MEMBER_SORT, Indexes.CORE_NOTIFICATIONS_SENT_TIME, Indexes.CORE_NOTIFICATIONS_SUBITEM_LOOKUP);
    }

    @Override
    public Identity<CoreNotificationsRecord, ULong> getIdentity() {
        return (Identity<CoreNotificationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreNotificationsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_NOTIFICATIONS_PRIMARY;
    }

    @Override
    public CoreNotifications as(String alias) {
        return new CoreNotifications(DSL.name(alias), this);
    }

    @Override
    public CoreNotifications as(Name alias) {
        return new CoreNotifications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreNotifications rename(String name) {
        return new CoreNotifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreNotifications rename(Name name) {
        return new CoreNotifications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<ULong, ULong, String, String, String, ULong, String, UInteger, UInteger, UInteger, String, ULong, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
