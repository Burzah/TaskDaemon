/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.BrilliantdiscordLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BrilliantdiscordLogs extends TableImpl<BrilliantdiscordLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.brilliantdiscord_logs</code>
     */
    public static final BrilliantdiscordLogs BRILLIANTDISCORD_LOGS = new BrilliantdiscordLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrilliantdiscordLogsRecord> getRecordType() {
        return BrilliantdiscordLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.brilliantdiscord_logs.id</code>. ID
     * Number
     */
    public final TableField<BrilliantdiscordLogsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.brilliantdiscord_logs.message</code>.
     */
    public final TableField<BrilliantdiscordLogsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.brilliantdiscord_logs.code</code>.
     */
    public final TableField<BrilliantdiscordLogsRecord, Integer> CODE = createField(DSL.name("code"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.brilliantdiscord_logs.member</code>.
     */
    public final TableField<BrilliantdiscordLogsRecord, Long> MEMBER = createField(DSL.name("member"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>paradise_forums.brilliantdiscord_logs.exception_data</code>.
     */
    public final TableField<BrilliantdiscordLogsRecord, String> EXCEPTION_DATA = createField(DSL.name("exception_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.brilliantdiscord_logs.time</code>.
     */
    public final TableField<BrilliantdiscordLogsRecord, Integer> TIME = createField(DSL.name("time"), SQLDataType.INTEGER.nullable(false), this, "");

    private BrilliantdiscordLogs(Name alias, Table<BrilliantdiscordLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BrilliantdiscordLogs(Name alias, Table<BrilliantdiscordLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_logs</code>
     * table reference
     */
    public BrilliantdiscordLogs(String alias) {
        this(DSL.name(alias), BRILLIANTDISCORD_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_logs</code>
     * table reference
     */
    public BrilliantdiscordLogs(Name alias) {
        this(alias, BRILLIANTDISCORD_LOGS);
    }

    /**
     * Create a <code>paradise_forums.brilliantdiscord_logs</code> table
     * reference
     */
    public BrilliantdiscordLogs() {
        this(DSL.name("brilliantdiscord_logs"), null);
    }

    public <O extends Record> BrilliantdiscordLogs(Table<O> child, ForeignKey<O, BrilliantdiscordLogsRecord> key) {
        super(child, key, BRILLIANTDISCORD_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<BrilliantdiscordLogsRecord, ULong> getIdentity() {
        return (Identity<BrilliantdiscordLogsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BrilliantdiscordLogsRecord> getPrimaryKey() {
        return Keys.KEY_BRILLIANTDISCORD_LOGS_PRIMARY;
    }

    @Override
    public BrilliantdiscordLogs as(String alias) {
        return new BrilliantdiscordLogs(DSL.name(alias), this);
    }

    @Override
    public BrilliantdiscordLogs as(Name alias) {
        return new BrilliantdiscordLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordLogs rename(String name) {
        return new BrilliantdiscordLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordLogs rename(Name name) {
        return new BrilliantdiscordLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, Integer, Long, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
