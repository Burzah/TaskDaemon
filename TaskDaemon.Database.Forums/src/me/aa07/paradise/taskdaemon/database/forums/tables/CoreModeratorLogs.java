/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreModeratorLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreModeratorLogs extends TableImpl<CoreModeratorLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_moderator_logs</code>
     */
    public static final CoreModeratorLogs CORE_MODERATOR_LOGS = new CoreModeratorLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreModeratorLogsRecord> getRecordType() {
        return CoreModeratorLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_moderator_logs.id</code>.
     */
    public final TableField<CoreModeratorLogsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.member_id</code>.
     */
    public final TableField<CoreModeratorLogsRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.ctime</code>.
     */
    public final TableField<CoreModeratorLogsRecord, Integer> CTIME = createField(DSL.name("ctime"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.note</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.ip_address</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(46).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.appcomponent</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> APPCOMPONENT = createField(DSL.name("appcomponent"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.module</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> MODULE = createField(DSL.name("module"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.controller</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> CONTROLLER = createField(DSL.name("controller"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.do</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> DO = createField(DSL.name("do"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.lang_key</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> LANG_KEY = createField(DSL.name("lang_key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.class</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.item_id</code>.
     */
    public final TableField<CoreModeratorLogsRecord, UInteger> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_moderator_logs.member_name</code>.
     */
    public final TableField<CoreModeratorLogsRecord, String> MEMBER_NAME = createField(DSL.name("member_name"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    private CoreModeratorLogs(Name alias, Table<CoreModeratorLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreModeratorLogs(Name alias, Table<CoreModeratorLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_moderator_logs</code> table
     * reference
     */
    public CoreModeratorLogs(String alias) {
        this(DSL.name(alias), CORE_MODERATOR_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_moderator_logs</code> table
     * reference
     */
    public CoreModeratorLogs(Name alias) {
        this(alias, CORE_MODERATOR_LOGS);
    }

    /**
     * Create a <code>paradise_forums.core_moderator_logs</code> table reference
     */
    public CoreModeratorLogs() {
        this(DSL.name("core_moderator_logs"), null);
    }

    public <O extends Record> CoreModeratorLogs(Table<O> child, ForeignKey<O, CoreModeratorLogsRecord> key) {
        super(child, key, CORE_MODERATOR_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_MODERATOR_LOGS_CLASS, Indexes.CORE_MODERATOR_LOGS_CTIME, Indexes.CORE_MODERATOR_LOGS_IP_ADDRESS, Indexes.CORE_MODERATOR_LOGS_ITEM_ID, Indexes.CORE_MODERATOR_LOGS_MEMBER_ID);
    }

    @Override
    public Identity<CoreModeratorLogsRecord, Long> getIdentity() {
        return (Identity<CoreModeratorLogsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreModeratorLogsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_MODERATOR_LOGS_PRIMARY;
    }

    @Override
    public CoreModeratorLogs as(String alias) {
        return new CoreModeratorLogs(DSL.name(alias), this);
    }

    @Override
    public CoreModeratorLogs as(Name alias) {
        return new CoreModeratorLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreModeratorLogs rename(String name) {
        return new CoreModeratorLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreModeratorLogs rename(Name name) {
        return new CoreModeratorLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, Integer, String, String, String, String, String, String, String, String, UInteger, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
