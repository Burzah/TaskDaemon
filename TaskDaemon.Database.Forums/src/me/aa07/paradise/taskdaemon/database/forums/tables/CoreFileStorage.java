/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreFileStorageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreFileStorage extends TableImpl<CoreFileStorageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_file_storage</code>
     */
    public static final CoreFileStorage CORE_FILE_STORAGE = new CoreFileStorage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreFileStorageRecord> getRecordType() {
        return CoreFileStorageRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_file_storage.id</code>. ID Number
     */
    public final TableField<CoreFileStorageRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_file_storage.method</code>. The
     * storage method
     */
    public final TableField<CoreFileStorageRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(128).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The storage method");

    /**
     * The column <code>paradise_forums.core_file_storage.configuration</code>.
     * JSON object of configuration options
     */
    public final TableField<CoreFileStorageRecord, String> CONFIGURATION = createField(DSL.name("configuration"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON object of configuration options");

    private CoreFileStorage(Name alias, Table<CoreFileStorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreFileStorage(Name alias, Table<CoreFileStorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_file_storage</code> table
     * reference
     */
    public CoreFileStorage(String alias) {
        this(DSL.name(alias), CORE_FILE_STORAGE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_file_storage</code> table
     * reference
     */
    public CoreFileStorage(Name alias) {
        this(alias, CORE_FILE_STORAGE);
    }

    /**
     * Create a <code>paradise_forums.core_file_storage</code> table reference
     */
    public CoreFileStorage() {
        this(DSL.name("core_file_storage"), null);
    }

    public <O extends Record> CoreFileStorage(Table<O> child, ForeignKey<O, CoreFileStorageRecord> key) {
        super(child, key, CORE_FILE_STORAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreFileStorageRecord, ULong> getIdentity() {
        return (Identity<CoreFileStorageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreFileStorageRecord> getPrimaryKey() {
        return Keys.KEY_CORE_FILE_STORAGE_PRIMARY;
    }

    @Override
    public CoreFileStorage as(String alias) {
        return new CoreFileStorage(DSL.name(alias), this);
    }

    @Override
    public CoreFileStorage as(Name alias) {
        return new CoreFileStorage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileStorage rename(String name) {
        return new CoreFileStorage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreFileStorage rename(Name name) {
        return new CoreFileStorage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
