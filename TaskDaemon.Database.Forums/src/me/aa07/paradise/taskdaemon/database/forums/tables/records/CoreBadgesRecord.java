/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreBadges;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreBadgesRecord extends UpdatableRecordImpl<CoreBadgesRecord> implements Record3<ULong, String, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_badges.id</code>. ID Number
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_badges.id</code>. ID Number
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_badges.image</code>.
     */
    public void setImage(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_badges.image</code>.
     */
    public String getImage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_badges.manually_awarded</code>. Can
     * this badge be manually awarded?
     */
    public void setManuallyAwarded(UByte value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_badges.manually_awarded</code>. Can
     * this badge be manually awarded?
     */
    public UByte getManuallyAwarded() {
        return (UByte) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, UByte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<ULong, String, UByte> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreBadges.CORE_BADGES.ID;
    }

    @Override
    public Field<String> field2() {
        return CoreBadges.CORE_BADGES.IMAGE;
    }

    @Override
    public Field<UByte> field3() {
        return CoreBadges.CORE_BADGES.MANUALLY_AWARDED;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getImage();
    }

    @Override
    public UByte component3() {
        return getManuallyAwarded();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getImage();
    }

    @Override
    public UByte value3() {
        return getManuallyAwarded();
    }

    @Override
    public CoreBadgesRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreBadgesRecord value2(String value) {
        setImage(value);
        return this;
    }

    @Override
    public CoreBadgesRecord value3(UByte value) {
        setManuallyAwarded(value);
        return this;
    }

    @Override
    public CoreBadgesRecord values(ULong value1, String value2, UByte value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreBadgesRecord
     */
    public CoreBadgesRecord() {
        super(CoreBadges.CORE_BADGES);
    }

    /**
     * Create a detached, initialised CoreBadgesRecord
     */
    public CoreBadgesRecord(ULong id, String image, UByte manuallyAwarded) {
        super(CoreBadges.CORE_BADGES);

        setId(id);
        setImage(image);
        setManuallyAwarded(manuallyAwarded);
    }
}
