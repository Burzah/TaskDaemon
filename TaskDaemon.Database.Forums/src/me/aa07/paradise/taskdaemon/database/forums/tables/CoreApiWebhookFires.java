/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreApiWebhookFiresStatus;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreApiWebhookFiresRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiWebhookFires extends TableImpl<CoreApiWebhookFiresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_api_webhook_fires</code>
     */
    public static final CoreApiWebhookFires CORE_API_WEBHOOK_FIRES = new CoreApiWebhookFires();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreApiWebhookFiresRecord> getRecordType() {
        return CoreApiWebhookFiresRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.id</code>. ID
     * Number
     */
    public final TableField<CoreApiWebhookFiresRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.webhook</code>.
     * The webhook ID
     */
    public final TableField<CoreApiWebhookFiresRecord, ULong> WEBHOOK = createField(DSL.name("webhook"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "The webhook ID");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.event</code>. The
     * event being fired
     */
    public final TableField<CoreApiWebhookFiresRecord, String> EVENT = createField(DSL.name("event"), SQLDataType.VARCHAR(32).nullable(false), this, "The event being fired");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.time</code>. Unix
     * timestamp of when it was requested
     */
    public final TableField<CoreApiWebhookFiresRecord, UInteger> TIME = createField(DSL.name("time"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when it was requested");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.status</code>.
     * The status
     */
    public final TableField<CoreApiWebhookFiresRecord, CoreApiWebhookFiresStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("'pending'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreApiWebhookFiresStatus.class), this, "The status");

    /**
     * The column
     * <code>paradise_forums.core_api_webhook_fires.response_code</code>. The
     * HTTP response code
     */
    public final TableField<CoreApiWebhookFiresRecord, String> RESPONSE_CODE = createField(DSL.name("response_code"), SQLDataType.CHAR(3).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The HTTP response code");

    /**
     * The column
     * <code>paradise_forums.core_api_webhook_fires.response_body</code>. The
     * response body
     */
    public final TableField<CoreApiWebhookFiresRecord, String> RESPONSE_BODY = createField(DSL.name("response_body"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The response body");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.fails</code>. The
     * number of times we have tried (and failed) to send
     */
    public final TableField<CoreApiWebhookFiresRecord, UByte> FAILS = createField(DSL.name("fails"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "The number of times we have tried (and failed) to send");

    /**
     * The column <code>paradise_forums.core_api_webhook_fires.data</code>. The
     * data to send
     */
    public final TableField<CoreApiWebhookFiresRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The data to send");

    private CoreApiWebhookFires(Name alias, Table<CoreApiWebhookFiresRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreApiWebhookFires(Name alias, Table<CoreApiWebhookFiresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_webhook_fires</code>
     * table reference
     */
    public CoreApiWebhookFires(String alias) {
        this(DSL.name(alias), CORE_API_WEBHOOK_FIRES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_webhook_fires</code>
     * table reference
     */
    public CoreApiWebhookFires(Name alias) {
        this(alias, CORE_API_WEBHOOK_FIRES);
    }

    /**
     * Create a <code>paradise_forums.core_api_webhook_fires</code> table
     * reference
     */
    public CoreApiWebhookFires() {
        this(DSL.name("core_api_webhook_fires"), null);
    }

    public <O extends Record> CoreApiWebhookFires(Table<O> child, ForeignKey<O, CoreApiWebhookFiresRecord> key) {
        super(child, key, CORE_API_WEBHOOK_FIRES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_API_WEBHOOK_FIRES_QUEUE, Indexes.CORE_API_WEBHOOK_FIRES_TIME);
    }

    @Override
    public Identity<CoreApiWebhookFiresRecord, ULong> getIdentity() {
        return (Identity<CoreApiWebhookFiresRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreApiWebhookFiresRecord> getPrimaryKey() {
        return Keys.KEY_CORE_API_WEBHOOK_FIRES_PRIMARY;
    }

    @Override
    public CoreApiWebhookFires as(String alias) {
        return new CoreApiWebhookFires(DSL.name(alias), this);
    }

    @Override
    public CoreApiWebhookFires as(Name alias) {
        return new CoreApiWebhookFires(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiWebhookFires rename(String name) {
        return new CoreApiWebhookFires(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiWebhookFires rename(Name name) {
        return new CoreApiWebhookFires(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, String, UInteger, CoreApiWebhookFiresStatus, String, String, UByte, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
