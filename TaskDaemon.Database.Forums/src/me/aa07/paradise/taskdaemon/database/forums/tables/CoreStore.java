/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreStoreRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreStore extends TableImpl<CoreStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_store</code>
     */
    public static final CoreStore CORE_STORE = new CoreStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreStoreRecord> getRecordType() {
        return CoreStoreRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_store.store_key</code>. Key
     */
    public final TableField<CoreStoreRecord, String> STORE_KEY = createField(DSL.name("store_key"), SQLDataType.VARCHAR(150).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Key");

    /**
     * The column <code>paradise_forums.core_store.store_value</code>. Value
     */
    public final TableField<CoreStoreRecord, byte[]> STORE_VALUE = createField(DSL.name("store_value"), SQLDataType.BLOB.defaultValue(DSL.inline("NULL", SQLDataType.BLOB)), this, "Value");

    private CoreStore(Name alias, Table<CoreStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreStore(Name alias, Table<CoreStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_store</code> table reference
     */
    public CoreStore(String alias) {
        this(DSL.name(alias), CORE_STORE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_store</code> table reference
     */
    public CoreStore(Name alias) {
        this(alias, CORE_STORE);
    }

    /**
     * Create a <code>paradise_forums.core_store</code> table reference
     */
    public CoreStore() {
        this(DSL.name("core_store"), null);
    }

    public <O extends Record> CoreStore(Table<O> child, ForeignKey<O, CoreStoreRecord> key) {
        super(child, key, CORE_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<CoreStoreRecord> getPrimaryKey() {
        return Keys.KEY_CORE_STORE_PRIMARY;
    }

    @Override
    public CoreStore as(String alias) {
        return new CoreStore(DSL.name(alias), this);
    }

    @Override
    public CoreStore as(Name alias) {
        return new CoreStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStore rename(String name) {
        return new CoreStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreStore rename(Name name) {
        return new CoreStore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
