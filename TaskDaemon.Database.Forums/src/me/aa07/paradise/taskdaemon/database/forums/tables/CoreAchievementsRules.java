/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAchievementsRulesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAchievementsRules extends TableImpl<CoreAchievementsRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_achievements_rules</code>
     */
    public static final CoreAchievementsRules CORE_ACHIEVEMENTS_RULES = new CoreAchievementsRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAchievementsRulesRecord> getRecordType() {
        return CoreAchievementsRulesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_achievements_rules.id</code>. ID
     * Number
     */
    public final TableField<CoreAchievementsRulesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_achievements_rules.action</code>.
     * The action that this rule applies to
     */
    public final TableField<CoreAchievementsRulesRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(255).nullable(false), this, "The action that this rule applies to");

    /**
     * The column <code>paradise_forums.core_achievements_rules.filters</code>.
     * JSON object of filters
     */
    public final TableField<CoreAchievementsRulesRecord, String> FILTERS = createField(DSL.name("filters"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON object of filters");

    /**
     * The column
     * <code>paradise_forums.core_achievements_rules.milestone</code>. If
     * applicable, the particular milestone this is for
     */
    public final TableField<CoreAchievementsRulesRecord, UInteger> MILESTONE = createField(DSL.name("milestone"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "If applicable, the particular milestone this is for");

    /**
     * The column
     * <code>paradise_forums.core_achievements_rules.points_subject</code>. The
     * points to award to the main person (can be negative)
     */
    public final TableField<CoreAchievementsRulesRecord, Integer> POINTS_SUBJECT = createField(DSL.name("points_subject"), SQLDataType.INTEGER.nullable(false), this, "The points to award to the main person (can be negative)");

    /**
     * The column
     * <code>paradise_forums.core_achievements_rules.badge_subject</code>. The
     * badge ID to award to the main person
     */
    public final TableField<CoreAchievementsRulesRecord, ULong> BADGE_SUBJECT = createField(DSL.name("badge_subject"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The badge ID to award to the main person");

    /**
     * The column
     * <code>paradise_forums.core_achievements_rules.points_other</code>. The
     * points to award to any other relevant people (can be negative)
     */
    public final TableField<CoreAchievementsRulesRecord, Integer> POINTS_OTHER = createField(DSL.name("points_other"), SQLDataType.INTEGER.nullable(false), this, "The points to award to any other relevant people (can be negative)");

    /**
     * The column
     * <code>paradise_forums.core_achievements_rules.badge_other</code>. The
     * badge ID to award to any other relevant people
     */
    public final TableField<CoreAchievementsRulesRecord, ULong> BADGE_OTHER = createField(DSL.name("badge_other"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The badge ID to award to any other relevant people");

    /**
     * The column <code>paradise_forums.core_achievements_rules.enabled</code>.
     * Rule enabled?
     */
    public final TableField<CoreAchievementsRulesRecord, UByte> ENABLED = createField(DSL.name("enabled"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINTUNSIGNED)), this, "Rule enabled?");

    private CoreAchievementsRules(Name alias, Table<CoreAchievementsRulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAchievementsRules(Name alias, Table<CoreAchievementsRulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_achievements_rules</code>
     * table reference
     */
    public CoreAchievementsRules(String alias) {
        this(DSL.name(alias), CORE_ACHIEVEMENTS_RULES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_achievements_rules</code>
     * table reference
     */
    public CoreAchievementsRules(Name alias) {
        this(alias, CORE_ACHIEVEMENTS_RULES);
    }

    /**
     * Create a <code>paradise_forums.core_achievements_rules</code> table
     * reference
     */
    public CoreAchievementsRules() {
        this(DSL.name("core_achievements_rules"), null);
    }

    public <O extends Record> CoreAchievementsRules(Table<O> child, ForeignKey<O, CoreAchievementsRulesRecord> key) {
        super(child, key, CORE_ACHIEVEMENTS_RULES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreAchievementsRulesRecord, ULong> getIdentity() {
        return (Identity<CoreAchievementsRulesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreAchievementsRulesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ACHIEVEMENTS_RULES_PRIMARY;
    }

    @Override
    public CoreAchievementsRules as(String alias) {
        return new CoreAchievementsRules(DSL.name(alias), this);
    }

    @Override
    public CoreAchievementsRules as(Name alias) {
        return new CoreAchievementsRules(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAchievementsRules rename(String name) {
        return new CoreAchievementsRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAchievementsRules rename(Name name) {
        return new CoreAchievementsRules(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, String, UInteger, Integer, ULong, Integer, ULong, UByte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
