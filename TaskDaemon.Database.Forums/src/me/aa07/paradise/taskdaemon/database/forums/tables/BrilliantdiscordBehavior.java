/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.BrilliantdiscordBehaviorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BrilliantdiscordBehavior extends TableImpl<BrilliantdiscordBehaviorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.brilliantdiscord_behavior</code>
     */
    public static final BrilliantdiscordBehavior BRILLIANTDISCORD_BEHAVIOR = new BrilliantdiscordBehavior();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrilliantdiscordBehaviorRecord> getRecordType() {
        return BrilliantdiscordBehaviorRecord.class;
    }

    /**
     * The column <code>paradise_forums.brilliantdiscord_behavior.id</code>. ID
     * Number
     */
    public final TableField<BrilliantdiscordBehaviorRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.brilliantdiscord_behavior.key</code>.
     * Setting key
     */
    public final TableField<BrilliantdiscordBehaviorRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "Setting key");

    /**
     * The column <code>paradise_forums.brilliantdiscord_behavior.value</code>.
     */
    public final TableField<BrilliantdiscordBehaviorRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>paradise_forums.brilliantdiscord_behavior.default</code>.
     */
    public final TableField<BrilliantdiscordBehaviorRecord, String> DEFAULT = createField(DSL.name("default"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private BrilliantdiscordBehavior(Name alias, Table<BrilliantdiscordBehaviorRecord> aliased) {
        this(alias, aliased, null);
    }

    private BrilliantdiscordBehavior(Name alias, Table<BrilliantdiscordBehaviorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_behavior</code>
     * table reference
     */
    public BrilliantdiscordBehavior(String alias) {
        this(DSL.name(alias), BRILLIANTDISCORD_BEHAVIOR);
    }

    /**
     * Create an aliased <code>paradise_forums.brilliantdiscord_behavior</code>
     * table reference
     */
    public BrilliantdiscordBehavior(Name alias) {
        this(alias, BRILLIANTDISCORD_BEHAVIOR);
    }

    /**
     * Create a <code>paradise_forums.brilliantdiscord_behavior</code> table
     * reference
     */
    public BrilliantdiscordBehavior() {
        this(DSL.name("brilliantdiscord_behavior"), null);
    }

    public <O extends Record> BrilliantdiscordBehavior(Table<O> child, ForeignKey<O, BrilliantdiscordBehaviorRecord> key) {
        super(child, key, BRILLIANTDISCORD_BEHAVIOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<BrilliantdiscordBehaviorRecord, ULong> getIdentity() {
        return (Identity<BrilliantdiscordBehaviorRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<BrilliantdiscordBehaviorRecord> getPrimaryKey() {
        return Keys.KEY_BRILLIANTDISCORD_BEHAVIOR_PRIMARY;
    }

    @Override
    public List<UniqueKey<BrilliantdiscordBehaviorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BRILLIANTDISCORD_BEHAVIOR_KEY);
    }

    @Override
    public BrilliantdiscordBehavior as(String alias) {
        return new BrilliantdiscordBehavior(DSL.name(alias), this);
    }

    @Override
    public BrilliantdiscordBehavior as(Name alias) {
        return new BrilliantdiscordBehavior(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordBehavior rename(String name) {
        return new BrilliantdiscordBehavior(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BrilliantdiscordBehavior rename(Name name) {
        return new BrilliantdiscordBehavior(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
