/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreTasksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * Stores information about tasks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTasks extends TableImpl<CoreTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_tasks</code>
     */
    public static final CoreTasks CORE_TASKS = new CoreTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreTasksRecord> getRecordType() {
        return CoreTasksRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_tasks.id</code>. ID Number
     */
    public final TableField<CoreTasksRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_tasks.app</code>. The application
     * key which owns the task.
     */
    public final TableField<CoreTasksRecord, String> APP = createField(DSL.name("app"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The application key which owns the task.");

    /**
     * The column <code>paradise_forums.core_tasks.key</code>. The task key.
     */
    public final TableField<CoreTasksRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "The task key.");

    /**
     * The column <code>paradise_forums.core_tasks.frequency</code>.
     * DateInterval specification for the frequency the task runs.
     */
    public final TableField<CoreTasksRecord, String> FREQUENCY = createField(DSL.name("frequency"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "DateInterval specification for the frequency the task runs.");

    /**
     * The column <code>paradise_forums.core_tasks.next_run</code>. Unix
     * timestamp of next time task should be ran.
     */
    public final TableField<CoreTasksRecord, ULong> NEXT_RUN = createField(DSL.name("next_run"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "Unix timestamp of next time task should be ran.");

    /**
     * The column <code>paradise_forums.core_tasks.running</code>. Indicates if
     * task is currently running (to prevent duplicate runs).
     */
    public final TableField<CoreTasksRecord, Boolean> RUNNING = createField(DSL.name("running"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "Indicates if task is currently running (to prevent duplicate runs).");

    /**
     * The column <code>paradise_forums.core_tasks.enabled</code>. Some tasks
     * may set this automatically when they do/don't have things to do.
     */
    public final TableField<CoreTasksRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "Some tasks may set this automatically when they do/don't have things to do.");

    /**
     * The column <code>paradise_forums.core_tasks.plugin</code>. The plugin ID
     * number which owns the task.
     */
    public final TableField<CoreTasksRecord, Long> PLUGIN = createField(DSL.name("plugin"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "The plugin ID number which owns the task.");

    /**
     * The column <code>paradise_forums.core_tasks.lock_count</code>. How many
     * times the task has been in a locked state without a successful run. A
     * count of 3 will trigger a dashboard warning.
     */
    public final TableField<CoreTasksRecord, UByte> LOCK_COUNT = createField(DSL.name("lock_count"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "How many times the task has been in a locked state without a successful run. A count of 3 will trigger a dashboard warning.");

    /**
     * The column <code>paradise_forums.core_tasks.last_run</code>. The
     * timestamp the task was last run, 0 if never.
     */
    public final TableField<CoreTasksRecord, ULong> LAST_RUN = createField(DSL.name("last_run"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "The timestamp the task was last run, 0 if never.");

    private CoreTasks(Name alias, Table<CoreTasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreTasks(Name alias, Table<CoreTasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stores information about tasks"), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_tasks</code> table reference
     */
    public CoreTasks(String alias) {
        this(DSL.name(alias), CORE_TASKS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_tasks</code> table reference
     */
    public CoreTasks(Name alias) {
        this(alias, CORE_TASKS);
    }

    /**
     * Create a <code>paradise_forums.core_tasks</code> table reference
     */
    public CoreTasks() {
        this(DSL.name("core_tasks"), null);
    }

    public <O extends Record> CoreTasks(Table<O> child, ForeignKey<O, CoreTasksRecord> key) {
        super(child, key, CORE_TASKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_TASKS_APP, Indexes.CORE_TASKS_LOCK_COUNT, Indexes.CORE_TASKS_NEXT_RUN);
    }

    @Override
    public Identity<CoreTasksRecord, ULong> getIdentity() {
        return (Identity<CoreTasksRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreTasksRecord> getPrimaryKey() {
        return Keys.KEY_CORE_TASKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreTasksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_TASKS_KEY);
    }

    @Override
    public CoreTasks as(String alias) {
        return new CoreTasks(DSL.name(alias), this);
    }

    @Override
    public CoreTasks as(Name alias) {
        return new CoreTasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTasks rename(String name) {
        return new CoreTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTasks rename(Name name) {
        return new CoreTasks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, String, ULong, Boolean, Boolean, Long, UByte, ULong> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
