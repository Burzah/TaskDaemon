/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreClubsFieldvaluesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreClubsFieldvalues extends TableImpl<CoreClubsFieldvaluesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_clubs_fieldvalues</code>
     */
    public static final CoreClubsFieldvalues CORE_CLUBS_FIELDVALUES = new CoreClubsFieldvalues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreClubsFieldvaluesRecord> getRecordType() {
        return CoreClubsFieldvaluesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_clubs_fieldvalues.club_id</code>.
     * Club ID Number
     */
    public final TableField<CoreClubsFieldvaluesRecord, ULong> CLUB_ID = createField(DSL.name("club_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Club ID Number");

    private CoreClubsFieldvalues(Name alias, Table<CoreClubsFieldvaluesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreClubsFieldvalues(Name alias, Table<CoreClubsFieldvaluesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_fieldvalues</code>
     * table reference
     */
    public CoreClubsFieldvalues(String alias) {
        this(DSL.name(alias), CORE_CLUBS_FIELDVALUES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_clubs_fieldvalues</code>
     * table reference
     */
    public CoreClubsFieldvalues(Name alias) {
        this(alias, CORE_CLUBS_FIELDVALUES);
    }

    /**
     * Create a <code>paradise_forums.core_clubs_fieldvalues</code> table
     * reference
     */
    public CoreClubsFieldvalues() {
        this(DSL.name("core_clubs_fieldvalues"), null);
    }

    public <O extends Record> CoreClubsFieldvalues(Table<O> child, ForeignKey<O, CoreClubsFieldvaluesRecord> key) {
        super(child, key, CORE_CLUBS_FIELDVALUES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreClubsFieldvaluesRecord, ULong> getIdentity() {
        return (Identity<CoreClubsFieldvaluesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreClubsFieldvaluesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_CLUBS_FIELDVALUES_PRIMARY;
    }

    @Override
    public CoreClubsFieldvalues as(String alias) {
        return new CoreClubsFieldvalues(DSL.name(alias), this);
    }

    @Override
    public CoreClubsFieldvalues as(Name alias) {
        return new CoreClubsFieldvalues(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsFieldvalues rename(String name) {
        return new CoreClubsFieldvalues(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreClubsFieldvalues rename(Name name) {
        return new CoreClubsFieldvalues(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<ULong> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
