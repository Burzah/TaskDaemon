/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.ForumsArchiveRulesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForumsArchiveRules extends TableImpl<ForumsArchiveRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.forums_archive_rules</code>
     */
    public static final ForumsArchiveRules FORUMS_ARCHIVE_RULES = new ForumsArchiveRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForumsArchiveRulesRecord> getRecordType() {
        return ForumsArchiveRulesRecord.class;
    }

    /**
     * The column <code>paradise_forums.forums_archive_rules.archive_key</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_KEY = createField(DSL.name("archive_key"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>paradise_forums.forums_archive_rules.archive_app</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_APP = createField(DSL.name("archive_app"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("'core'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.forums_archive_rules.archive_field</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_FIELD = createField(DSL.name("archive_field"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.forums_archive_rules.archive_value</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_VALUE = createField(DSL.name("archive_value"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.forums_archive_rules.archive_text</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_TEXT = createField(DSL.name("archive_text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>paradise_forums.forums_archive_rules.archive_unit</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, String> ARCHIVE_UNIT = createField(DSL.name("archive_unit"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>paradise_forums.forums_archive_rules.archive_skip</code>.
     */
    public final TableField<ForumsArchiveRulesRecord, Integer> ARCHIVE_SKIP = createField(DSL.name("archive_skip"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private ForumsArchiveRules(Name alias, Table<ForumsArchiveRulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForumsArchiveRules(Name alias, Table<ForumsArchiveRulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.forums_archive_rules</code> table
     * reference
     */
    public ForumsArchiveRules(String alias) {
        this(DSL.name(alias), FORUMS_ARCHIVE_RULES);
    }

    /**
     * Create an aliased <code>paradise_forums.forums_archive_rules</code> table
     * reference
     */
    public ForumsArchiveRules(Name alias) {
        this(alias, FORUMS_ARCHIVE_RULES);
    }

    /**
     * Create a <code>paradise_forums.forums_archive_rules</code> table
     * reference
     */
    public ForumsArchiveRules() {
        this(DSL.name("forums_archive_rules"), null);
    }

    public <O extends Record> ForumsArchiveRules(Table<O> child, ForeignKey<O, ForumsArchiveRulesRecord> key) {
        super(child, key, FORUMS_ARCHIVE_RULES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public UniqueKey<ForumsArchiveRulesRecord> getPrimaryKey() {
        return Keys.KEY_FORUMS_ARCHIVE_RULES_PRIMARY;
    }

    @Override
    public ForumsArchiveRules as(String alias) {
        return new ForumsArchiveRules(DSL.name(alias), this);
    }

    @Override
    public ForumsArchiveRules as(Name alias) {
        return new ForumsArchiveRules(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForumsArchiveRules rename(String name) {
        return new ForumsArchiveRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForumsArchiveRules rename(Name name) {
        return new ForumsArchiveRules(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
