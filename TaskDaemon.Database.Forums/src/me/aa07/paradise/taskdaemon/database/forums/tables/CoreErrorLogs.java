/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreErrorLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreErrorLogs extends TableImpl<CoreErrorLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_error_logs</code>
     */
    public static final CoreErrorLogs CORE_ERROR_LOGS = new CoreErrorLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreErrorLogsRecord> getRecordType() {
        return CoreErrorLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_error_logs.log_id</code>.
     */
    public final TableField<CoreErrorLogsRecord, Integer> LOG_ID = createField(DSL.name("log_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_member</code>.
     */
    public final TableField<CoreErrorLogsRecord, ULong> LOG_MEMBER = createField(DSL.name("log_member"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_date</code>.
     */
    public final TableField<CoreErrorLogsRecord, Integer> LOG_DATE = createField(DSL.name("log_date"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_error</code>.
     */
    public final TableField<CoreErrorLogsRecord, String> LOG_ERROR = createField(DSL.name("log_error"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_error_code</code>.
     */
    public final TableField<CoreErrorLogsRecord, String> LOG_ERROR_CODE = createField(DSL.name("log_error_code"), SQLDataType.VARCHAR(24).nullable(false).defaultValue(DSL.inline("'0'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_ip_address</code>.
     */
    public final TableField<CoreErrorLogsRecord, String> LOG_IP_ADDRESS = createField(DSL.name("log_ip_address"), SQLDataType.VARCHAR(46).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_error_logs.log_request_uri</code>.
     */
    public final TableField<CoreErrorLogsRecord, String> LOG_REQUEST_URI = createField(DSL.name("log_request_uri"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private CoreErrorLogs(Name alias, Table<CoreErrorLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreErrorLogs(Name alias, Table<CoreErrorLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_error_logs</code> table
     * reference
     */
    public CoreErrorLogs(String alias) {
        this(DSL.name(alias), CORE_ERROR_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_error_logs</code> table
     * reference
     */
    public CoreErrorLogs(Name alias) {
        this(alias, CORE_ERROR_LOGS);
    }

    /**
     * Create a <code>paradise_forums.core_error_logs</code> table reference
     */
    public CoreErrorLogs() {
        this(DSL.name("core_error_logs"), null);
    }

    public <O extends Record> CoreErrorLogs(Table<O> child, ForeignKey<O, CoreErrorLogsRecord> key) {
        super(child, key, CORE_ERROR_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_ERROR_LOGS_LOG_DATE, Indexes.CORE_ERROR_LOGS_LOG_IP_ADDRESS, Indexes.CORE_ERROR_LOGS_MEMBER);
    }

    @Override
    public Identity<CoreErrorLogsRecord, Integer> getIdentity() {
        return (Identity<CoreErrorLogsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreErrorLogsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_ERROR_LOGS_PRIMARY;
    }

    @Override
    public CoreErrorLogs as(String alias) {
        return new CoreErrorLogs(DSL.name(alias), this);
    }

    @Override
    public CoreErrorLogs as(Name alias) {
        return new CoreErrorLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreErrorLogs rename(String name) {
        return new CoreErrorLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreErrorLogs rename(Name name) {
        return new CoreErrorLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, ULong, Integer, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
