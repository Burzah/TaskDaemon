/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreAcpTabOrderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreAcpTabOrder extends TableImpl<CoreAcpTabOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_acp_tab_order</code>
     */
    public static final CoreAcpTabOrder CORE_ACP_TAB_ORDER = new CoreAcpTabOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreAcpTabOrderRecord> getRecordType() {
        return CoreAcpTabOrderRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_acp_tab_order.id</code>. ID Number
     */
    public final TableField<CoreAcpTabOrderRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_acp_tab_order.data</code>.
     */
    public final TableField<CoreAcpTabOrderRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private CoreAcpTabOrder(Name alias, Table<CoreAcpTabOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreAcpTabOrder(Name alias, Table<CoreAcpTabOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_tab_order</code> table
     * reference
     */
    public CoreAcpTabOrder(String alias) {
        this(DSL.name(alias), CORE_ACP_TAB_ORDER);
    }

    /**
     * Create an aliased <code>paradise_forums.core_acp_tab_order</code> table
     * reference
     */
    public CoreAcpTabOrder(Name alias) {
        this(alias, CORE_ACP_TAB_ORDER);
    }

    /**
     * Create a <code>paradise_forums.core_acp_tab_order</code> table reference
     */
    public CoreAcpTabOrder() {
        this(DSL.name("core_acp_tab_order"), null);
    }

    public <O extends Record> CoreAcpTabOrder(Table<O> child, ForeignKey<O, CoreAcpTabOrderRecord> key) {
        super(child, key, CORE_ACP_TAB_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<UniqueKey<CoreAcpTabOrderRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_ACP_TAB_ORDER_MEMBER_ID);
    }

    @Override
    public CoreAcpTabOrder as(String alias) {
        return new CoreAcpTabOrder(DSL.name(alias), this);
    }

    @Override
    public CoreAcpTabOrder as(Name alias) {
        return new CoreAcpTabOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpTabOrder rename(String name) {
        return new CoreAcpTabOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreAcpTabOrder rename(Name name) {
        return new CoreAcpTabOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
