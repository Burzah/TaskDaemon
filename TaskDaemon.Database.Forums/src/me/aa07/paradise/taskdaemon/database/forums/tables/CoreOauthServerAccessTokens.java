/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthServerAccessTokensStatus;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreOauthServerAccessTokensRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreOauthServerAccessTokens extends TableImpl<CoreOauthServerAccessTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_oauth_server_access_tokens</code>
     */
    public static final CoreOauthServerAccessTokens CORE_OAUTH_SERVER_ACCESS_TOKENS = new CoreOauthServerAccessTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreOauthServerAccessTokensRecord> getRecordType() {
        return CoreOauthServerAccessTokensRecord.class;
    }

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.client_id</code>.
     * The client ID
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.CHAR(32).nullable(false), this, "The client ID");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token</code>.
     * The access token
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.CHAR(64).nullable(false), this, "The access token");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.access_token_expires</code>.
     * Unix timestamp of when access token expires, or NULL for never
     */
    public final TableField<CoreOauthServerAccessTokensRecord, UInteger> ACCESS_TOKEN_EXPIRES = createField(DSL.name("access_token_expires"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when access token expires, or NULL for never");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token</code>.
     * Refresh token or NULL if not applicable
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), SQLDataType.CHAR(64).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "Refresh token or NULL if not applicable");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.refresh_token_expires</code>.
     * Unix timestamp of when refresh token expires or NULL if never - will be
     * same value as access_token_expires if not applicable
     */
    public final TableField<CoreOauthServerAccessTokensRecord, UInteger> REFRESH_TOKEN_EXPIRES = createField(DSL.name("refresh_token_expires"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.INTEGERUNSIGNED)), this, "Unix timestamp of when refresh token expires or NULL if never - will be same value as access_token_expires if not applicable");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.member_id</code>.
     * The member ID or NULL for client_credentials
     */
    public final TableField<CoreOauthServerAccessTokensRecord, ULong> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The member ID or NULL for client_credentials");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.scope</code>.
     * JSON-encoded array of scopes or NULL if no scope was requested
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "JSON-encoded array of scopes or NULL if no scope was requested");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.authorization_code</code>.
     * The authorization code that generated the access token, if applicable
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> AUTHORIZATION_CODE = createField(DSL.name("authorization_code"), SQLDataType.CHAR(64).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The authorization code that generated the access token, if applicable");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.issued</code>. Unix
     * timestamp of when access token was generated
     */
    public final TableField<CoreOauthServerAccessTokensRecord, UInteger> ISSUED = createField(DSL.name("issued"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Unix timestamp of when access token was generated");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.auth_user_agent</code>.
     * The user agent that the user performed authentication on, if known
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> AUTH_USER_AGENT = createField(DSL.name("auth_user_agent"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The user agent that the user performed authentication on, if known");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.issue_user_agent</code>.
     * The user agent that the access token was issued to, if known
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> ISSUE_USER_AGENT = createField(DSL.name("issue_user_agent"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The user agent that the access token was issued to, if known");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.device_key</code>.
     * The device key of the device used to obtain this access token, if known
     */
    public final TableField<CoreOauthServerAccessTokensRecord, String> DEVICE_KEY = createField(DSL.name("device_key"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The device key of the device used to obtain this access token, if known");

    /**
     * The column
     * <code>paradise_forums.core_oauth_server_access_tokens.status</code>. The
     * status. "active" means "active if within expiry date".
     */
    public final TableField<CoreOauthServerAccessTokensRecord, CoreOauthServerAccessTokensStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("'active'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreOauthServerAccessTokensStatus.class), this, "The status. \"active\" means \"active if within expiry date\".");

    private CoreOauthServerAccessTokens(Name alias, Table<CoreOauthServerAccessTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreOauthServerAccessTokens(Name alias, Table<CoreOauthServerAccessTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_server_access_tokens</code> table
     * reference
     */
    public CoreOauthServerAccessTokens(String alias) {
        this(DSL.name(alias), CORE_OAUTH_SERVER_ACCESS_TOKENS);
    }

    /**
     * Create an aliased
     * <code>paradise_forums.core_oauth_server_access_tokens</code> table
     * reference
     */
    public CoreOauthServerAccessTokens(Name alias) {
        this(alias, CORE_OAUTH_SERVER_ACCESS_TOKENS);
    }

    /**
     * Create a <code>paradise_forums.core_oauth_server_access_tokens</code>
     * table reference
     */
    public CoreOauthServerAccessTokens() {
        this(DSL.name("core_oauth_server_access_tokens"), null);
    }

    public <O extends Record> CoreOauthServerAccessTokens(Table<O> child, ForeignKey<O, CoreOauthServerAccessTokensRecord> key) {
        super(child, key, CORE_OAUTH_SERVER_ACCESS_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_OAUTH_SERVER_ACCESS_TOKENS_AUTHORIZATION_CODE_LOOKUP, Indexes.CORE_OAUTH_SERVER_ACCESS_TOKENS_DEVICE_LOOKUP, Indexes.CORE_OAUTH_SERVER_ACCESS_TOKENS_MEMBER_ID, Indexes.CORE_OAUTH_SERVER_ACCESS_TOKENS_MEMBER_LOOKUP, Indexes.CORE_OAUTH_SERVER_ACCESS_TOKENS_REFRESH_TOKEN_EXPIRES);
    }

    @Override
    public List<UniqueKey<CoreOauthServerAccessTokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_OAUTH_SERVER_ACCESS_TOKENS_ACCESS_LOOKUP, Keys.KEY_CORE_OAUTH_SERVER_ACCESS_TOKENS_REFRESH_LOOKUP);
    }

    @Override
    public CoreOauthServerAccessTokens as(String alias) {
        return new CoreOauthServerAccessTokens(DSL.name(alias), this);
    }

    @Override
    public CoreOauthServerAccessTokens as(Name alias) {
        return new CoreOauthServerAccessTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthServerAccessTokens rename(String name) {
        return new CoreOauthServerAccessTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreOauthServerAccessTokens rename(Name name) {
        return new CoreOauthServerAccessTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, UInteger, String, UInteger, ULong, String, String, UInteger, String, String, String, CoreOauthServerAccessTokensStatus> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
