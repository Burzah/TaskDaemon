/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CoreTagsCache;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTagsCacheRecord extends TableRecordImpl<CoreTagsCacheRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_tags_cache.tag_cache_key</code>.
     */
    public void setTagCacheKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tags_cache.tag_cache_key</code>.
     */
    public String getTagCacheKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_tags_cache.tag_cache_text</code>.
     */
    public void setTagCacheText(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tags_cache.tag_cache_text</code>.
     */
    public String getTagCacheText() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_tags_cache.tag_cache_date</code>.
     */
    public void setTagCacheDate(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_tags_cache.tag_cache_date</code>.
     */
    public Integer getTagCacheDate() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CoreTagsCache.CORE_TAGS_CACHE.TAG_CACHE_KEY;
    }

    @Override
    public Field<String> field2() {
        return CoreTagsCache.CORE_TAGS_CACHE.TAG_CACHE_TEXT;
    }

    @Override
    public Field<Integer> field3() {
        return CoreTagsCache.CORE_TAGS_CACHE.TAG_CACHE_DATE;
    }

    @Override
    public String component1() {
        return getTagCacheKey();
    }

    @Override
    public String component2() {
        return getTagCacheText();
    }

    @Override
    public Integer component3() {
        return getTagCacheDate();
    }

    @Override
    public String value1() {
        return getTagCacheKey();
    }

    @Override
    public String value2() {
        return getTagCacheText();
    }

    @Override
    public Integer value3() {
        return getTagCacheDate();
    }

    @Override
    public CoreTagsCacheRecord value1(String value) {
        setTagCacheKey(value);
        return this;
    }

    @Override
    public CoreTagsCacheRecord value2(String value) {
        setTagCacheText(value);
        return this;
    }

    @Override
    public CoreTagsCacheRecord value3(Integer value) {
        setTagCacheDate(value);
        return this;
    }

    @Override
    public CoreTagsCacheRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreTagsCacheRecord
     */
    public CoreTagsCacheRecord() {
        super(CoreTagsCache.CORE_TAGS_CACHE);
    }

    /**
     * Create a detached, initialised CoreTagsCacheRecord
     */
    public CoreTagsCacheRecord(String tagCacheKey, String tagCacheText, Integer tagCacheDate) {
        super(CoreTagsCache.CORE_TAGS_CACHE);

        setTagCacheKey(tagCacheKey);
        setTagCacheText(tagCacheText);
        setTagCacheDate(tagCacheDate);
    }
}
