/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreCacheRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreCache extends TableImpl<CoreCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_cache</code>
     */
    public static final CoreCache CORE_CACHE = new CoreCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreCacheRecord> getRecordType() {
        return CoreCacheRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_cache.cache_key</code>. The key
     */
    public final TableField<CoreCacheRecord, String> CACHE_KEY = createField(DSL.name("cache_key"), SQLDataType.VARCHAR(100).nullable(false), this, "The key");

    /**
     * The column <code>paradise_forums.core_cache.cache_value</code>. The value
     */
    public final TableField<CoreCacheRecord, String> CACHE_VALUE = createField(DSL.name("cache_value"), SQLDataType.CLOB.nullable(false), this, "The value");

    /**
     * The column <code>paradise_forums.core_cache.cache_expire</code>. Unix
     * timestamp of when the cache expires
     */
    public final TableField<CoreCacheRecord, Integer> CACHE_EXPIRE = createField(DSL.name("cache_expire"), SQLDataType.INTEGER.nullable(false), this, "Unix timestamp of when the cache expires");

    private CoreCache(Name alias, Table<CoreCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreCache(Name alias, Table<CoreCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_cache</code> table reference
     */
    public CoreCache(String alias) {
        this(DSL.name(alias), CORE_CACHE);
    }

    /**
     * Create an aliased <code>paradise_forums.core_cache</code> table reference
     */
    public CoreCache(Name alias) {
        this(alias, CORE_CACHE);
    }

    /**
     * Create a <code>paradise_forums.core_cache</code> table reference
     */
    public CoreCache() {
        this(DSL.name("core_cache"), null);
    }

    public <O extends Record> CoreCache(Table<O> child, ForeignKey<O, CoreCacheRecord> key) {
        super(child, key, CORE_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_CACHE_CACHE_EXPIRE, Indexes.CORE_CACHE_KEYEXPIRE);
    }

    @Override
    public List<UniqueKey<CoreCacheRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_CACHE_CACHE_KEY);
    }

    @Override
    public CoreCache as(String alias) {
        return new CoreCache(DSL.name(alias), this);
    }

    @Override
    public CoreCache as(Name alias) {
        return new CoreCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCache rename(String name) {
        return new CoreCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreCache rename(Name name) {
        return new CoreCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
