/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreBadgesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreBadges extends TableImpl<CoreBadgesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_badges</code>
     */
    public static final CoreBadges CORE_BADGES = new CoreBadges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreBadgesRecord> getRecordType() {
        return CoreBadgesRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_badges.id</code>. ID Number
     */
    public final TableField<CoreBadgesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_badges.image</code>.
     */
    public final TableField<CoreBadgesRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>paradise_forums.core_badges.manually_awarded</code>. Can
     * this badge be manually awarded?
     */
    public final TableField<CoreBadgesRecord, UByte> MANUALLY_AWARDED = createField(DSL.name("manually_awarded"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Can this badge be manually awarded?");

    private CoreBadges(Name alias, Table<CoreBadgesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreBadges(Name alias, Table<CoreBadgesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_badges</code> table
     * reference
     */
    public CoreBadges(String alias) {
        this(DSL.name(alias), CORE_BADGES);
    }

    /**
     * Create an aliased <code>paradise_forums.core_badges</code> table
     * reference
     */
    public CoreBadges(Name alias) {
        this(alias, CORE_BADGES);
    }

    /**
     * Create a <code>paradise_forums.core_badges</code> table reference
     */
    public CoreBadges() {
        this(DSL.name("core_badges"), null);
    }

    public <O extends Record> CoreBadges(Table<O> child, ForeignKey<O, CoreBadgesRecord> key) {
        super(child, key, CORE_BADGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public Identity<CoreBadgesRecord, ULong> getIdentity() {
        return (Identity<CoreBadgesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreBadgesRecord> getPrimaryKey() {
        return Keys.KEY_CORE_BADGES_PRIMARY;
    }

    @Override
    public CoreBadges as(String alias) {
        return new CoreBadges(DSL.name(alias), this);
    }

    @Override
    public CoreBadges as(Name alias) {
        return new CoreBadges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreBadges rename(String name) {
        return new CoreBadges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreBadges rename(Name name) {
        return new CoreBadges(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, String, UByte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
