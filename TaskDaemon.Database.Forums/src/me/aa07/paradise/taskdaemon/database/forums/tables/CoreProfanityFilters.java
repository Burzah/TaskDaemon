/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreProfanityFiltersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreProfanityFilters extends TableImpl<CoreProfanityFiltersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_forums.core_profanity_filters</code>
     */
    public static final CoreProfanityFilters CORE_PROFANITY_FILTERS = new CoreProfanityFilters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreProfanityFiltersRecord> getRecordType() {
        return CoreProfanityFiltersRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_profanity_filters.wid</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, Integer> WID = createField(DSL.name("wid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_forums.core_profanity_filters.type</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.inline("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_profanity_filters.swop</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, String> SWOP = createField(DSL.name("swop"), SQLDataType.VARCHAR(250).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_profanity_filters.m_exact</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, Byte> M_EXACT = createField(DSL.name("m_exact"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_profanity_filters.action</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(19).nullable(false).defaultValue(DSL.inline("'swap'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>paradise_forums.core_profanity_filters.min_posts</code>.
     */
    public final TableField<CoreProfanityFiltersRecord, UShort> MIN_POSTS = createField(DSL.name("min_posts"), SQLDataType.SMALLINTUNSIGNED.defaultValue(DSL.inline("0", SQLDataType.SMALLINTUNSIGNED)), this, "");

    private CoreProfanityFilters(Name alias, Table<CoreProfanityFiltersRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreProfanityFilters(Name alias, Table<CoreProfanityFiltersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_profanity_filters</code>
     * table reference
     */
    public CoreProfanityFilters(String alias) {
        this(DSL.name(alias), CORE_PROFANITY_FILTERS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_profanity_filters</code>
     * table reference
     */
    public CoreProfanityFilters(Name alias) {
        this(alias, CORE_PROFANITY_FILTERS);
    }

    /**
     * Create a <code>paradise_forums.core_profanity_filters</code> table
     * reference
     */
    public CoreProfanityFilters() {
        this(DSL.name("core_profanity_filters"), null);
    }

    public <O extends Record> CoreProfanityFilters(Table<O> child, ForeignKey<O, CoreProfanityFiltersRecord> key) {
        super(child, key, CORE_PROFANITY_FILTERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_PROFANITY_FILTERS_M_EXACT);
    }

    @Override
    public Identity<CoreProfanityFiltersRecord, Integer> getIdentity() {
        return (Identity<CoreProfanityFiltersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreProfanityFiltersRecord> getPrimaryKey() {
        return Keys.KEY_CORE_PROFANITY_FILTERS_PRIMARY;
    }

    @Override
    public CoreProfanityFilters as(String alias) {
        return new CoreProfanityFilters(DSL.name(alias), this);
    }

    @Override
    public CoreProfanityFilters as(Name alias) {
        return new CoreProfanityFilters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreProfanityFilters rename(String name) {
        return new CoreProfanityFilters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreProfanityFilters rename(Name name) {
        return new CoreProfanityFilters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Byte, String, UShort> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
