/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables.records;


import me.aa07.paradise.taskdaemon.database.forums.tables.CorePlugins;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorePluginsRecord extends UpdatableRecordImpl<CorePluginsRecord> implements Record14<ULong, String, String, String, String, String, UInteger, String, Integer, String, Byte, ULong, String, UByte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_id</code>. ID Number
     */
    public void setPluginId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_id</code>. ID Number
     */
    public ULong getPluginId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_name</code>. Name
     */
    public void setPluginName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_name</code>. Name
     */
    public String getPluginName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_update_check</code>.
     * URL to check for updates
     */
    public void setPluginUpdateCheck(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_update_check</code>.
     * URL to check for updates
     */
    public String getPluginUpdateCheck() {
        return (String) get(2);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_author</code>.
     * Author name
     */
    public void setPluginAuthor(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_author</code>.
     * Author name
     */
    public String getPluginAuthor() {
        return (String) get(3);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_website</code>.
     * Author website URL
     */
    public void setPluginWebsite(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_website</code>.
     * Author website URL
     */
    public String getPluginWebsite() {
        return (String) get(4);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_location</code>.
     * Folder name for IN_DEV mode
     */
    public void setPluginLocation(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_location</code>.
     * Folder name for IN_DEV mode
     */
    public String getPluginLocation() {
        return (String) get(5);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_version_long</code>.
     * Currently installed version (system)
     */
    public void setPluginVersionLong(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_version_long</code>.
     * Currently installed version (system)
     */
    public UInteger getPluginVersionLong() {
        return (UInteger) get(6);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_plugins.plugin_version_human</code>. Currently
     * installed version (human-readable)
     */
    public void setPluginVersionHuman(String value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_plugins.plugin_version_human</code>. Currently
     * installed version (human-readable)
     */
    public String getPluginVersionHuman() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_plugins.plugin_update_check_last</code>. Unix
     * timestamp that the plugin was last checked for updates
     */
    public void setPluginUpdateCheckLast(Integer value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_plugins.plugin_update_check_last</code>. Unix
     * timestamp that the plugin was last checked for updates
     */
    public Integer getPluginUpdateCheckLast() {
        return (Integer) get(8);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_plugins.plugin_update_check_data</code>. JSON
     * data returned in last update check
     */
    public void setPluginUpdateCheckData(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_plugins.plugin_update_check_data</code>. JSON
     * data returned in last update check
     */
    public String getPluginUpdateCheckData() {
        return (String) get(9);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_enabled</code>.
     * Plugin is enabled?
     */
    public void setPluginEnabled(Byte value) {
        set(10, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_enabled</code>.
     * Plugin is enabled?
     */
    public Byte getPluginEnabled() {
        return (Byte) get(10);
    }

    /**
     * Setter for <code>paradise_forums.core_plugins.plugin_order</code>. The
     * order plugins are executed
     */
    public void setPluginOrder(ULong value) {
        set(11, value);
    }

    /**
     * Getter for <code>paradise_forums.core_plugins.plugin_order</code>. The
     * order plugins are executed
     */
    public ULong getPluginOrder() {
        return (ULong) get(11);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_plugins.plugin_diagnostic_url</code>. The URL
     * to send diagnostic reports to.
     */
    public void setPluginDiagnosticUrl(String value) {
        set(12, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_plugins.plugin_diagnostic_url</code>. The URL
     * to send diagnostic reports to.
     */
    public String getPluginDiagnosticUrl() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>paradise_forums.core_plugins.plugin_requires_manual_intervention</code>.
     * If this is 1, do not enable plugin. it likely contains code that will
     * cause fatal errors in php8, which needs to be addressed by the author
     */
    public void setPluginRequiresManualIntervention(UByte value) {
        set(13, value);
    }

    /**
     * Getter for
     * <code>paradise_forums.core_plugins.plugin_requires_manual_intervention</code>.
     * If this is 1, do not enable plugin. it likely contains code that will
     * cause fatal errors in php8, which needs to be addressed by the author
     */
    public UByte getPluginRequiresManualIntervention() {
        return (UByte) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<ULong, String, String, String, String, String, UInteger, String, Integer, String, Byte, ULong, String, UByte> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<ULong, String, String, String, String, String, UInteger, String, Integer, String, Byte, ULong, String, UByte> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_ID;
    }

    @Override
    public Field<String> field2() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_NAME;
    }

    @Override
    public Field<String> field3() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_UPDATE_CHECK;
    }

    @Override
    public Field<String> field4() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_AUTHOR;
    }

    @Override
    public Field<String> field5() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_WEBSITE;
    }

    @Override
    public Field<String> field6() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_LOCATION;
    }

    @Override
    public Field<UInteger> field7() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_VERSION_LONG;
    }

    @Override
    public Field<String> field8() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_VERSION_HUMAN;
    }

    @Override
    public Field<Integer> field9() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_UPDATE_CHECK_LAST;
    }

    @Override
    public Field<String> field10() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_UPDATE_CHECK_DATA;
    }

    @Override
    public Field<Byte> field11() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_ENABLED;
    }

    @Override
    public Field<ULong> field12() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_ORDER;
    }

    @Override
    public Field<String> field13() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_DIAGNOSTIC_URL;
    }

    @Override
    public Field<UByte> field14() {
        return CorePlugins.CORE_PLUGINS.PLUGIN_REQUIRES_MANUAL_INTERVENTION;
    }

    @Override
    public ULong component1() {
        return getPluginId();
    }

    @Override
    public String component2() {
        return getPluginName();
    }

    @Override
    public String component3() {
        return getPluginUpdateCheck();
    }

    @Override
    public String component4() {
        return getPluginAuthor();
    }

    @Override
    public String component5() {
        return getPluginWebsite();
    }

    @Override
    public String component6() {
        return getPluginLocation();
    }

    @Override
    public UInteger component7() {
        return getPluginVersionLong();
    }

    @Override
    public String component8() {
        return getPluginVersionHuman();
    }

    @Override
    public Integer component9() {
        return getPluginUpdateCheckLast();
    }

    @Override
    public String component10() {
        return getPluginUpdateCheckData();
    }

    @Override
    public Byte component11() {
        return getPluginEnabled();
    }

    @Override
    public ULong component12() {
        return getPluginOrder();
    }

    @Override
    public String component13() {
        return getPluginDiagnosticUrl();
    }

    @Override
    public UByte component14() {
        return getPluginRequiresManualIntervention();
    }

    @Override
    public ULong value1() {
        return getPluginId();
    }

    @Override
    public String value2() {
        return getPluginName();
    }

    @Override
    public String value3() {
        return getPluginUpdateCheck();
    }

    @Override
    public String value4() {
        return getPluginAuthor();
    }

    @Override
    public String value5() {
        return getPluginWebsite();
    }

    @Override
    public String value6() {
        return getPluginLocation();
    }

    @Override
    public UInteger value7() {
        return getPluginVersionLong();
    }

    @Override
    public String value8() {
        return getPluginVersionHuman();
    }

    @Override
    public Integer value9() {
        return getPluginUpdateCheckLast();
    }

    @Override
    public String value10() {
        return getPluginUpdateCheckData();
    }

    @Override
    public Byte value11() {
        return getPluginEnabled();
    }

    @Override
    public ULong value12() {
        return getPluginOrder();
    }

    @Override
    public String value13() {
        return getPluginDiagnosticUrl();
    }

    @Override
    public UByte value14() {
        return getPluginRequiresManualIntervention();
    }

    @Override
    public CorePluginsRecord value1(ULong value) {
        setPluginId(value);
        return this;
    }

    @Override
    public CorePluginsRecord value2(String value) {
        setPluginName(value);
        return this;
    }

    @Override
    public CorePluginsRecord value3(String value) {
        setPluginUpdateCheck(value);
        return this;
    }

    @Override
    public CorePluginsRecord value4(String value) {
        setPluginAuthor(value);
        return this;
    }

    @Override
    public CorePluginsRecord value5(String value) {
        setPluginWebsite(value);
        return this;
    }

    @Override
    public CorePluginsRecord value6(String value) {
        setPluginLocation(value);
        return this;
    }

    @Override
    public CorePluginsRecord value7(UInteger value) {
        setPluginVersionLong(value);
        return this;
    }

    @Override
    public CorePluginsRecord value8(String value) {
        setPluginVersionHuman(value);
        return this;
    }

    @Override
    public CorePluginsRecord value9(Integer value) {
        setPluginUpdateCheckLast(value);
        return this;
    }

    @Override
    public CorePluginsRecord value10(String value) {
        setPluginUpdateCheckData(value);
        return this;
    }

    @Override
    public CorePluginsRecord value11(Byte value) {
        setPluginEnabled(value);
        return this;
    }

    @Override
    public CorePluginsRecord value12(ULong value) {
        setPluginOrder(value);
        return this;
    }

    @Override
    public CorePluginsRecord value13(String value) {
        setPluginDiagnosticUrl(value);
        return this;
    }

    @Override
    public CorePluginsRecord value14(UByte value) {
        setPluginRequiresManualIntervention(value);
        return this;
    }

    @Override
    public CorePluginsRecord values(ULong value1, String value2, String value3, String value4, String value5, String value6, UInteger value7, String value8, Integer value9, String value10, Byte value11, ULong value12, String value13, UByte value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CorePluginsRecord
     */
    public CorePluginsRecord() {
        super(CorePlugins.CORE_PLUGINS);
    }

    /**
     * Create a detached, initialised CorePluginsRecord
     */
    public CorePluginsRecord(ULong pluginId, String pluginName, String pluginUpdateCheck, String pluginAuthor, String pluginWebsite, String pluginLocation, UInteger pluginVersionLong, String pluginVersionHuman, Integer pluginUpdateCheckLast, String pluginUpdateCheckData, Byte pluginEnabled, ULong pluginOrder, String pluginDiagnosticUrl, UByte pluginRequiresManualIntervention) {
        super(CorePlugins.CORE_PLUGINS);

        setPluginId(pluginId);
        setPluginName(pluginName);
        setPluginUpdateCheck(pluginUpdateCheck);
        setPluginAuthor(pluginAuthor);
        setPluginWebsite(pluginWebsite);
        setPluginLocation(pluginLocation);
        setPluginVersionLong(pluginVersionLong);
        setPluginVersionHuman(pluginVersionHuman);
        setPluginUpdateCheckLast(pluginUpdateCheckLast);
        setPluginUpdateCheckData(pluginUpdateCheckData);
        setPluginEnabled(pluginEnabled);
        setPluginOrder(pluginOrder);
        setPluginDiagnosticUrl(pluginDiagnosticUrl);
        setPluginRequiresManualIntervention(pluginRequiresManualIntervention);
    }
}
