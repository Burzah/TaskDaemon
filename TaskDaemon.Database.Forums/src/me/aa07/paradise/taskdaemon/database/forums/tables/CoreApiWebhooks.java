/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreApiWebhooksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiWebhooks extends TableImpl<CoreApiWebhooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_api_webhooks</code>
     */
    public static final CoreApiWebhooks CORE_API_WEBHOOKS = new CoreApiWebhooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreApiWebhooksRecord> getRecordType() {
        return CoreApiWebhooksRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_api_webhooks.id</code>. ID Number
     */
    public final TableField<CoreApiWebhooksRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_api_webhooks.api_key</code>. The
     * API key which owns this webhook
     */
    public final TableField<CoreApiWebhooksRecord, String> API_KEY = createField(DSL.name("api_key"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("''", SQLDataType.CHAR)), this, "The API key which owns this webhook");

    /**
     * The column <code>paradise_forums.core_api_webhooks.events</code>.
     * Comma-delimited list of events to fire for
     */
    public final TableField<CoreApiWebhooksRecord, String> EVENTS = createField(DSL.name("events"), SQLDataType.CLOB.nullable(false), this, "Comma-delimited list of events to fire for");

    /**
     * The column <code>paradise_forums.core_api_webhooks.url</code>. The URL to
     * send webhook to
     */
    public final TableField<CoreApiWebhooksRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "The URL to send webhook to");

    /**
     * The column <code>paradise_forums.core_api_webhooks.enabled</code>.
     */
    public final TableField<CoreApiWebhooksRecord, Byte> ENABLED = createField(DSL.name("enabled"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>paradise_forums.core_api_webhooks.filters</code>.
     * JSON-encoded array of filters for each event
     */
    public final TableField<CoreApiWebhooksRecord, String> FILTERS = createField(DSL.name("filters"), SQLDataType.CLOB.nullable(false), this, "JSON-encoded array of filters for each event");

    /**
     * The column <code>paradise_forums.core_api_webhooks.content_type</code>.
     */
    public final TableField<CoreApiWebhooksRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("'application/x-www-form-urlencoded'", SQLDataType.VARCHAR)), this, "");

    private CoreApiWebhooks(Name alias, Table<CoreApiWebhooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreApiWebhooks(Name alias, Table<CoreApiWebhooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_webhooks</code> table
     * reference
     */
    public CoreApiWebhooks(String alias) {
        this(DSL.name(alias), CORE_API_WEBHOOKS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_webhooks</code> table
     * reference
     */
    public CoreApiWebhooks(Name alias) {
        this(alias, CORE_API_WEBHOOKS);
    }

    /**
     * Create a <code>paradise_forums.core_api_webhooks</code> table reference
     */
    public CoreApiWebhooks() {
        this(DSL.name("core_api_webhooks"), null);
    }

    public <O extends Record> CoreApiWebhooks(Table<O> child, ForeignKey<O, CoreApiWebhooksRecord> key) {
        super(child, key, CORE_API_WEBHOOKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_API_WEBHOOKS_API_KEY, Indexes.CORE_API_WEBHOOKS_ENABLED);
    }

    @Override
    public Identity<CoreApiWebhooksRecord, ULong> getIdentity() {
        return (Identity<CoreApiWebhooksRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreApiWebhooksRecord> getPrimaryKey() {
        return Keys.KEY_CORE_API_WEBHOOKS_PRIMARY;
    }

    @Override
    public CoreApiWebhooks as(String alias) {
        return new CoreApiWebhooks(DSL.name(alias), this);
    }

    @Override
    public CoreApiWebhooks as(Name alias) {
        return new CoreApiWebhooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiWebhooks rename(String name) {
        return new CoreApiWebhooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiWebhooks rename(Name name) {
        return new CoreApiWebhooks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, String, String, Byte, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
