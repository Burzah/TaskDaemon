/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreApiLogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreApiLogs extends TableImpl<CoreApiLogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_api_logs</code>
     */
    public static final CoreApiLogs CORE_API_LOGS = new CoreApiLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreApiLogsRecord> getRecordType() {
        return CoreApiLogsRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_api_logs.id</code>. ID Number
     */
    public final TableField<CoreApiLogsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ID Number");

    /**
     * The column <code>paradise_forums.core_api_logs.endpoint</code>. The
     * endpoint that was requested
     */
    public final TableField<CoreApiLogsRecord, String> ENDPOINT = createField(DSL.name("endpoint"), SQLDataType.VARCHAR(255).nullable(false), this, "The endpoint that was requested");

    /**
     * The column <code>paradise_forums.core_api_logs.method</code>. The HTTP
     * request method which was used
     */
    public final TableField<CoreApiLogsRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The HTTP request method which was used");

    /**
     * The column <code>paradise_forums.core_api_logs.api_key</code>. The API
     * key that was used
     */
    public final TableField<CoreApiLogsRecord, String> API_KEY = createField(DSL.name("api_key"), SQLDataType.CHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The API key that was used");

    /**
     * The column <code>paradise_forums.core_api_logs.ip_address</code>. The IP
     * address that the request came from
     */
    public final TableField<CoreApiLogsRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.VARCHAR(46).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "The IP address that the request came from");

    /**
     * The column <code>paradise_forums.core_api_logs.request_data</code>. The
     * request body
     */
    public final TableField<CoreApiLogsRecord, String> REQUEST_DATA = createField(DSL.name("request_data"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The request body");

    /**
     * The column <code>paradise_forums.core_api_logs.response_code</code>. The
     * HTTP response code
     */
    public final TableField<CoreApiLogsRecord, String> RESPONSE_CODE = createField(DSL.name("response_code"), SQLDataType.CHAR(3).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The HTTP response code");

    /**
     * The column <code>paradise_forums.core_api_logs.response_output</code>.
     * The response output
     */
    public final TableField<CoreApiLogsRecord, String> RESPONSE_OUTPUT = createField(DSL.name("response_output"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "The response output");

    /**
     * The column <code>paradise_forums.core_api_logs.date</code>. Timestamp of
     * when request was made
     */
    public final TableField<CoreApiLogsRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER.nullable(false), this, "Timestamp of when request was made");

    /**
     * The column <code>paradise_forums.core_api_logs.is_bad_key</code>. If this
     * log is for a request with a bad key - used to prevent brute force 
     */
    public final TableField<CoreApiLogsRecord, UByte> IS_BAD_KEY = createField(DSL.name("is_bad_key"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "If this log is for a request with a bad key - used to prevent brute force ");

    /**
     * The column <code>paradise_forums.core_api_logs.client_id</code>. The
     * OAuth client ID, if applicable
     */
    public final TableField<CoreApiLogsRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.CHAR(32).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The OAuth client ID, if applicable");

    /**
     * The column <code>paradise_forums.core_api_logs.member_id</code>. The
     * authorized use's member ID, if applicable
     */
    public final TableField<CoreApiLogsRecord, ULong> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "The authorized use's member ID, if applicable");

    /**
     * The column <code>paradise_forums.core_api_logs.access_token</code>. The
     * raw access token that was used
     */
    public final TableField<CoreApiLogsRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), SQLDataType.CHAR(97).defaultValue(DSL.inline("NULL", SQLDataType.CHAR)), this, "The raw access token that was used");

    private CoreApiLogs(Name alias, Table<CoreApiLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreApiLogs(Name alias, Table<CoreApiLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_logs</code> table
     * reference
     */
    public CoreApiLogs(String alias) {
        this(DSL.name(alias), CORE_API_LOGS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_api_logs</code> table
     * reference
     */
    public CoreApiLogs(Name alias) {
        this(alias, CORE_API_LOGS);
    }

    /**
     * Create a <code>paradise_forums.core_api_logs</code> table reference
     */
    public CoreApiLogs() {
        this(DSL.name("core_api_logs"), null);
    }

    public <O extends Record> CoreApiLogs(Table<O> child, ForeignKey<O, CoreApiLogsRecord> key) {
        super(child, key, CORE_API_LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_API_LOGS_BRUTEFORCE, Indexes.CORE_API_LOGS_CLEANUP, Indexes.CORE_API_LOGS_DATE);
    }

    @Override
    public Identity<CoreApiLogsRecord, ULong> getIdentity() {
        return (Identity<CoreApiLogsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreApiLogsRecord> getPrimaryKey() {
        return Keys.KEY_CORE_API_LOGS_PRIMARY;
    }

    @Override
    public CoreApiLogs as(String alias) {
        return new CoreApiLogs(DSL.name(alias), this);
    }

    @Override
    public CoreApiLogs as(Name alias) {
        return new CoreApiLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiLogs rename(String name) {
        return new CoreApiLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreApiLogs rename(Name name) {
        return new CoreApiLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<ULong, String, String, String, String, String, String, String, Integer, UByte, String, ULong, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
