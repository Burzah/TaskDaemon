/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.forums.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.forums.Indexes;
import me.aa07.paradise.taskdaemon.database.forums.Keys;
import me.aa07.paradise.taskdaemon.database.forums.ParadiseForums;
import me.aa07.paradise.taskdaemon.database.forums.enums.CoreLeadersLeaderType;
import me.aa07.paradise.taskdaemon.database.forums.tables.records.CoreLeadersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreLeaders extends TableImpl<CoreLeadersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>paradise_forums.core_leaders</code>
     */
    public static final CoreLeaders CORE_LEADERS = new CoreLeaders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreLeadersRecord> getRecordType() {
        return CoreLeadersRecord.class;
    }

    /**
     * The column <code>paradise_forums.core_leaders.leader_id</code>. Primary
     * ID
     */
    public final TableField<CoreLeadersRecord, ULong> LEADER_ID = createField(DSL.name("leader_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary ID");

    /**
     * The column <code>paradise_forums.core_leaders.leader_type</code>. Record
     * is for member (m) or group (g)
     */
    public final TableField<CoreLeadersRecord, CoreLeadersLeaderType> LEADER_TYPE = createField(DSL.name("leader_type"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("'m'", SQLDataType.VARCHAR)).asEnumDataType(me.aa07.paradise.taskdaemon.database.forums.enums.CoreLeadersLeaderType.class), this, "Record is for member (m) or group (g)");

    /**
     * The column <code>paradise_forums.core_leaders.leader_type_id</code>.
     * Member or group ID
     */
    public final TableField<CoreLeadersRecord, Long> LEADER_TYPE_ID = createField(DSL.name("leader_type_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "Member or group ID");

    /**
     * The column <code>paradise_forums.core_leaders.leader_group_id</code>. The
     * group to display in (core_leaders_group.group_id)
     */
    public final TableField<CoreLeadersRecord, Integer> LEADER_GROUP_ID = createField(DSL.name("leader_group_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "The group to display in (core_leaders_group.group_id)");

    /**
     * The column <code>paradise_forums.core_leaders.leader_position</code>.
     * Position
     */
    public final TableField<CoreLeadersRecord, Long> LEADER_POSITION = createField(DSL.name("leader_position"), SQLDataType.BIGINT.defaultValue(DSL.inline("NULL", SQLDataType.BIGINT)), this, "Position");

    private CoreLeaders(Name alias, Table<CoreLeadersRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreLeaders(Name alias, Table<CoreLeadersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_forums.core_leaders</code> table
     * reference
     */
    public CoreLeaders(String alias) {
        this(DSL.name(alias), CORE_LEADERS);
    }

    /**
     * Create an aliased <code>paradise_forums.core_leaders</code> table
     * reference
     */
    public CoreLeaders(Name alias) {
        this(alias, CORE_LEADERS);
    }

    /**
     * Create a <code>paradise_forums.core_leaders</code> table reference
     */
    public CoreLeaders() {
        this(DSL.name("core_leaders"), null);
    }

    public <O extends Record> CoreLeaders(Table<O> child, ForeignKey<O, CoreLeadersRecord> key) {
        super(child, key, CORE_LEADERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseForums.PARADISE_FORUMS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_LEADERS_LEADER_GROUP_ID);
    }

    @Override
    public Identity<CoreLeadersRecord, ULong> getIdentity() {
        return (Identity<CoreLeadersRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreLeadersRecord> getPrimaryKey() {
        return Keys.KEY_CORE_LEADERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoreLeadersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CORE_LEADERS_LEADER_TYPE);
    }

    @Override
    public CoreLeaders as(String alias) {
        return new CoreLeaders(DSL.name(alias), this);
    }

    @Override
    public CoreLeaders as(Name alias) {
        return new CoreLeaders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLeaders rename(String name) {
        return new CoreLeaders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreLeaders rename(Name name) {
        return new CoreLeaders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, CoreLeadersLeaderType, Long, Integer, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
