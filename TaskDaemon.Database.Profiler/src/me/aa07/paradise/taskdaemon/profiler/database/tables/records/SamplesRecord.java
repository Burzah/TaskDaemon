/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.profiler.database.tables.records;


import java.time.LocalDateTime;

import me.aa07.paradise.taskdaemon.profiler.database.tables.Samples;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SamplesRecord extends UpdatableRecordImpl<SamplesRecord> implements Record9<Long, Integer, LocalDateTime, Long, Double, Double, Double, Double, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>paradise_profilerdaemon.samples.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.roundId</code>.
     */
    public void setRoundid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.roundId</code>.
     */
    public Integer getRoundid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.sampleTime</code>.
     */
    public void setSampletime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.sampleTime</code>.
     */
    public LocalDateTime getSampletime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.procId</code>.
     */
    public void setProcid(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.procId</code>.
     */
    public Long getProcid() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.self</code>.
     */
    public void setSelf(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.self</code>.
     */
    public Double getSelf() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.total</code>.
     */
    public void setTotal(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.total</code>.
     */
    public Double getTotal() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.real</code>.
     */
    public void setReal(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.real</code>.
     */
    public Double getReal() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.over</code>.
     */
    public void setOver(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.over</code>.
     */
    public Double getOver() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>paradise_profilerdaemon.samples.calls</code>.
     */
    public void setCalls(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>paradise_profilerdaemon.samples.calls</code>.
     */
    public Integer getCalls() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, LocalDateTime, Long, Double, Double, Double, Double, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Integer, LocalDateTime, Long, Double, Double, Double, Double, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Samples.SAMPLES.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Samples.SAMPLES.ROUNDID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Samples.SAMPLES.SAMPLETIME;
    }

    @Override
    public Field<Long> field4() {
        return Samples.SAMPLES.PROCID;
    }

    @Override
    public Field<Double> field5() {
        return Samples.SAMPLES.SELF;
    }

    @Override
    public Field<Double> field6() {
        return Samples.SAMPLES.TOTAL;
    }

    @Override
    public Field<Double> field7() {
        return Samples.SAMPLES.REAL;
    }

    @Override
    public Field<Double> field8() {
        return Samples.SAMPLES.OVER;
    }

    @Override
    public Field<Integer> field9() {
        return Samples.SAMPLES.CALLS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getRoundid();
    }

    @Override
    public LocalDateTime component3() {
        return getSampletime();
    }

    @Override
    public Long component4() {
        return getProcid();
    }

    @Override
    public Double component5() {
        return getSelf();
    }

    @Override
    public Double component6() {
        return getTotal();
    }

    @Override
    public Double component7() {
        return getReal();
    }

    @Override
    public Double component8() {
        return getOver();
    }

    @Override
    public Integer component9() {
        return getCalls();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getRoundid();
    }

    @Override
    public LocalDateTime value3() {
        return getSampletime();
    }

    @Override
    public Long value4() {
        return getProcid();
    }

    @Override
    public Double value5() {
        return getSelf();
    }

    @Override
    public Double value6() {
        return getTotal();
    }

    @Override
    public Double value7() {
        return getReal();
    }

    @Override
    public Double value8() {
        return getOver();
    }

    @Override
    public Integer value9() {
        return getCalls();
    }

    @Override
    public SamplesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SamplesRecord value2(Integer value) {
        setRoundid(value);
        return this;
    }

    @Override
    public SamplesRecord value3(LocalDateTime value) {
        setSampletime(value);
        return this;
    }

    @Override
    public SamplesRecord value4(Long value) {
        setProcid(value);
        return this;
    }

    @Override
    public SamplesRecord value5(Double value) {
        setSelf(value);
        return this;
    }

    @Override
    public SamplesRecord value6(Double value) {
        setTotal(value);
        return this;
    }

    @Override
    public SamplesRecord value7(Double value) {
        setReal(value);
        return this;
    }

    @Override
    public SamplesRecord value8(Double value) {
        setOver(value);
        return this;
    }

    @Override
    public SamplesRecord value9(Integer value) {
        setCalls(value);
        return this;
    }

    @Override
    public SamplesRecord values(Long value1, Integer value2, LocalDateTime value3, Long value4, Double value5, Double value6, Double value7, Double value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SamplesRecord
     */
    public SamplesRecord() {
        super(Samples.SAMPLES);
    }

    /**
     * Create a detached, initialised SamplesRecord
     */
    public SamplesRecord(Long id, Integer roundid, LocalDateTime sampletime, Long procid, Double self, Double total, Double real, Double over, Integer calls) {
        super(Samples.SAMPLES);

        setId(id);
        setRoundid(roundid);
        setSampletime(sampletime);
        setProcid(procid);
        setSelf(self);
        setTotal(total);
        setReal(real);
        setOver(over);
        setCalls(calls);
    }
}
