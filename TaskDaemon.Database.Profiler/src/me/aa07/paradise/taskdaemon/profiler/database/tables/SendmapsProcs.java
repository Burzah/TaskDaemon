/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.profiler.database.tables;


import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.profiler.database.Keys;
import me.aa07.paradise.taskdaemon.profiler.database.ParadiseProfilerdaemon;
import me.aa07.paradise.taskdaemon.profiler.database.tables.records.SendmapsProcsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SendmapsProcs extends TableImpl<SendmapsProcsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_profilerdaemon.sendmaps_procs</code>
     */
    public static final SendmapsProcs SENDMAPS_PROCS = new SendmapsProcs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SendmapsProcsRecord> getRecordType() {
        return SendmapsProcsRecord.class;
    }

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_procs.id</code>.
     */
    public final TableField<SendmapsProcsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_procs.procpath</code>.
     */
    public final TableField<SendmapsProcsRecord, String> PROCPATH = createField(DSL.name("procpath"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    private SendmapsProcs(Name alias, Table<SendmapsProcsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SendmapsProcs(Name alias, Table<SendmapsProcsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_profilerdaemon.sendmaps_procs</code>
     * table reference
     */
    public SendmapsProcs(String alias) {
        this(DSL.name(alias), SENDMAPS_PROCS);
    }

    /**
     * Create an aliased <code>paradise_profilerdaemon.sendmaps_procs</code>
     * table reference
     */
    public SendmapsProcs(Name alias) {
        this(alias, SENDMAPS_PROCS);
    }

    /**
     * Create a <code>paradise_profilerdaemon.sendmaps_procs</code> table
     * reference
     */
    public SendmapsProcs() {
        this(DSL.name("sendmaps_procs"), null);
    }

    public <O extends Record> SendmapsProcs(Table<O> child, ForeignKey<O, SendmapsProcsRecord> key) {
        super(child, key, SENDMAPS_PROCS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseProfilerdaemon.PARADISE_PROFILERDAEMON;
    }

    @Override
    public Identity<SendmapsProcsRecord, Long> getIdentity() {
        return (Identity<SendmapsProcsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SendmapsProcsRecord> getPrimaryKey() {
        return Keys.KEY_SENDMAPS_PROCS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SendmapsProcsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SENDMAPS_PROCS_PROCPATH);
    }

    @Override
    public SendmapsProcs as(String alias) {
        return new SendmapsProcs(DSL.name(alias), this);
    }

    @Override
    public SendmapsProcs as(Name alias) {
        return new SendmapsProcs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SendmapsProcs rename(String name) {
        return new SendmapsProcs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SendmapsProcs rename(Name name) {
        return new SendmapsProcs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
