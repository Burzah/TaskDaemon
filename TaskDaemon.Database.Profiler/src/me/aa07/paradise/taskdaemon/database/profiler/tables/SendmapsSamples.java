/*
 * This file is generated by jOOQ.
 */
package me.aa07.paradise.taskdaemon.database.profiler.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import me.aa07.paradise.taskdaemon.database.profiler.Indexes;
import me.aa07.paradise.taskdaemon.database.profiler.Keys;
import me.aa07.paradise.taskdaemon.database.profiler.ParadiseProfilerdaemon;
import me.aa07.paradise.taskdaemon.database.profiler.tables.records.SendmapsSamplesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SendmapsSamples extends TableImpl<SendmapsSamplesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>paradise_profilerdaemon.sendmaps_samples</code>
     */
    public static final SendmapsSamples SENDMAPS_SAMPLES = new SendmapsSamples();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SendmapsSamplesRecord> getRecordType() {
        return SendmapsSamplesRecord.class;
    }

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_samples.id</code>.
     */
    public final TableField<SendmapsSamplesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_samples.roundId</code>.
     */
    public final TableField<SendmapsSamplesRecord, Integer> ROUNDID = createField(DSL.name("roundId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>paradise_profilerdaemon.sendmaps_samples.sampleTime</code>.
     */
    public final TableField<SendmapsSamplesRecord, LocalDateTime> SAMPLETIME = createField(DSL.name("sampleTime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("current_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_samples.procId</code>.
     */
    public final TableField<SendmapsSamplesRecord, Long> PROCID = createField(DSL.name("procId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_samples.value</code>.
     */
    public final TableField<SendmapsSamplesRecord, Double> VALUE = createField(DSL.name("value"), SQLDataType.DOUBLE.defaultValue(DSL.inline("NULL", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>paradise_profilerdaemon.sendmaps_samples.calls</code>.
     */
    public final TableField<SendmapsSamplesRecord, Integer> CALLS = createField(DSL.name("calls"), SQLDataType.INTEGER.nullable(false), this, "");

    private SendmapsSamples(Name alias, Table<SendmapsSamplesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SendmapsSamples(Name alias, Table<SendmapsSamplesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>paradise_profilerdaemon.sendmaps_samples</code>
     * table reference
     */
    public SendmapsSamples(String alias) {
        this(DSL.name(alias), SENDMAPS_SAMPLES);
    }

    /**
     * Create an aliased <code>paradise_profilerdaemon.sendmaps_samples</code>
     * table reference
     */
    public SendmapsSamples(Name alias) {
        this(alias, SENDMAPS_SAMPLES);
    }

    /**
     * Create a <code>paradise_profilerdaemon.sendmaps_samples</code> table
     * reference
     */
    public SendmapsSamples() {
        this(DSL.name("sendmaps_samples"), null);
    }

    public <O extends Record> SendmapsSamples(Table<O> child, ForeignKey<O, SendmapsSamplesRecord> key) {
        super(child, key, SENDMAPS_SAMPLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ParadiseProfilerdaemon.PARADISE_PROFILERDAEMON;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SENDMAPS_SAMPLES_FK1_PROCID_SENDMAPS_PROCS_ID);
    }

    @Override
    public Identity<SendmapsSamplesRecord, Long> getIdentity() {
        return (Identity<SendmapsSamplesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SendmapsSamplesRecord> getPrimaryKey() {
        return Keys.KEY_SENDMAPS_SAMPLES_PRIMARY;
    }

    @Override
    public List<ForeignKey<SendmapsSamplesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SENDMAPS_SAMPLES_SENDMAPS_PROCS);
    }

    private transient SendmapsProcs _sendmapsProcs;

    public SendmapsProcs sendmapsProcs() {
        if (_sendmapsProcs == null)
            _sendmapsProcs = new SendmapsProcs(this, Keys.FK_SENDMAPS_SAMPLES_SENDMAPS_PROCS);

        return _sendmapsProcs;
    }

    @Override
    public SendmapsSamples as(String alias) {
        return new SendmapsSamples(DSL.name(alias), this);
    }

    @Override
    public SendmapsSamples as(Name alias) {
        return new SendmapsSamples(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SendmapsSamples rename(String name) {
        return new SendmapsSamples(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SendmapsSamples rename(Name name) {
        return new SendmapsSamples(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, LocalDateTime, Long, Double, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
